# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/proto/speech/v1/cloud_speech.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.longrunning import operations_pb2 as google_dot_longrunning_dot_operations__pb2
from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2
from google.protobuf import duration_pb2 as google_dot_protobuf_dot_duration__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2
from google.rpc import status_pb2 as google_dot_rpc_dot_status__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='google/cloud/proto/speech/v1/cloud_speech.proto',
  package='google.cloud.speech.v1',
  syntax='proto3',
  serialized_pb=_b('\n/google/cloud/proto/speech/v1/cloud_speech.proto\x12\x16google.cloud.speech.v1\x1a\x1cgoogle/api/annotations.proto\x1a#google/longrunning/operations.proto\x1a\x19google/protobuf/any.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17google/rpc/status.proto\"\x86\x01\n\x10RecognizeRequest\x12\x39\n\x06\x63onfig\x18\x01 \x01(\x0b\x32).google.cloud.speech.v1.RecognitionConfig\x12\x37\n\x05\x61udio\x18\x02 \x01(\x0b\x32(.google.cloud.speech.v1.RecognitionAudio\"\x91\x01\n\x1bLongRunningRecognizeRequest\x12\x39\n\x06\x63onfig\x18\x01 \x01(\x0b\x32).google.cloud.speech.v1.RecognitionConfig\x12\x37\n\x05\x61udio\x18\x02 \x01(\x0b\x32(.google.cloud.speech.v1.RecognitionAudio\"\x99\x01\n\x19StreamingRecognizeRequest\x12N\n\x10streaming_config\x18\x01 \x01(\x0b\x32\x32.google.cloud.speech.v1.StreamingRecognitionConfigH\x00\x12\x17\n\raudio_content\x18\x02 \x01(\x0cH\x00\x42\x13\n\x11streaming_request\"\x8a\x01\n\x1aStreamingRecognitionConfig\x12\x39\n\x06\x63onfig\x18\x01 \x01(\x0b\x32).google.cloud.speech.v1.RecognitionConfig\x12\x18\n\x10single_utterance\x18\x02 \x01(\x08\x12\x17\n\x0finterim_results\x18\x03 \x01(\x08\"\xb4\x03\n\x11RecognitionConfig\x12I\n\x08\x65ncoding\x18\x01 \x01(\x0e\x32\x37.google.cloud.speech.v1.RecognitionConfig.AudioEncoding\x12\x19\n\x11sample_rate_hertz\x18\x02 \x01(\x05\x12\x15\n\rlanguage_code\x18\x03 \x01(\t\x12\x18\n\x10max_alternatives\x18\x04 \x01(\x05\x12\x18\n\x10profanity_filter\x18\x05 \x01(\x08\x12>\n\x0fspeech_contexts\x18\x06 \x03(\x0b\x32%.google.cloud.speech.v1.SpeechContext\x12 \n\x18\x65nable_word_time_offsets\x18\x08 \x01(\x08\"\x8b\x01\n\rAudioEncoding\x12\x18\n\x14\x45NCODING_UNSPECIFIED\x10\x00\x12\x0c\n\x08LINEAR16\x10\x01\x12\x08\n\x04\x46LAC\x10\x02\x12\t\n\x05MULAW\x10\x03\x12\x07\n\x03\x41MR\x10\x04\x12\n\n\x06\x41MR_WB\x10\x05\x12\x0c\n\x08OGG_OPUS\x10\x06\x12\x1a\n\x16SPEEX_WITH_HEADER_BYTE\x10\x07\" \n\rSpeechContext\x12\x0f\n\x07phrases\x18\x01 \x03(\t\"D\n\x10RecognitionAudio\x12\x11\n\x07\x63ontent\x18\x01 \x01(\x0cH\x00\x12\r\n\x03uri\x18\x02 \x01(\tH\x00\x42\x0e\n\x0c\x61udio_source\"U\n\x11RecognizeResponse\x12@\n\x07results\x18\x02 \x03(\x0b\x32/.google.cloud.speech.v1.SpeechRecognitionResult\"`\n\x1cLongRunningRecognizeResponse\x12@\n\x07results\x18\x02 \x03(\x0b\x32/.google.cloud.speech.v1.SpeechRecognitionResult\"\x9e\x01\n\x1cLongRunningRecognizeMetadata\x12\x18\n\x10progress_percent\x18\x01 \x01(\x05\x12.\n\nstart_time\x18\x02 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x34\n\x10last_update_time\x18\x03 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\"\xb1\x02\n\x1aStreamingRecognizeResponse\x12!\n\x05\x65rror\x18\x01 \x01(\x0b\x32\x12.google.rpc.Status\x12\x43\n\x07results\x18\x02 \x03(\x0b\x32\x32.google.cloud.speech.v1.StreamingRecognitionResult\x12]\n\x11speech_event_type\x18\x04 \x01(\x0e\x32\x42.google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType\"L\n\x0fSpeechEventType\x12\x1c\n\x18SPEECH_EVENT_UNSPECIFIED\x10\x00\x12\x1b\n\x17\x45ND_OF_SINGLE_UTTERANCE\x10\x01\"\x8d\x01\n\x1aStreamingRecognitionResult\x12J\n\x0c\x61lternatives\x18\x01 \x03(\x0b\x32\x34.google.cloud.speech.v1.SpeechRecognitionAlternative\x12\x10\n\x08is_final\x18\x02 \x01(\x08\x12\x11\n\tstability\x18\x03 \x01(\x02\"e\n\x17SpeechRecognitionResult\x12J\n\x0c\x61lternatives\x18\x01 \x03(\x0b\x32\x34.google.cloud.speech.v1.SpeechRecognitionAlternative\"w\n\x1cSpeechRecognitionAlternative\x12\x12\n\ntranscript\x18\x01 \x01(\t\x12\x12\n\nconfidence\x18\x02 \x01(\x02\x12/\n\x05words\x18\x03 \x03(\x0b\x32 .google.cloud.speech.v1.WordInfo\"t\n\x08WordInfo\x12-\n\nstart_time\x18\x01 \x01(\x0b\x32\x19.google.protobuf.Duration\x12+\n\x08\x65nd_time\x18\x02 \x01(\x0b\x32\x19.google.protobuf.Duration\x12\x0c\n\x04word\x18\x03 \x01(\t2\xa6\x03\n\x06Speech\x12\x81\x01\n\tRecognize\x12(.google.cloud.speech.v1.RecognizeRequest\x1a).google.cloud.speech.v1.RecognizeResponse\"\x1f\x82\xd3\xe4\x93\x02\x19\"\x14/v1/speech:recognize:\x01*\x12\x96\x01\n\x14LongRunningRecognize\x12\x33.google.cloud.speech.v1.LongRunningRecognizeRequest\x1a\x1d.google.longrunning.Operation\"*\x82\xd3\xe4\x93\x02$\"\x1f/v1/speech:longrunningrecognize:\x01*\x12\x7f\n\x12StreamingRecognize\x12\x31.google.cloud.speech.v1.StreamingRecognizeRequest\x1a\x32.google.cloud.speech.v1.StreamingRecognizeResponse(\x01\x30\x01\x42l\n\x1a\x63om.google.cloud.speech.v1B\x0bSpeechProtoP\x01Z<google.golang.org/genproto/googleapis/cloud/speech/v1;speech\xf8\x01\x01\x62\x06proto3')
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_longrunning_dot_operations__pb2.DESCRIPTOR,google_dot_protobuf_dot_any__pb2.DESCRIPTOR,google_dot_protobuf_dot_duration__pb2.DESCRIPTOR,google_dot_protobuf_dot_timestamp__pb2.DESCRIPTOR,google_dot_rpc_dot_status__pb2.DESCRIPTOR,])



_RECOGNITIONCONFIG_AUDIOENCODING = _descriptor.EnumDescriptor(
  name='AudioEncoding',
  full_name='google.cloud.speech.v1.RecognitionConfig.AudioEncoding',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ENCODING_UNSPECIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LINEAR16', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLAC', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MULAW', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='AMR', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='AMR_WB', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OGG_OPUS', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SPEEX_WITH_HEADER_BYTE', index=7, number=7,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1139,
  serialized_end=1278,
)
_sym_db.RegisterEnumDescriptor(_RECOGNITIONCONFIG_AUDIOENCODING)

_STREAMINGRECOGNIZERESPONSE_SPEECHEVENTTYPE = _descriptor.EnumDescriptor(
  name='SpeechEventType',
  full_name='google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SPEECH_EVENT_UNSPECIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='END_OF_SINGLE_UTTERANCE', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1960,
  serialized_end=2036,
)
_sym_db.RegisterEnumDescriptor(_STREAMINGRECOGNIZERESPONSE_SPEECHEVENTTYPE)


_RECOGNIZEREQUEST = _descriptor.Descriptor(
  name='RecognizeRequest',
  full_name='google.cloud.speech.v1.RecognizeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='config', full_name='google.cloud.speech.v1.RecognizeRequest.config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='audio', full_name='google.cloud.speech.v1.RecognizeRequest.audio', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=260,
  serialized_end=394,
)


_LONGRUNNINGRECOGNIZEREQUEST = _descriptor.Descriptor(
  name='LongRunningRecognizeRequest',
  full_name='google.cloud.speech.v1.LongRunningRecognizeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='config', full_name='google.cloud.speech.v1.LongRunningRecognizeRequest.config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='audio', full_name='google.cloud.speech.v1.LongRunningRecognizeRequest.audio', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=397,
  serialized_end=542,
)


_STREAMINGRECOGNIZEREQUEST = _descriptor.Descriptor(
  name='StreamingRecognizeRequest',
  full_name='google.cloud.speech.v1.StreamingRecognizeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='streaming_config', full_name='google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='audio_content', full_name='google.cloud.speech.v1.StreamingRecognizeRequest.audio_content', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='streaming_request', full_name='google.cloud.speech.v1.StreamingRecognizeRequest.streaming_request',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=545,
  serialized_end=698,
)


_STREAMINGRECOGNITIONCONFIG = _descriptor.Descriptor(
  name='StreamingRecognitionConfig',
  full_name='google.cloud.speech.v1.StreamingRecognitionConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='config', full_name='google.cloud.speech.v1.StreamingRecognitionConfig.config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='single_utterance', full_name='google.cloud.speech.v1.StreamingRecognitionConfig.single_utterance', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='interim_results', full_name='google.cloud.speech.v1.StreamingRecognitionConfig.interim_results', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=701,
  serialized_end=839,
)


_RECOGNITIONCONFIG = _descriptor.Descriptor(
  name='RecognitionConfig',
  full_name='google.cloud.speech.v1.RecognitionConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='encoding', full_name='google.cloud.speech.v1.RecognitionConfig.encoding', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sample_rate_hertz', full_name='google.cloud.speech.v1.RecognitionConfig.sample_rate_hertz', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='language_code', full_name='google.cloud.speech.v1.RecognitionConfig.language_code', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_alternatives', full_name='google.cloud.speech.v1.RecognitionConfig.max_alternatives', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='profanity_filter', full_name='google.cloud.speech.v1.RecognitionConfig.profanity_filter', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='speech_contexts', full_name='google.cloud.speech.v1.RecognitionConfig.speech_contexts', index=5,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='enable_word_time_offsets', full_name='google.cloud.speech.v1.RecognitionConfig.enable_word_time_offsets', index=6,
      number=8, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _RECOGNITIONCONFIG_AUDIOENCODING,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=842,
  serialized_end=1278,
)


_SPEECHCONTEXT = _descriptor.Descriptor(
  name='SpeechContext',
  full_name='google.cloud.speech.v1.SpeechContext',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='phrases', full_name='google.cloud.speech.v1.SpeechContext.phrases', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1280,
  serialized_end=1312,
)


_RECOGNITIONAUDIO = _descriptor.Descriptor(
  name='RecognitionAudio',
  full_name='google.cloud.speech.v1.RecognitionAudio',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content', full_name='google.cloud.speech.v1.RecognitionAudio.content', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='uri', full_name='google.cloud.speech.v1.RecognitionAudio.uri', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='audio_source', full_name='google.cloud.speech.v1.RecognitionAudio.audio_source',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1314,
  serialized_end=1382,
)


_RECOGNIZERESPONSE = _descriptor.Descriptor(
  name='RecognizeResponse',
  full_name='google.cloud.speech.v1.RecognizeResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='results', full_name='google.cloud.speech.v1.RecognizeResponse.results', index=0,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1384,
  serialized_end=1469,
)


_LONGRUNNINGRECOGNIZERESPONSE = _descriptor.Descriptor(
  name='LongRunningRecognizeResponse',
  full_name='google.cloud.speech.v1.LongRunningRecognizeResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='results', full_name='google.cloud.speech.v1.LongRunningRecognizeResponse.results', index=0,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1471,
  serialized_end=1567,
)


_LONGRUNNINGRECOGNIZEMETADATA = _descriptor.Descriptor(
  name='LongRunningRecognizeMetadata',
  full_name='google.cloud.speech.v1.LongRunningRecognizeMetadata',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='progress_percent', full_name='google.cloud.speech.v1.LongRunningRecognizeMetadata.progress_percent', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start_time', full_name='google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='last_update_time', full_name='google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1570,
  serialized_end=1728,
)


_STREAMINGRECOGNIZERESPONSE = _descriptor.Descriptor(
  name='StreamingRecognizeResponse',
  full_name='google.cloud.speech.v1.StreamingRecognizeResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='error', full_name='google.cloud.speech.v1.StreamingRecognizeResponse.error', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='results', full_name='google.cloud.speech.v1.StreamingRecognizeResponse.results', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='speech_event_type', full_name='google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_type', index=2,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _STREAMINGRECOGNIZERESPONSE_SPEECHEVENTTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1731,
  serialized_end=2036,
)


_STREAMINGRECOGNITIONRESULT = _descriptor.Descriptor(
  name='StreamingRecognitionResult',
  full_name='google.cloud.speech.v1.StreamingRecognitionResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='alternatives', full_name='google.cloud.speech.v1.StreamingRecognitionResult.alternatives', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_final', full_name='google.cloud.speech.v1.StreamingRecognitionResult.is_final', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stability', full_name='google.cloud.speech.v1.StreamingRecognitionResult.stability', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2039,
  serialized_end=2180,
)


_SPEECHRECOGNITIONRESULT = _descriptor.Descriptor(
  name='SpeechRecognitionResult',
  full_name='google.cloud.speech.v1.SpeechRecognitionResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='alternatives', full_name='google.cloud.speech.v1.SpeechRecognitionResult.alternatives', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2182,
  serialized_end=2283,
)


_SPEECHRECOGNITIONALTERNATIVE = _descriptor.Descriptor(
  name='SpeechRecognitionAlternative',
  full_name='google.cloud.speech.v1.SpeechRecognitionAlternative',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='transcript', full_name='google.cloud.speech.v1.SpeechRecognitionAlternative.transcript', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='confidence', full_name='google.cloud.speech.v1.SpeechRecognitionAlternative.confidence', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='words', full_name='google.cloud.speech.v1.SpeechRecognitionAlternative.words', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2285,
  serialized_end=2404,
)


_WORDINFO = _descriptor.Descriptor(
  name='WordInfo',
  full_name='google.cloud.speech.v1.WordInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start_time', full_name='google.cloud.speech.v1.WordInfo.start_time', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end_time', full_name='google.cloud.speech.v1.WordInfo.end_time', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='word', full_name='google.cloud.speech.v1.WordInfo.word', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2406,
  serialized_end=2522,
)

_RECOGNIZEREQUEST.fields_by_name['config'].message_type = _RECOGNITIONCONFIG
_RECOGNIZEREQUEST.fields_by_name['audio'].message_type = _RECOGNITIONAUDIO
_LONGRUNNINGRECOGNIZEREQUEST.fields_by_name['config'].message_type = _RECOGNITIONCONFIG
_LONGRUNNINGRECOGNIZEREQUEST.fields_by_name['audio'].message_type = _RECOGNITIONAUDIO
_STREAMINGRECOGNIZEREQUEST.fields_by_name['streaming_config'].message_type = _STREAMINGRECOGNITIONCONFIG
_STREAMINGRECOGNIZEREQUEST.oneofs_by_name['streaming_request'].fields.append(
  _STREAMINGRECOGNIZEREQUEST.fields_by_name['streaming_config'])
_STREAMINGRECOGNIZEREQUEST.fields_by_name['streaming_config'].containing_oneof = _STREAMINGRECOGNIZEREQUEST.oneofs_by_name['streaming_request']
_STREAMINGRECOGNIZEREQUEST.oneofs_by_name['streaming_request'].fields.append(
  _STREAMINGRECOGNIZEREQUEST.fields_by_name['audio_content'])
_STREAMINGRECOGNIZEREQUEST.fields_by_name['audio_content'].containing_oneof = _STREAMINGRECOGNIZEREQUEST.oneofs_by_name['streaming_request']
_STREAMINGRECOGNITIONCONFIG.fields_by_name['config'].message_type = _RECOGNITIONCONFIG
_RECOGNITIONCONFIG.fields_by_name['encoding'].enum_type = _RECOGNITIONCONFIG_AUDIOENCODING
_RECOGNITIONCONFIG.fields_by_name['speech_contexts'].message_type = _SPEECHCONTEXT
_RECOGNITIONCONFIG_AUDIOENCODING.containing_type = _RECOGNITIONCONFIG
_RECOGNITIONAUDIO.oneofs_by_name['audio_source'].fields.append(
  _RECOGNITIONAUDIO.fields_by_name['content'])
_RECOGNITIONAUDIO.fields_by_name['content'].containing_oneof = _RECOGNITIONAUDIO.oneofs_by_name['audio_source']
_RECOGNITIONAUDIO.oneofs_by_name['audio_source'].fields.append(
  _RECOGNITIONAUDIO.fields_by_name['uri'])
_RECOGNITIONAUDIO.fields_by_name['uri'].containing_oneof = _RECOGNITIONAUDIO.oneofs_by_name['audio_source']
_RECOGNIZERESPONSE.fields_by_name['results'].message_type = _SPEECHRECOGNITIONRESULT
_LONGRUNNINGRECOGNIZERESPONSE.fields_by_name['results'].message_type = _SPEECHRECOGNITIONRESULT
_LONGRUNNINGRECOGNIZEMETADATA.fields_by_name['start_time'].message_type = google_dot_protobuf_dot_timestamp__pb2._TIMESTAMP
_LONGRUNNINGRECOGNIZEMETADATA.fields_by_name['last_update_time'].message_type = google_dot_protobuf_dot_timestamp__pb2._TIMESTAMP
_STREAMINGRECOGNIZERESPONSE.fields_by_name['error'].message_type = google_dot_rpc_dot_status__pb2._STATUS
_STREAMINGRECOGNIZERESPONSE.fields_by_name['results'].message_type = _STREAMINGRECOGNITIONRESULT
_STREAMINGRECOGNIZERESPONSE.fields_by_name['speech_event_type'].enum_type = _STREAMINGRECOGNIZERESPONSE_SPEECHEVENTTYPE
_STREAMINGRECOGNIZERESPONSE_SPEECHEVENTTYPE.containing_type = _STREAMINGRECOGNIZERESPONSE
_STREAMINGRECOGNITIONRESULT.fields_by_name['alternatives'].message_type = _SPEECHRECOGNITIONALTERNATIVE
_SPEECHRECOGNITIONRESULT.fields_by_name['alternatives'].message_type = _SPEECHRECOGNITIONALTERNATIVE
_SPEECHRECOGNITIONALTERNATIVE.fields_by_name['words'].message_type = _WORDINFO
_WORDINFO.fields_by_name['start_time'].message_type = google_dot_protobuf_dot_duration__pb2._DURATION
_WORDINFO.fields_by_name['end_time'].message_type = google_dot_protobuf_dot_duration__pb2._DURATION
DESCRIPTOR.message_types_by_name['RecognizeRequest'] = _RECOGNIZEREQUEST
DESCRIPTOR.message_types_by_name['LongRunningRecognizeRequest'] = _LONGRUNNINGRECOGNIZEREQUEST
DESCRIPTOR.message_types_by_name['StreamingRecognizeRequest'] = _STREAMINGRECOGNIZEREQUEST
DESCRIPTOR.message_types_by_name['StreamingRecognitionConfig'] = _STREAMINGRECOGNITIONCONFIG
DESCRIPTOR.message_types_by_name['RecognitionConfig'] = _RECOGNITIONCONFIG
DESCRIPTOR.message_types_by_name['SpeechContext'] = _SPEECHCONTEXT
DESCRIPTOR.message_types_by_name['RecognitionAudio'] = _RECOGNITIONAUDIO
DESCRIPTOR.message_types_by_name['RecognizeResponse'] = _RECOGNIZERESPONSE
DESCRIPTOR.message_types_by_name['LongRunningRecognizeResponse'] = _LONGRUNNINGRECOGNIZERESPONSE
DESCRIPTOR.message_types_by_name['LongRunningRecognizeMetadata'] = _LONGRUNNINGRECOGNIZEMETADATA
DESCRIPTOR.message_types_by_name['StreamingRecognizeResponse'] = _STREAMINGRECOGNIZERESPONSE
DESCRIPTOR.message_types_by_name['StreamingRecognitionResult'] = _STREAMINGRECOGNITIONRESULT
DESCRIPTOR.message_types_by_name['SpeechRecognitionResult'] = _SPEECHRECOGNITIONRESULT
DESCRIPTOR.message_types_by_name['SpeechRecognitionAlternative'] = _SPEECHRECOGNITIONALTERNATIVE
DESCRIPTOR.message_types_by_name['WordInfo'] = _WORDINFO
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

RecognizeRequest = _reflection.GeneratedProtocolMessageType('RecognizeRequest', (_message.Message,), dict(
  DESCRIPTOR = _RECOGNIZEREQUEST,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """The top-level message sent by the client for the ``Recognize`` method.
  
  
  Attributes:
      config:
          *Required* Provides information to the recognizer that
          specifies how to process the request.
      audio:
          *Required* The audio data to be recognized.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognizeRequest)
  ))
_sym_db.RegisterMessage(RecognizeRequest)

LongRunningRecognizeRequest = _reflection.GeneratedProtocolMessageType('LongRunningRecognizeRequest', (_message.Message,), dict(
  DESCRIPTOR = _LONGRUNNINGRECOGNIZEREQUEST,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """The top-level message sent by the client for the
  ``LongRunningRecognize`` method.
  
  
  Attributes:
      config:
          *Required* Provides information to the recognizer that
          specifies how to process the request.
      audio:
          *Required* The audio data to be recognized.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.LongRunningRecognizeRequest)
  ))
_sym_db.RegisterMessage(LongRunningRecognizeRequest)

StreamingRecognizeRequest = _reflection.GeneratedProtocolMessageType('StreamingRecognizeRequest', (_message.Message,), dict(
  DESCRIPTOR = _STREAMINGRECOGNIZEREQUEST,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """The top-level message sent by the client for the ``StreamingRecognize``
  method. Multiple ``StreamingRecognizeRequest`` messages are sent. The
  first message must contain a ``streaming_config`` message and must not
  contain ``audio`` data. All subsequent messages must contain ``audio``
  data and must not contain a ``streaming_config`` message.
  
  
  Attributes:
      streaming_request:
          The streaming request, which is either a streaming config or
          audio content.
      streaming_config:
          Provides information to the recognizer that specifies how to
          process the request. The first ``StreamingRecognizeRequest``
          message must contain a ``streaming_config`` message.
      audio_content:
          The audio data to be recognized. Sequential chunks of audio
          data are sent in sequential ``StreamingRecognizeRequest``
          messages. The first ``StreamingRecognizeRequest`` message must
          not contain ``audio_content`` data and all subsequent
          ``StreamingRecognizeRequest`` messages must contain
          ``audio_content`` data. The audio bytes must be encoded as
          specified in ``RecognitionConfig``. Note: as with all bytes
          fields, protobuffers use a pure binary representation (not
          base64). See `audio limits
          <https://cloud.google.com/speech/limits#content>`__.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognizeRequest)
  ))
_sym_db.RegisterMessage(StreamingRecognizeRequest)

StreamingRecognitionConfig = _reflection.GeneratedProtocolMessageType('StreamingRecognitionConfig', (_message.Message,), dict(
  DESCRIPTOR = _STREAMINGRECOGNITIONCONFIG,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """Provides information to the recognizer that specifies how to process the
  request.
  
  
  Attributes:
      config:
          *Required* Provides information to the recognizer that
          specifies how to process the request.
      single_utterance:
          *Optional* If ``false`` or omitted, the recognizer will
          perform continuous recognition (continuing to wait for and
          process audio even if the user pauses speaking) until the
          client closes the input stream (gRPC API) or until the maximum
          time limit has been reached. May return multiple
          ``StreamingRecognitionResult``\ s with the ``is_final`` flag
          set to ``true``.  If ``true``, the recognizer will detect a
          single spoken utterance. When it detects that the user has
          paused or stopped speaking, it will return an
          ``END_OF_SINGLE_UTTERANCE`` event and cease recognition. It
          will return no more than one ``StreamingRecognitionResult``
          with the ``is_final`` flag set to ``true``.
      interim_results:
          *Optional* If ``true``, interim results (tentative hypotheses)
          may be returned as they become available (these interim
          results are indicated with the ``is_final=false`` flag). If
          ``false`` or omitted, only ``is_final=true`` result(s) are
          returned.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognitionConfig)
  ))
_sym_db.RegisterMessage(StreamingRecognitionConfig)

RecognitionConfig = _reflection.GeneratedProtocolMessageType('RecognitionConfig', (_message.Message,), dict(
  DESCRIPTOR = _RECOGNITIONCONFIG,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """Provides information to the recognizer that specifies how to process the
  request.
  
  
  Attributes:
      encoding:
          *Required* Encoding of audio data sent in all
          ``RecognitionAudio`` messages.
      sample_rate_hertz:
          *Required* Sample rate in Hertz of the audio data sent in all
          ``RecognitionAudio`` messages. Valid values are: 8000-48000.
          16000 is optimal. For best results, set the sampling rate of
          the audio source to 16000 Hz. If that's not possible, use the
          native sample rate of the audio source (instead of re-
          sampling).
      language_code:
          *Required* The language of the supplied audio as a `BCP-47
          <https://www.rfc-editor.org/rfc/bcp/bcp47.txt>`__ language
          tag. Example: "en-US". See `Language Support
          <https://cloud.google.com/speech/docs/languages>`__ for a list
          of the currently supported language codes.
      max_alternatives:
          *Optional* Maximum number of recognition hypotheses to be
          returned. Specifically, the maximum number of
          ``SpeechRecognitionAlternative`` messages within each
          ``SpeechRecognitionResult``. The server may return fewer than
          ``max_alternatives``. Valid values are ``0``-``30``. A value
          of ``0`` or ``1`` will return a maximum of one. If omitted,
          will return a maximum of one.
      profanity_filter:
          *Optional* If set to ``true``, the server will attempt to
          filter out profanities, replacing all but the initial
          character in each filtered word with asterisks, e.g.
          "f\*\*\*". If set to ``false`` or omitted, profanities won't
          be filtered out.
      speech_contexts:
          *Optional* A means to provide context to assist the speech
          recognition.
      enable_word_time_offsets:
          *Optional* If ``true``, the top result includes a list of
          words and the start and end time offsets (timestamps) for
          those words. If ``false``, no word-level time offset
          information is returned. The default is ``false``.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognitionConfig)
  ))
_sym_db.RegisterMessage(RecognitionConfig)

SpeechContext = _reflection.GeneratedProtocolMessageType('SpeechContext', (_message.Message,), dict(
  DESCRIPTOR = _SPEECHCONTEXT,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """Provides "hints" to the speech recognizer to favor specific words and
  phrases in the results.
  
  
  Attributes:
      phrases:
          *Optional* A list of strings containing words and phrases
          "hints" so that the speech recognition is more likely to
          recognize them. This can be used to improve the accuracy for
          specific words and phrases, for example, if specific commands
          are typically spoken by the user. This can also be used to add
          additional words to the vocabulary of the recognizer. See
          `usage limits
          <https://cloud.google.com/speech/limits#content>`__.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechContext)
  ))
_sym_db.RegisterMessage(SpeechContext)

RecognitionAudio = _reflection.GeneratedProtocolMessageType('RecognitionAudio', (_message.Message,), dict(
  DESCRIPTOR = _RECOGNITIONAUDIO,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """Contains audio data in the encoding specified in the
  ``RecognitionConfig``. Either ``content`` or ``uri`` must be supplied.
  Supplying both or neither returns
  [google.rpc.Code.INVALID\_ARGUMENT][google.rpc.Code.INVALID\_ARGUMENT].
  See `audio limits <https://cloud.google.com/speech/limits#content>`__.
  
  
  Attributes:
      audio_source:
          The audio source, which is either inline content or a Google
          Cloud Storage uri.
      content:
          The audio data bytes encoded as specified in
          ``RecognitionConfig``. Note: as with all bytes fields,
          protobuffers use a pure binary representation, whereas JSON
          representations use base64.
      uri:
          URI that points to a file that contains audio data bytes as
          specified in ``RecognitionConfig``. Currently, only Google
          Cloud Storage URIs are supported, which must be specified in
          the following format: ``gs://bucket_name/object_name`` (other
          URI formats return [google.rpc.Code.INVALID\_ARGUMENT][google.
          rpc.Code.INVALID\_ARGUMENT]). For more information, see
          `Request URIs
          <https://cloud.google.com/storage/docs/reference-uris>`__.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognitionAudio)
  ))
_sym_db.RegisterMessage(RecognitionAudio)

RecognizeResponse = _reflection.GeneratedProtocolMessageType('RecognizeResponse', (_message.Message,), dict(
  DESCRIPTOR = _RECOGNIZERESPONSE,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """The only message returned to the client by the ``Recognize`` method. It
  contains the result as zero or more sequential
  ``SpeechRecognitionResult`` messages.
  
  
  Attributes:
      results:
          *Output-only* Sequential list of transcription results
          corresponding to sequential portions of audio.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognizeResponse)
  ))
_sym_db.RegisterMessage(RecognizeResponse)

LongRunningRecognizeResponse = _reflection.GeneratedProtocolMessageType('LongRunningRecognizeResponse', (_message.Message,), dict(
  DESCRIPTOR = _LONGRUNNINGRECOGNIZERESPONSE,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """The only message returned to the client by the ``LongRunningRecognize``
  method. It contains the result as zero or more sequential
  ``SpeechRecognitionResult`` messages. It is included in the
  ``result.response`` field of the ``Operation`` returned by the
  ``GetOperation`` call of the ``google::longrunning::Operations``
  service.
  
  
  Attributes:
      results:
          *Output-only* Sequential list of transcription results
          corresponding to sequential portions of audio.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.LongRunningRecognizeResponse)
  ))
_sym_db.RegisterMessage(LongRunningRecognizeResponse)

LongRunningRecognizeMetadata = _reflection.GeneratedProtocolMessageType('LongRunningRecognizeMetadata', (_message.Message,), dict(
  DESCRIPTOR = _LONGRUNNINGRECOGNIZEMETADATA,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """Describes the progress of a long-running ``LongRunningRecognize`` call.
  It is included in the ``metadata`` field of the ``Operation`` returned
  by the ``GetOperation`` call of the ``google::longrunning::Operations``
  service.
  
  
  Attributes:
      progress_percent:
          Approximate percentage of audio processed thus far. Guaranteed
          to be 100 when the audio is fully processed and the results
          are available.
      start_time:
          Time when the request was received.
      last_update_time:
          Time of the most recent processing update.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  ))
_sym_db.RegisterMessage(LongRunningRecognizeMetadata)

StreamingRecognizeResponse = _reflection.GeneratedProtocolMessageType('StreamingRecognizeResponse', (_message.Message,), dict(
  DESCRIPTOR = _STREAMINGRECOGNIZERESPONSE,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """``StreamingRecognizeResponse`` is the only message returned to the
  client by ``StreamingRecognize``. A series of one or more
  ``StreamingRecognizeResponse`` messages are streamed back to the client.
  
  Here's an example of a series of ten ``StreamingRecognizeResponse``\ s
  that might be returned while processing audio:
  
  1. results { alternatives { transcript: "tube" } stability: 0.01 }
  
  2. results { alternatives { transcript: "to be a" } stability: 0.01 }
  
  3. results { alternatives { transcript: "to be" } stability: 0.9 }
     results { alternatives { transcript: " or not to be" } stability:
     0.01 }
  
  4. results { alternatives { transcript: "to be or not to be" confidence:
     0.92 } alternatives { transcript: "to bee or not to bee" } is\_final:
     true }
  
  5. results { alternatives { transcript: " that's" } stability: 0.01 }
  
  6. results { alternatives { transcript: " that is" } stability: 0.9 }
     results { alternatives { transcript: " the question" } stability:
     0.01 }
  
  7. results { alternatives { transcript: " that is the question"
     confidence: 0.98 } alternatives { transcript: " that was the
     question" } is\_final: true }
  
  Notes:
  
  -  Only two of the above responses #4 and #7 contain final results; they
     are indicated by ``is_final: true``. Concatenating these together
     generates the full transcript: "to be or not to be that is the
     question".
  
  -  The others contain interim ``results``. #3 and #6 contain two interim
     ``results``: the first portion has a high stability and is less
     likely to change; the second portion has a low stability and is very
     likely to change. A UI designer might choose to show only high
     stability ``results``.
  
  -  The specific ``stability`` and ``confidence`` values shown above are
     only for illustrative purposes. Actual values may vary.
  
  -  In each response, only one of these fields will be set: ``error``,
     ``speech_event_type``, or one or more (repeated) ``results``.
  
  
  Attributes:
      error:
          *Output-only* If set, returns a
          [google.rpc.Status][google.rpc.Status] message that specifies
          the error for the operation.
      results:
          *Output-only* This repeated list contains zero or more results
          that correspond to consecutive portions of the audio currently
          being processed. It contains zero or one ``is_final=true``
          result (the newly settled portion), followed by zero or more
          ``is_final=false`` results.
      speech_event_type:
          *Output-only* Indicates the type of speech event.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognizeResponse)
  ))
_sym_db.RegisterMessage(StreamingRecognizeResponse)

StreamingRecognitionResult = _reflection.GeneratedProtocolMessageType('StreamingRecognitionResult', (_message.Message,), dict(
  DESCRIPTOR = _STREAMINGRECOGNITIONRESULT,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """A streaming speech recognition result corresponding to a portion of the
  audio that is currently being processed.
  
  
  Attributes:
      alternatives:
          *Output-only* May contain one or more recognition hypotheses
          (up to the maximum specified in ``max_alternatives``).
      is_final:
          *Output-only* If ``false``, this
          ``StreamingRecognitionResult`` represents an interim result
          that may change. If ``true``, this is the final time the
          speech service will return this particular
          ``StreamingRecognitionResult``, the recognizer will not return
          any further hypotheses for this portion of the transcript and
          corresponding audio.
      stability:
          *Output-only* An estimate of the likelihood that the
          recognizer will not change its guess about this interim
          result. Values range from 0.0 (completely unstable) to 1.0
          (completely stable). This field is only provided for interim
          results (``is_final=false``). The default of 0.0 is a sentinel
          value indicating ``stability`` was not set.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognitionResult)
  ))
_sym_db.RegisterMessage(StreamingRecognitionResult)

SpeechRecognitionResult = _reflection.GeneratedProtocolMessageType('SpeechRecognitionResult', (_message.Message,), dict(
  DESCRIPTOR = _SPEECHRECOGNITIONRESULT,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """A speech recognition result corresponding to a portion of the audio.
  
  
  Attributes:
      alternatives:
          *Output-only* May contain one or more recognition hypotheses
          (up to the maximum specified in ``max_alternatives``). These
          alternatives are ordered in terms of accuracy, with the top
          (first) alternative being the most probable, as ranked by the
          recognizer.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechRecognitionResult)
  ))
_sym_db.RegisterMessage(SpeechRecognitionResult)

SpeechRecognitionAlternative = _reflection.GeneratedProtocolMessageType('SpeechRecognitionAlternative', (_message.Message,), dict(
  DESCRIPTOR = _SPEECHRECOGNITIONALTERNATIVE,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """Alternative hypotheses (a.k.a. n-best list).
  
  
  Attributes:
      transcript:
          *Output-only* Transcript text representing the words that the
          user spoke.
      confidence:
          *Output-only* The confidence estimate between 0.0 and 1.0. A
          higher number indicates an estimated greater likelihood that
          the recognized words are correct. This field is typically
          provided only for the top hypothesis, and only for
          ``is_final=true`` results. Clients should not rely on the
          ``confidence`` field as it is not guaranteed to be accurate or
          consistent. The default of 0.0 is a sentinel value indicating
          ``confidence`` was not set.
      words:
          *Output-only* A list of word-specific information for each
          recognized word.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechRecognitionAlternative)
  ))
_sym_db.RegisterMessage(SpeechRecognitionAlternative)

WordInfo = _reflection.GeneratedProtocolMessageType('WordInfo', (_message.Message,), dict(
  DESCRIPTOR = _WORDINFO,
  __module__ = 'google.cloud.proto.speech.v1.cloud_speech_pb2'
  ,
  __doc__ = """Word-specific information for recognized words. Word information is only
  included in the response when certain request parameters are set, such
  as ``enable_word_time_offsets``.
  
  
  Attributes:
      start_time:
          *Output-only* Time offset relative to the beginning of the
          audio, and corresponding to the start of the spoken word. This
          field is only set if ``enable_word_time_offsets=true`` and
          only in the top hypothesis. This is an experimental feature
          and the accuracy of the time offset can vary.
      end_time:
          *Output-only* Time offset relative to the beginning of the
          audio, and corresponding to the end of the spoken word. This
          field is only set if ``enable_word_time_offsets=true`` and
          only in the top hypothesis. This is an experimental feature
          and the accuracy of the time offset can vary.
      word:
          *Output-only* The word corresponding to this set of
          information.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.speech.v1.WordInfo)
  ))
_sym_db.RegisterMessage(WordInfo)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\032com.google.cloud.speech.v1B\013SpeechProtoP\001Z<google.golang.org/genproto/googleapis/cloud/speech/v1;speech\370\001\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class SpeechStub(object):
    """Service that implements Google Cloud Speech API.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Recognize = channel.unary_unary(
          '/google.cloud.speech.v1.Speech/Recognize',
          request_serializer=RecognizeRequest.SerializeToString,
          response_deserializer=RecognizeResponse.FromString,
          )
      self.LongRunningRecognize = channel.unary_unary(
          '/google.cloud.speech.v1.Speech/LongRunningRecognize',
          request_serializer=LongRunningRecognizeRequest.SerializeToString,
          response_deserializer=google_dot_longrunning_dot_operations__pb2.Operation.FromString,
          )
      self.StreamingRecognize = channel.stream_stream(
          '/google.cloud.speech.v1.Speech/StreamingRecognize',
          request_serializer=StreamingRecognizeRequest.SerializeToString,
          response_deserializer=StreamingRecognizeResponse.FromString,
          )


  class SpeechServicer(object):
    """Service that implements Google Cloud Speech API.
    """

    def Recognize(self, request, context):
      """Performs synchronous speech recognition: receive results after all audio
      has been sent and processed.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def LongRunningRecognize(self, request, context):
      """Performs asynchronous speech recognition: receive results via the
      google.longrunning.Operations interface. Returns either an
      `Operation.error` or an `Operation.response` which contains
      a `LongRunningRecognizeResponse` message.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def StreamingRecognize(self, request_iterator, context):
      """Performs bidirectional streaming speech recognition: receive results while
      sending audio. This method is only available via the gRPC API (not REST).
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_SpeechServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Recognize': grpc.unary_unary_rpc_method_handler(
            servicer.Recognize,
            request_deserializer=RecognizeRequest.FromString,
            response_serializer=RecognizeResponse.SerializeToString,
        ),
        'LongRunningRecognize': grpc.unary_unary_rpc_method_handler(
            servicer.LongRunningRecognize,
            request_deserializer=LongRunningRecognizeRequest.FromString,
            response_serializer=google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
        ),
        'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
            servicer.StreamingRecognize,
            request_deserializer=StreamingRecognizeRequest.FromString,
            response_serializer=StreamingRecognizeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'google.cloud.speech.v1.Speech', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaSpeechServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Service that implements Google Cloud Speech API.
    """
    def Recognize(self, request, context):
      """Performs synchronous speech recognition: receive results after all audio
      has been sent and processed.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def LongRunningRecognize(self, request, context):
      """Performs asynchronous speech recognition: receive results via the
      google.longrunning.Operations interface. Returns either an
      `Operation.error` or an `Operation.response` which contains
      a `LongRunningRecognizeResponse` message.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def StreamingRecognize(self, request_iterator, context):
      """Performs bidirectional streaming speech recognition: receive results while
      sending audio. This method is only available via the gRPC API (not REST).
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaSpeechStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Service that implements Google Cloud Speech API.
    """
    def Recognize(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Performs synchronous speech recognition: receive results after all audio
      has been sent and processed.
      """
      raise NotImplementedError()
    Recognize.future = None
    def LongRunningRecognize(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Performs asynchronous speech recognition: receive results via the
      google.longrunning.Operations interface. Returns either an
      `Operation.error` or an `Operation.response` which contains
      a `LongRunningRecognizeResponse` message.
      """
      raise NotImplementedError()
    LongRunningRecognize.future = None
    def StreamingRecognize(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Performs bidirectional streaming speech recognition: receive results while
      sending audio. This method is only available via the gRPC API (not REST).
      """
      raise NotImplementedError()


  def beta_create_Speech_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('google.cloud.speech.v1.Speech', 'LongRunningRecognize'): LongRunningRecognizeRequest.FromString,
      ('google.cloud.speech.v1.Speech', 'Recognize'): RecognizeRequest.FromString,
      ('google.cloud.speech.v1.Speech', 'StreamingRecognize'): StreamingRecognizeRequest.FromString,
    }
    response_serializers = {
      ('google.cloud.speech.v1.Speech', 'LongRunningRecognize'): google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
      ('google.cloud.speech.v1.Speech', 'Recognize'): RecognizeResponse.SerializeToString,
      ('google.cloud.speech.v1.Speech', 'StreamingRecognize'): StreamingRecognizeResponse.SerializeToString,
    }
    method_implementations = {
      ('google.cloud.speech.v1.Speech', 'LongRunningRecognize'): face_utilities.unary_unary_inline(servicer.LongRunningRecognize),
      ('google.cloud.speech.v1.Speech', 'Recognize'): face_utilities.unary_unary_inline(servicer.Recognize),
      ('google.cloud.speech.v1.Speech', 'StreamingRecognize'): face_utilities.stream_stream_inline(servicer.StreamingRecognize),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Speech_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('google.cloud.speech.v1.Speech', 'LongRunningRecognize'): LongRunningRecognizeRequest.SerializeToString,
      ('google.cloud.speech.v1.Speech', 'Recognize'): RecognizeRequest.SerializeToString,
      ('google.cloud.speech.v1.Speech', 'StreamingRecognize'): StreamingRecognizeRequest.SerializeToString,
    }
    response_deserializers = {
      ('google.cloud.speech.v1.Speech', 'LongRunningRecognize'): google_dot_longrunning_dot_operations__pb2.Operation.FromString,
      ('google.cloud.speech.v1.Speech', 'Recognize'): RecognizeResponse.FromString,
      ('google.cloud.speech.v1.Speech', 'StreamingRecognize'): StreamingRecognizeResponse.FromString,
    }
    cardinalities = {
      'LongRunningRecognize': cardinality.Cardinality.UNARY_UNARY,
      'Recognize': cardinality.Cardinality.UNARY_UNARY,
      'StreamingRecognize': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'google.cloud.speech.v1.Speech', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
