<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2beta1/dlp.proto

namespace Google\Privacy\Dlp\V2beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request for scheduling a scan of a data subset from a Google Platform data
 * repository.
 *
 * Generated from protobuf message <code>google.privacy.dlp.v2beta1.CreateInspectOperationRequest</code>
 */
class CreateInspectOperationRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Configuration for the inspector.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    private $inspect_config = null;
    /**
     * Specification of the data set to process.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    private $storage_config = null;
    /**
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * <p>Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. <p>The CSV file(s) contain the
     * following columns regardless of storage type scanned: <li>id <li>info_type
     * <li>likelihood <li>byte size of finding <li>quote <li>time_stamp<br/>
     * <p>For Cloud Storage the next columns are: <li>file_path
     * <li>start_offset<br/>
     * <p>For Cloud Datastore the next columns are: <li>project_id
     * <li>namespace_id <li>path <li>column_name <li>offset
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    private $output_config = null;

    public function __construct() {
        \GPBMetadata\Google\Privacy\Dlp\V2Beta1\Dlp::initOnce();
        parent::__construct();
    }

    /**
     * Configuration for the inspector.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     * @return \Google\Privacy\Dlp\V2beta1\InspectConfig
     */
    public function getInspectConfig()
    {
        return $this->inspect_config;
    }

    /**
     * Configuration for the inspector.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     * @param \Google\Privacy\Dlp\V2beta1\InspectConfig $var
     */
    public function setInspectConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Privacy\Dlp\V2beta1\InspectConfig::class);
        $this->inspect_config = $var;
    }

    /**
     * Specification of the data set to process.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     * @return \Google\Privacy\Dlp\V2beta1\StorageConfig
     */
    public function getStorageConfig()
    {
        return $this->storage_config;
    }

    /**
     * Specification of the data set to process.
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     * @param \Google\Privacy\Dlp\V2beta1\StorageConfig $var
     */
    public function setStorageConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Privacy\Dlp\V2beta1\StorageConfig::class);
        $this->storage_config = $var;
    }

    /**
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * <p>Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. <p>The CSV file(s) contain the
     * following columns regardless of storage type scanned: <li>id <li>info_type
     * <li>likelihood <li>byte size of finding <li>quote <li>time_stamp<br/>
     * <p>For Cloud Storage the next columns are: <li>file_path
     * <li>start_offset<br/>
     * <p>For Cloud Datastore the next columns are: <li>project_id
     * <li>namespace_id <li>path <li>column_name <li>offset
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     * @return \Google\Privacy\Dlp\V2beta1\OutputStorageConfig
     */
    public function getOutputConfig()
    {
        return $this->output_config;
    }

    /**
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * <p>Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. <p>The CSV file(s) contain the
     * following columns regardless of storage type scanned: <li>id <li>info_type
     * <li>likelihood <li>byte size of finding <li>quote <li>time_stamp<br/>
     * <p>For Cloud Storage the next columns are: <li>file_path
     * <li>start_offset<br/>
     * <p>For Cloud Datastore the next columns are: <li>project_id
     * <li>namespace_id <li>path <li>column_name <li>offset
     *
     * Generated from protobuf field <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     * @param \Google\Privacy\Dlp\V2beta1\OutputStorageConfig $var
     */
    public function setOutputConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Privacy\Dlp\V2beta1\OutputStorageConfig::class);
        $this->output_config = $var;
    }

}

