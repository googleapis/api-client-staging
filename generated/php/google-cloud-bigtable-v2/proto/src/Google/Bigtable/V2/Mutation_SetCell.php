<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/v2/data.proto

namespace Google\Bigtable\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A Mutation which sets the value of the specified cell.
 * </pre>
 *
 * Protobuf type <code>google.bigtable.v2.Mutation.SetCell</code>
 */
class Mutation_SetCell extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The name of the family into which new data should be written.
     * Must match `[-_.a-zA-Z0-9]+`
     * </pre>
     *
     * <code>string family_name = 1;</code>
     */
    private $family_name = '';
    /**
     * <pre>
     * The qualifier of the column into which new data should be written.
     * Can be any byte string, including the empty string.
     * </pre>
     *
     * <code>bytes column_qualifier = 2;</code>
     */
    private $column_qualifier = '';
    /**
     * <pre>
     * The timestamp of the cell into which new data should be written.
     * Use -1 for current Bigtable server time.
     * Otherwise, the client should set this value itself, noting that the
     * default value is a timestamp of zero if the field is left unspecified.
     * Values must match the granularity of the table (e.g. micros, millis).
     * </pre>
     *
     * <code>int64 timestamp_micros = 3;</code>
     */
    private $timestamp_micros = 0;
    /**
     * <pre>
     * The value to be written into the specified cell.
     * </pre>
     *
     * <code>bytes value = 4;</code>
     */
    private $value = '';

    public function __construct() {
        \GPBMetadata\Google\Bigtable\V2\Data::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The name of the family into which new data should be written.
     * Must match `[-_.a-zA-Z0-9]+`
     * </pre>
     *
     * <code>string family_name = 1;</code>
     */
    public function getFamilyName()
    {
        return $this->family_name;
    }

    /**
     * <pre>
     * The name of the family into which new data should be written.
     * Must match `[-_.a-zA-Z0-9]+`
     * </pre>
     *
     * <code>string family_name = 1;</code>
     */
    public function setFamilyName($var)
    {
        GPBUtil::checkString($var, True);
        $this->family_name = $var;
    }

    /**
     * <pre>
     * The qualifier of the column into which new data should be written.
     * Can be any byte string, including the empty string.
     * </pre>
     *
     * <code>bytes column_qualifier = 2;</code>
     */
    public function getColumnQualifier()
    {
        return $this->column_qualifier;
    }

    /**
     * <pre>
     * The qualifier of the column into which new data should be written.
     * Can be any byte string, including the empty string.
     * </pre>
     *
     * <code>bytes column_qualifier = 2;</code>
     */
    public function setColumnQualifier($var)
    {
        GPBUtil::checkString($var, False);
        $this->column_qualifier = $var;
    }

    /**
     * <pre>
     * The timestamp of the cell into which new data should be written.
     * Use -1 for current Bigtable server time.
     * Otherwise, the client should set this value itself, noting that the
     * default value is a timestamp of zero if the field is left unspecified.
     * Values must match the granularity of the table (e.g. micros, millis).
     * </pre>
     *
     * <code>int64 timestamp_micros = 3;</code>
     */
    public function getTimestampMicros()
    {
        return $this->timestamp_micros;
    }

    /**
     * <pre>
     * The timestamp of the cell into which new data should be written.
     * Use -1 for current Bigtable server time.
     * Otherwise, the client should set this value itself, noting that the
     * default value is a timestamp of zero if the field is left unspecified.
     * Values must match the granularity of the table (e.g. micros, millis).
     * </pre>
     *
     * <code>int64 timestamp_micros = 3;</code>
     */
    public function setTimestampMicros($var)
    {
        GPBUtil::checkInt64($var);
        $this->timestamp_micros = $var;
    }

    /**
     * <pre>
     * The value to be written into the specified cell.
     * </pre>
     *
     * <code>bytes value = 4;</code>
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * <pre>
     * The value to be written into the specified cell.
     * </pre>
     *
     * <code>bytes value = 4;</code>
     */
    public function setValue($var)
    {
        GPBUtil::checkString($var, False);
        $this->value = $var;
    }

}

