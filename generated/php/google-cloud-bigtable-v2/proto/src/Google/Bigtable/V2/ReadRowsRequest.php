<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/v2/bigtable.proto

namespace Google\Bigtable\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Request message for Bigtable.ReadRows.
 * </pre>
 *
 * Protobuf type <code>google.bigtable.v2.ReadRowsRequest</code>
 */
class ReadRowsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The unique name of the table from which to read.
     * Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;`.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    private $table_name = '';
    /**
     * <pre>
     * The row keys and/or ranges to read. If not specified, reads from all rows.
     * </pre>
     *
     * <code>.google.bigtable.v2.RowSet rows = 2;</code>
     */
    private $rows = null;
    /**
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entirety of each row.
     * </pre>
     *
     * <code>.google.bigtable.v2.RowFilter filter = 3;</code>
     */
    private $filter = null;
    /**
     * <pre>
     * The read will terminate after committing to N rows' worth of results. The
     * default (zero) is to return all results.
     * </pre>
     *
     * <code>int64 rows_limit = 4;</code>
     */
    private $rows_limit = 0;

    public function __construct() {
        \GPBMetadata\Google\Bigtable\V2\Bigtable::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The unique name of the table from which to read.
     * Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;`.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    public function getTableName()
    {
        return $this->table_name;
    }

    /**
     * <pre>
     * The unique name of the table from which to read.
     * Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;`.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    public function setTableName($var)
    {
        GPBUtil::checkString($var, True);
        $this->table_name = $var;
    }

    /**
     * <pre>
     * The row keys and/or ranges to read. If not specified, reads from all rows.
     * </pre>
     *
     * <code>.google.bigtable.v2.RowSet rows = 2;</code>
     */
    public function getRows()
    {
        return $this->rows;
    }

    /**
     * <pre>
     * The row keys and/or ranges to read. If not specified, reads from all rows.
     * </pre>
     *
     * <code>.google.bigtable.v2.RowSet rows = 2;</code>
     */
    public function setRows(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Bigtable\V2\RowSet::class);
        $this->rows = $var;
    }

    /**
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entirety of each row.
     * </pre>
     *
     * <code>.google.bigtable.v2.RowFilter filter = 3;</code>
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entirety of each row.
     * </pre>
     *
     * <code>.google.bigtable.v2.RowFilter filter = 3;</code>
     */
    public function setFilter(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Bigtable\V2\RowFilter::class);
        $this->filter = $var;
    }

    /**
     * <pre>
     * The read will terminate after committing to N rows' worth of results. The
     * default (zero) is to return all results.
     * </pre>
     *
     * <code>int64 rows_limit = 4;</code>
     */
    public function getRowsLimit()
    {
        return $this->rows_limit;
    }

    /**
     * <pre>
     * The read will terminate after committing to N rows' worth of results. The
     * default (zero) is to return all results.
     * </pre>
     *
     * <code>int64 rows_limit = 4;</code>
     */
    public function setRowsLimit($var)
    {
        GPBUtil::checkInt64($var);
        $this->rows_limit = $var;
    }

}

