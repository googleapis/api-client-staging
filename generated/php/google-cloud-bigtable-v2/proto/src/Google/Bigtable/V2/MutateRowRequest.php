<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/v2/bigtable.proto

namespace Google\Bigtable\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Request message for Bigtable.MutateRow.
 * </pre>
 *
 * Protobuf type <code>google.bigtable.v2.MutateRowRequest</code>
 */
class MutateRowRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The unique name of the table to which the mutation should be applied.
     * Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;`.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    private $table_name = '';
    /**
     * <pre>
     * The key of the row to which the mutation should be applied.
     * </pre>
     *
     * <code>bytes row_key = 2;</code>
     */
    private $row_key = '';
    /**
     * <pre>
     * Changes to be atomically applied to the specified row. Entries are applied
     * in order, meaning that earlier mutations can be masked by later ones.
     * Must contain at least one entry and at most 100000.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.Mutation mutations = 3;</code>
     */
    private $mutations;

    public function __construct() {
        \GPBMetadata\Google\Bigtable\V2\Bigtable::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The unique name of the table to which the mutation should be applied.
     * Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;`.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    public function getTableName()
    {
        return $this->table_name;
    }

    /**
     * <pre>
     * The unique name of the table to which the mutation should be applied.
     * Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;`.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    public function setTableName($var)
    {
        GPBUtil::checkString($var, True);
        $this->table_name = $var;
    }

    /**
     * <pre>
     * The key of the row to which the mutation should be applied.
     * </pre>
     *
     * <code>bytes row_key = 2;</code>
     */
    public function getRowKey()
    {
        return $this->row_key;
    }

    /**
     * <pre>
     * The key of the row to which the mutation should be applied.
     * </pre>
     *
     * <code>bytes row_key = 2;</code>
     */
    public function setRowKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->row_key = $var;
    }

    /**
     * <pre>
     * Changes to be atomically applied to the specified row. Entries are applied
     * in order, meaning that earlier mutations can be masked by later ones.
     * Must contain at least one entry and at most 100000.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.Mutation mutations = 3;</code>
     */
    public function getMutations()
    {
        return $this->mutations;
    }

    /**
     * <pre>
     * Changes to be atomically applied to the specified row. Entries are applied
     * in order, meaning that earlier mutations can be masked by later ones.
     * Must contain at least one entry and at most 100000.
     * </pre>
     *
     * <code>repeated .google.bigtable.v2.Mutation mutations = 3;</code>
     */
    public function setMutations(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Bigtable\V2\Mutation::class);
        $this->mutations = $arr;
    }

}

