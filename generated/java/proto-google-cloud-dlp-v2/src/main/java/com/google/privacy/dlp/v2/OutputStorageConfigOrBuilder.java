// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2/dlp.proto

package com.google.privacy.dlp.v2;

public interface OutputStorageConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2.OutputStorageConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Store findings in an existing table or a new table in an existing
   * dataset. Each column in an existing table must have the same name, type,
   * and mode of a field in the `Finding` object. If table_id is not set a new
   * one will be generated for you with the following format:
   * dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific timezone will be used for
   * generating the date details.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.BigQueryTable table = 1;</code>
   */
  boolean hasTable();
  /**
   * <pre>
   * Store findings in an existing table or a new table in an existing
   * dataset. Each column in an existing table must have the same name, type,
   * and mode of a field in the `Finding` object. If table_id is not set a new
   * one will be generated for you with the following format:
   * dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific timezone will be used for
   * generating the date details.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.BigQueryTable table = 1;</code>
   */
  com.google.privacy.dlp.v2.BigQueryTable getTable();
  /**
   * <pre>
   * Store findings in an existing table or a new table in an existing
   * dataset. Each column in an existing table must have the same name, type,
   * and mode of a field in the `Finding` object. If table_id is not set a new
   * one will be generated for you with the following format:
   * dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific timezone will be used for
   * generating the date details.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.BigQueryTable table = 1;</code>
   */
  com.google.privacy.dlp.v2.BigQueryTableOrBuilder getTableOrBuilder();

  /**
   * <pre>
   * Schema used for writing the findings. Columns are derived from the
   * `Finding` object. If appending to an existing table, any columns from the
   * predefined schema that are missing will be added. No columns in the
   * existing table will be deleted.
   * If unspecified, then all available columns will be used for a new table,
   * and no changes will be made to an existing table.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;</code>
   */
  int getOutputSchemaValue();
  /**
   * <pre>
   * Schema used for writing the findings. Columns are derived from the
   * `Finding` object. If appending to an existing table, any columns from the
   * predefined schema that are missing will be added. No columns in the
   * existing table will be deleted.
   * If unspecified, then all available columns will be used for a new table,
   * and no changes will be made to an existing table.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;</code>
   */
  com.google.privacy.dlp.v2.OutputStorageConfig.OutputSchema getOutputSchema();

  public com.google.privacy.dlp.v2.OutputStorageConfig.TypeCase getTypeCase();
}
