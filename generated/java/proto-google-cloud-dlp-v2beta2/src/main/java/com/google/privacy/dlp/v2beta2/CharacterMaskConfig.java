// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta2/dlp.proto

package com.google.privacy.dlp.v2beta2;

/**
 * <pre>
 * Partially mask a string by replacing a given number of characters with a
 * fixed character. Masking can start from the beginning or end of the string.
 * This can be used on data of any type (numbers, longs, and so on) and when
 * de-identifying structured data we'll attempt to preserve the original data's
 * type. (This allows you to take a long like 123 and modify it to a string like
 * **3.
 * </pre>
 *
 * Protobuf type {@code google.privacy.dlp.v2beta2.CharacterMaskConfig}
 */
public  final class CharacterMaskConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2beta2.CharacterMaskConfig)
    CharacterMaskConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CharacterMaskConfig.newBuilder() to construct.
  private CharacterMaskConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CharacterMaskConfig() {
    maskingCharacter_ = "";
    numberToMask_ = 0;
    reverseOrder_ = false;
    charactersToIgnore_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CharacterMaskConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            maskingCharacter_ = s;
            break;
          }
          case 16: {

            numberToMask_ = input.readInt32();
            break;
          }
          case 24: {

            reverseOrder_ = input.readBool();
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              charactersToIgnore_ = new java.util.ArrayList<com.google.privacy.dlp.v2beta2.CharsToIgnore>();
              mutable_bitField0_ |= 0x00000008;
            }
            charactersToIgnore_.add(
                input.readMessage(com.google.privacy.dlp.v2beta2.CharsToIgnore.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        charactersToIgnore_ = java.util.Collections.unmodifiableList(charactersToIgnore_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.privacy.dlp.v2beta2.DlpProto.internal_static_google_privacy_dlp_v2beta2_CharacterMaskConfig_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.privacy.dlp.v2beta2.DlpProto.internal_static_google_privacy_dlp_v2beta2_CharacterMaskConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.privacy.dlp.v2beta2.CharacterMaskConfig.class, com.google.privacy.dlp.v2beta2.CharacterMaskConfig.Builder.class);
  }

  private int bitField0_;
  public static final int MASKING_CHARACTER_FIELD_NUMBER = 1;
  private volatile java.lang.Object maskingCharacter_;
  /**
   * <pre>
   * Character to mask the sensitive values&amp;mdash;for example, "*" for an
   * alphabetic string such as name, or "0" for a numeric string such as ZIP
   * code or credit card number. String must have length 1. If not supplied, we
   * will default to "*" for strings, 0 for digits.
   * </pre>
   *
   * <code>string masking_character = 1;</code>
   */
  public java.lang.String getMaskingCharacter() {
    java.lang.Object ref = maskingCharacter_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      maskingCharacter_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Character to mask the sensitive values&amp;mdash;for example, "*" for an
   * alphabetic string such as name, or "0" for a numeric string such as ZIP
   * code or credit card number. String must have length 1. If not supplied, we
   * will default to "*" for strings, 0 for digits.
   * </pre>
   *
   * <code>string masking_character = 1;</code>
   */
  public com.google.protobuf.ByteString
      getMaskingCharacterBytes() {
    java.lang.Object ref = maskingCharacter_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      maskingCharacter_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int NUMBER_TO_MASK_FIELD_NUMBER = 2;
  private int numberToMask_;
  /**
   * <pre>
   * Number of characters to mask. If not set, all matching chars will be
   * masked. Skipped characters do not count towards this tally.
   * </pre>
   *
   * <code>int32 number_to_mask = 2;</code>
   */
  public int getNumberToMask() {
    return numberToMask_;
  }

  public static final int REVERSE_ORDER_FIELD_NUMBER = 3;
  private boolean reverseOrder_;
  /**
   * <pre>
   * Mask characters in reverse order. For example, if `masking_character` is
   * '0', number_to_mask is 14, and `reverse_order` is false, then
   * 1234-5678-9012-3456 -&gt; 00000000000000-3456
   * If `masking_character` is '*', `number_to_mask` is 3, and `reverse_order`
   * is true, then 12345 -&gt; 12***
   * </pre>
   *
   * <code>bool reverse_order = 3;</code>
   */
  public boolean getReverseOrder() {
    return reverseOrder_;
  }

  public static final int CHARACTERS_TO_IGNORE_FIELD_NUMBER = 4;
  private java.util.List<com.google.privacy.dlp.v2beta2.CharsToIgnore> charactersToIgnore_;
  /**
   * <pre>
   * When masking a string, items in this list will be skipped when replacing.
   * For example, if your string is 555-555-5555 and you ask us to skip `-` and
   * mask 5 chars with * we would produce ***-*55-5555.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
   */
  public java.util.List<com.google.privacy.dlp.v2beta2.CharsToIgnore> getCharactersToIgnoreList() {
    return charactersToIgnore_;
  }
  /**
   * <pre>
   * When masking a string, items in this list will be skipped when replacing.
   * For example, if your string is 555-555-5555 and you ask us to skip `-` and
   * mask 5 chars with * we would produce ***-*55-5555.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
   */
  public java.util.List<? extends com.google.privacy.dlp.v2beta2.CharsToIgnoreOrBuilder> 
      getCharactersToIgnoreOrBuilderList() {
    return charactersToIgnore_;
  }
  /**
   * <pre>
   * When masking a string, items in this list will be skipped when replacing.
   * For example, if your string is 555-555-5555 and you ask us to skip `-` and
   * mask 5 chars with * we would produce ***-*55-5555.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
   */
  public int getCharactersToIgnoreCount() {
    return charactersToIgnore_.size();
  }
  /**
   * <pre>
   * When masking a string, items in this list will be skipped when replacing.
   * For example, if your string is 555-555-5555 and you ask us to skip `-` and
   * mask 5 chars with * we would produce ***-*55-5555.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
   */
  public com.google.privacy.dlp.v2beta2.CharsToIgnore getCharactersToIgnore(int index) {
    return charactersToIgnore_.get(index);
  }
  /**
   * <pre>
   * When masking a string, items in this list will be skipped when replacing.
   * For example, if your string is 555-555-5555 and you ask us to skip `-` and
   * mask 5 chars with * we would produce ***-*55-5555.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
   */
  public com.google.privacy.dlp.v2beta2.CharsToIgnoreOrBuilder getCharactersToIgnoreOrBuilder(
      int index) {
    return charactersToIgnore_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getMaskingCharacterBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, maskingCharacter_);
    }
    if (numberToMask_ != 0) {
      output.writeInt32(2, numberToMask_);
    }
    if (reverseOrder_ != false) {
      output.writeBool(3, reverseOrder_);
    }
    for (int i = 0; i < charactersToIgnore_.size(); i++) {
      output.writeMessage(4, charactersToIgnore_.get(i));
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getMaskingCharacterBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, maskingCharacter_);
    }
    if (numberToMask_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, numberToMask_);
    }
    if (reverseOrder_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, reverseOrder_);
    }
    for (int i = 0; i < charactersToIgnore_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, charactersToIgnore_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.privacy.dlp.v2beta2.CharacterMaskConfig)) {
      return super.equals(obj);
    }
    com.google.privacy.dlp.v2beta2.CharacterMaskConfig other = (com.google.privacy.dlp.v2beta2.CharacterMaskConfig) obj;

    boolean result = true;
    result = result && getMaskingCharacter()
        .equals(other.getMaskingCharacter());
    result = result && (getNumberToMask()
        == other.getNumberToMask());
    result = result && (getReverseOrder()
        == other.getReverseOrder());
    result = result && getCharactersToIgnoreList()
        .equals(other.getCharactersToIgnoreList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MASKING_CHARACTER_FIELD_NUMBER;
    hash = (53 * hash) + getMaskingCharacter().hashCode();
    hash = (37 * hash) + NUMBER_TO_MASK_FIELD_NUMBER;
    hash = (53 * hash) + getNumberToMask();
    hash = (37 * hash) + REVERSE_ORDER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getReverseOrder());
    if (getCharactersToIgnoreCount() > 0) {
      hash = (37 * hash) + CHARACTERS_TO_IGNORE_FIELD_NUMBER;
      hash = (53 * hash) + getCharactersToIgnoreList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.privacy.dlp.v2beta2.CharacterMaskConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Partially mask a string by replacing a given number of characters with a
   * fixed character. Masking can start from the beginning or end of the string.
   * This can be used on data of any type (numbers, longs, and so on) and when
   * de-identifying structured data we'll attempt to preserve the original data's
   * type. (This allows you to take a long like 123 and modify it to a string like
   * **3.
   * </pre>
   *
   * Protobuf type {@code google.privacy.dlp.v2beta2.CharacterMaskConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2beta2.CharacterMaskConfig)
      com.google.privacy.dlp.v2beta2.CharacterMaskConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.privacy.dlp.v2beta2.DlpProto.internal_static_google_privacy_dlp_v2beta2_CharacterMaskConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.privacy.dlp.v2beta2.DlpProto.internal_static_google_privacy_dlp_v2beta2_CharacterMaskConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.privacy.dlp.v2beta2.CharacterMaskConfig.class, com.google.privacy.dlp.v2beta2.CharacterMaskConfig.Builder.class);
    }

    // Construct using com.google.privacy.dlp.v2beta2.CharacterMaskConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getCharactersToIgnoreFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      maskingCharacter_ = "";

      numberToMask_ = 0;

      reverseOrder_ = false;

      if (charactersToIgnoreBuilder_ == null) {
        charactersToIgnore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        charactersToIgnoreBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.privacy.dlp.v2beta2.DlpProto.internal_static_google_privacy_dlp_v2beta2_CharacterMaskConfig_descriptor;
    }

    public com.google.privacy.dlp.v2beta2.CharacterMaskConfig getDefaultInstanceForType() {
      return com.google.privacy.dlp.v2beta2.CharacterMaskConfig.getDefaultInstance();
    }

    public com.google.privacy.dlp.v2beta2.CharacterMaskConfig build() {
      com.google.privacy.dlp.v2beta2.CharacterMaskConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.privacy.dlp.v2beta2.CharacterMaskConfig buildPartial() {
      com.google.privacy.dlp.v2beta2.CharacterMaskConfig result = new com.google.privacy.dlp.v2beta2.CharacterMaskConfig(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.maskingCharacter_ = maskingCharacter_;
      result.numberToMask_ = numberToMask_;
      result.reverseOrder_ = reverseOrder_;
      if (charactersToIgnoreBuilder_ == null) {
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          charactersToIgnore_ = java.util.Collections.unmodifiableList(charactersToIgnore_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.charactersToIgnore_ = charactersToIgnore_;
      } else {
        result.charactersToIgnore_ = charactersToIgnoreBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.privacy.dlp.v2beta2.CharacterMaskConfig) {
        return mergeFrom((com.google.privacy.dlp.v2beta2.CharacterMaskConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.privacy.dlp.v2beta2.CharacterMaskConfig other) {
      if (other == com.google.privacy.dlp.v2beta2.CharacterMaskConfig.getDefaultInstance()) return this;
      if (!other.getMaskingCharacter().isEmpty()) {
        maskingCharacter_ = other.maskingCharacter_;
        onChanged();
      }
      if (other.getNumberToMask() != 0) {
        setNumberToMask(other.getNumberToMask());
      }
      if (other.getReverseOrder() != false) {
        setReverseOrder(other.getReverseOrder());
      }
      if (charactersToIgnoreBuilder_ == null) {
        if (!other.charactersToIgnore_.isEmpty()) {
          if (charactersToIgnore_.isEmpty()) {
            charactersToIgnore_ = other.charactersToIgnore_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCharactersToIgnoreIsMutable();
            charactersToIgnore_.addAll(other.charactersToIgnore_);
          }
          onChanged();
        }
      } else {
        if (!other.charactersToIgnore_.isEmpty()) {
          if (charactersToIgnoreBuilder_.isEmpty()) {
            charactersToIgnoreBuilder_.dispose();
            charactersToIgnoreBuilder_ = null;
            charactersToIgnore_ = other.charactersToIgnore_;
            bitField0_ = (bitField0_ & ~0x00000008);
            charactersToIgnoreBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getCharactersToIgnoreFieldBuilder() : null;
          } else {
            charactersToIgnoreBuilder_.addAllMessages(other.charactersToIgnore_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.privacy.dlp.v2beta2.CharacterMaskConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.privacy.dlp.v2beta2.CharacterMaskConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object maskingCharacter_ = "";
    /**
     * <pre>
     * Character to mask the sensitive values&amp;mdash;for example, "*" for an
     * alphabetic string such as name, or "0" for a numeric string such as ZIP
     * code or credit card number. String must have length 1. If not supplied, we
     * will default to "*" for strings, 0 for digits.
     * </pre>
     *
     * <code>string masking_character = 1;</code>
     */
    public java.lang.String getMaskingCharacter() {
      java.lang.Object ref = maskingCharacter_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        maskingCharacter_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Character to mask the sensitive values&amp;mdash;for example, "*" for an
     * alphabetic string such as name, or "0" for a numeric string such as ZIP
     * code or credit card number. String must have length 1. If not supplied, we
     * will default to "*" for strings, 0 for digits.
     * </pre>
     *
     * <code>string masking_character = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMaskingCharacterBytes() {
      java.lang.Object ref = maskingCharacter_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        maskingCharacter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Character to mask the sensitive values&amp;mdash;for example, "*" for an
     * alphabetic string such as name, or "0" for a numeric string such as ZIP
     * code or credit card number. String must have length 1. If not supplied, we
     * will default to "*" for strings, 0 for digits.
     * </pre>
     *
     * <code>string masking_character = 1;</code>
     */
    public Builder setMaskingCharacter(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      maskingCharacter_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Character to mask the sensitive values&amp;mdash;for example, "*" for an
     * alphabetic string such as name, or "0" for a numeric string such as ZIP
     * code or credit card number. String must have length 1. If not supplied, we
     * will default to "*" for strings, 0 for digits.
     * </pre>
     *
     * <code>string masking_character = 1;</code>
     */
    public Builder clearMaskingCharacter() {
      
      maskingCharacter_ = getDefaultInstance().getMaskingCharacter();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Character to mask the sensitive values&amp;mdash;for example, "*" for an
     * alphabetic string such as name, or "0" for a numeric string such as ZIP
     * code or credit card number. String must have length 1. If not supplied, we
     * will default to "*" for strings, 0 for digits.
     * </pre>
     *
     * <code>string masking_character = 1;</code>
     */
    public Builder setMaskingCharacterBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      maskingCharacter_ = value;
      onChanged();
      return this;
    }

    private int numberToMask_ ;
    /**
     * <pre>
     * Number of characters to mask. If not set, all matching chars will be
     * masked. Skipped characters do not count towards this tally.
     * </pre>
     *
     * <code>int32 number_to_mask = 2;</code>
     */
    public int getNumberToMask() {
      return numberToMask_;
    }
    /**
     * <pre>
     * Number of characters to mask. If not set, all matching chars will be
     * masked. Skipped characters do not count towards this tally.
     * </pre>
     *
     * <code>int32 number_to_mask = 2;</code>
     */
    public Builder setNumberToMask(int value) {
      
      numberToMask_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of characters to mask. If not set, all matching chars will be
     * masked. Skipped characters do not count towards this tally.
     * </pre>
     *
     * <code>int32 number_to_mask = 2;</code>
     */
    public Builder clearNumberToMask() {
      
      numberToMask_ = 0;
      onChanged();
      return this;
    }

    private boolean reverseOrder_ ;
    /**
     * <pre>
     * Mask characters in reverse order. For example, if `masking_character` is
     * '0', number_to_mask is 14, and `reverse_order` is false, then
     * 1234-5678-9012-3456 -&gt; 00000000000000-3456
     * If `masking_character` is '*', `number_to_mask` is 3, and `reverse_order`
     * is true, then 12345 -&gt; 12***
     * </pre>
     *
     * <code>bool reverse_order = 3;</code>
     */
    public boolean getReverseOrder() {
      return reverseOrder_;
    }
    /**
     * <pre>
     * Mask characters in reverse order. For example, if `masking_character` is
     * '0', number_to_mask is 14, and `reverse_order` is false, then
     * 1234-5678-9012-3456 -&gt; 00000000000000-3456
     * If `masking_character` is '*', `number_to_mask` is 3, and `reverse_order`
     * is true, then 12345 -&gt; 12***
     * </pre>
     *
     * <code>bool reverse_order = 3;</code>
     */
    public Builder setReverseOrder(boolean value) {
      
      reverseOrder_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Mask characters in reverse order. For example, if `masking_character` is
     * '0', number_to_mask is 14, and `reverse_order` is false, then
     * 1234-5678-9012-3456 -&gt; 00000000000000-3456
     * If `masking_character` is '*', `number_to_mask` is 3, and `reverse_order`
     * is true, then 12345 -&gt; 12***
     * </pre>
     *
     * <code>bool reverse_order = 3;</code>
     */
    public Builder clearReverseOrder() {
      
      reverseOrder_ = false;
      onChanged();
      return this;
    }

    private java.util.List<com.google.privacy.dlp.v2beta2.CharsToIgnore> charactersToIgnore_ =
      java.util.Collections.emptyList();
    private void ensureCharactersToIgnoreIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        charactersToIgnore_ = new java.util.ArrayList<com.google.privacy.dlp.v2beta2.CharsToIgnore>(charactersToIgnore_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.privacy.dlp.v2beta2.CharsToIgnore, com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder, com.google.privacy.dlp.v2beta2.CharsToIgnoreOrBuilder> charactersToIgnoreBuilder_;

    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public java.util.List<com.google.privacy.dlp.v2beta2.CharsToIgnore> getCharactersToIgnoreList() {
      if (charactersToIgnoreBuilder_ == null) {
        return java.util.Collections.unmodifiableList(charactersToIgnore_);
      } else {
        return charactersToIgnoreBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public int getCharactersToIgnoreCount() {
      if (charactersToIgnoreBuilder_ == null) {
        return charactersToIgnore_.size();
      } else {
        return charactersToIgnoreBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public com.google.privacy.dlp.v2beta2.CharsToIgnore getCharactersToIgnore(int index) {
      if (charactersToIgnoreBuilder_ == null) {
        return charactersToIgnore_.get(index);
      } else {
        return charactersToIgnoreBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public Builder setCharactersToIgnore(
        int index, com.google.privacy.dlp.v2beta2.CharsToIgnore value) {
      if (charactersToIgnoreBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCharactersToIgnoreIsMutable();
        charactersToIgnore_.set(index, value);
        onChanged();
      } else {
        charactersToIgnoreBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public Builder setCharactersToIgnore(
        int index, com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder builderForValue) {
      if (charactersToIgnoreBuilder_ == null) {
        ensureCharactersToIgnoreIsMutable();
        charactersToIgnore_.set(index, builderForValue.build());
        onChanged();
      } else {
        charactersToIgnoreBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public Builder addCharactersToIgnore(com.google.privacy.dlp.v2beta2.CharsToIgnore value) {
      if (charactersToIgnoreBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCharactersToIgnoreIsMutable();
        charactersToIgnore_.add(value);
        onChanged();
      } else {
        charactersToIgnoreBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public Builder addCharactersToIgnore(
        int index, com.google.privacy.dlp.v2beta2.CharsToIgnore value) {
      if (charactersToIgnoreBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCharactersToIgnoreIsMutable();
        charactersToIgnore_.add(index, value);
        onChanged();
      } else {
        charactersToIgnoreBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public Builder addCharactersToIgnore(
        com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder builderForValue) {
      if (charactersToIgnoreBuilder_ == null) {
        ensureCharactersToIgnoreIsMutable();
        charactersToIgnore_.add(builderForValue.build());
        onChanged();
      } else {
        charactersToIgnoreBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public Builder addCharactersToIgnore(
        int index, com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder builderForValue) {
      if (charactersToIgnoreBuilder_ == null) {
        ensureCharactersToIgnoreIsMutable();
        charactersToIgnore_.add(index, builderForValue.build());
        onChanged();
      } else {
        charactersToIgnoreBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public Builder addAllCharactersToIgnore(
        java.lang.Iterable<? extends com.google.privacy.dlp.v2beta2.CharsToIgnore> values) {
      if (charactersToIgnoreBuilder_ == null) {
        ensureCharactersToIgnoreIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, charactersToIgnore_);
        onChanged();
      } else {
        charactersToIgnoreBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public Builder clearCharactersToIgnore() {
      if (charactersToIgnoreBuilder_ == null) {
        charactersToIgnore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        charactersToIgnoreBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public Builder removeCharactersToIgnore(int index) {
      if (charactersToIgnoreBuilder_ == null) {
        ensureCharactersToIgnoreIsMutable();
        charactersToIgnore_.remove(index);
        onChanged();
      } else {
        charactersToIgnoreBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder getCharactersToIgnoreBuilder(
        int index) {
      return getCharactersToIgnoreFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public com.google.privacy.dlp.v2beta2.CharsToIgnoreOrBuilder getCharactersToIgnoreOrBuilder(
        int index) {
      if (charactersToIgnoreBuilder_ == null) {
        return charactersToIgnore_.get(index);  } else {
        return charactersToIgnoreBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public java.util.List<? extends com.google.privacy.dlp.v2beta2.CharsToIgnoreOrBuilder> 
         getCharactersToIgnoreOrBuilderList() {
      if (charactersToIgnoreBuilder_ != null) {
        return charactersToIgnoreBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(charactersToIgnore_);
      }
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder addCharactersToIgnoreBuilder() {
      return getCharactersToIgnoreFieldBuilder().addBuilder(
          com.google.privacy.dlp.v2beta2.CharsToIgnore.getDefaultInstance());
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder addCharactersToIgnoreBuilder(
        int index) {
      return getCharactersToIgnoreFieldBuilder().addBuilder(
          index, com.google.privacy.dlp.v2beta2.CharsToIgnore.getDefaultInstance());
    }
    /**
     * <pre>
     * When masking a string, items in this list will be skipped when replacing.
     * For example, if your string is 555-555-5555 and you ask us to skip `-` and
     * mask 5 chars with * we would produce ***-*55-5555.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta2.CharsToIgnore characters_to_ignore = 4;</code>
     */
    public java.util.List<com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder> 
         getCharactersToIgnoreBuilderList() {
      return getCharactersToIgnoreFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.privacy.dlp.v2beta2.CharsToIgnore, com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder, com.google.privacy.dlp.v2beta2.CharsToIgnoreOrBuilder> 
        getCharactersToIgnoreFieldBuilder() {
      if (charactersToIgnoreBuilder_ == null) {
        charactersToIgnoreBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.privacy.dlp.v2beta2.CharsToIgnore, com.google.privacy.dlp.v2beta2.CharsToIgnore.Builder, com.google.privacy.dlp.v2beta2.CharsToIgnoreOrBuilder>(
                charactersToIgnore_,
                ((bitField0_ & 0x00000008) == 0x00000008),
                getParentForChildren(),
                isClean());
        charactersToIgnore_ = null;
      }
      return charactersToIgnoreBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2beta2.CharacterMaskConfig)
  }

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.CharacterMaskConfig)
  private static final com.google.privacy.dlp.v2beta2.CharacterMaskConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.privacy.dlp.v2beta2.CharacterMaskConfig();
  }

  public static com.google.privacy.dlp.v2beta2.CharacterMaskConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CharacterMaskConfig>
      PARSER = new com.google.protobuf.AbstractParser<CharacterMaskConfig>() {
    public CharacterMaskConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CharacterMaskConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CharacterMaskConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CharacterMaskConfig> getParserForType() {
    return PARSER;
  }

  public com.google.privacy.dlp.v2beta2.CharacterMaskConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

