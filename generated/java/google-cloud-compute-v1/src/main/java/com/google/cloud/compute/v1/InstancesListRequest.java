// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/compute/v1/compute_instances.proto

package com.google.cloud.compute.v1;

/**
 * Protobuf type {@code google.compute.v1.InstancesListRequest}
 */
public  final class InstancesListRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.compute.v1.InstancesListRequest)
    InstancesListRequestOrBuilder {
  // Use InstancesListRequest.newBuilder() to construct.
  private InstancesListRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InstancesListRequest() {
    maxResults_ = 0;
    pageToken_ = "";
    filter_ = "";
    orderBy_ = "";
    project_ = "";
    zone_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private InstancesListRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            project_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            zone_ = s;
            break;
          }
          case 32: {

            maxResults_ = input.readUInt32();
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            pageToken_ = s;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();

            filter_ = s;
            break;
          }
          case 114: {
            java.lang.String s = input.readStringRequireUtf8();

            orderBy_ = s;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_InstancesListRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_InstancesListRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.compute.v1.InstancesListRequest.class, com.google.cloud.compute.v1.InstancesListRequest.Builder.class);
  }

  public static final int MAX_RESULTS_FIELD_NUMBER = 4;
  private int maxResults_;
  /**
   * <pre>
   * The maximum number of results per page that should be returned.
   * If the number of available results is larger than &lt;code&gt;maxResults&lt;/code&gt;,
   * Compute Engine returns a &lt;code&gt;nextPageToken&lt;/code&gt; that can be used to get
   * the next page of results in subsequent list requests. Acceptable values are
   * &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;500&lt;/code&gt;, inclusive. (Default: &lt;code&gt;500&lt;/code&gt;)
   * </pre>
   *
   * <code>optional uint32 max_results = 4;</code>
   */
  public int getMaxResults() {
    return maxResults_;
  }

  public static final int PAGE_TOKEN_FIELD_NUMBER = 5;
  private volatile java.lang.Object pageToken_;
  /**
   * <pre>
   * Specifies a page token to use. Set &lt;code&gt;pageToken&lt;/code&gt; to the
   * &lt;code&gt;nextPageToken&lt;/code&gt; returned by a previous list request to get
   * the next page of results.
   * </pre>
   *
   * <code>optional string page_token = 5;</code>
   */
  public java.lang.String getPageToken() {
    java.lang.Object ref = pageToken_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      pageToken_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies a page token to use. Set &lt;code&gt;pageToken&lt;/code&gt; to the
   * &lt;code&gt;nextPageToken&lt;/code&gt; returned by a previous list request to get
   * the next page of results.
   * </pre>
   *
   * <code>optional string page_token = 5;</code>
   */
  public com.google.protobuf.ByteString
      getPageTokenBytes() {
    java.lang.Object ref = pageToken_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      pageToken_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FILTER_FIELD_NUMBER = 6;
  private volatile java.lang.Object filter_;
  /**
   * <pre>
   * Sets a filter expression for filtering listed resources, in the form
   * &lt;code&gt;filter={expression}&lt;/code&gt;. Your &lt;code&gt;{expression}&lt;/code&gt; must
   * be in the format: &lt;code&gt;field_name comparison_string literal_string&lt;/code&gt;.
   * The &lt;code&gt;field_name&lt;/code&gt; is the name of the field you want to compare.
   * Only atomic field types are supported (string, number, boolean). The
   * &lt;code&gt;comparison_string&lt;/code&gt; must be either &lt;code&gt;eq&lt;/code&gt; (equals) or
   * &lt;code&gt;ne&lt;/code&gt; (not equals). The &lt;code&gt;literal_string&lt;/code&gt; is the string
   * value to filter to. The literal value must be valid for the type of field
   * you are filtering by (string, number, boolean). For string fields, the
   * literal value is interpreted as a regular expression
   * using &lt;a href="https://github.com/google/re2" target="_blank"&gt;RE2&lt;/a&gt;
   * syntax. The literal value must match the entire field.
   * For example, to filter for instances that do not have a name of
   * &lt;code&gt;example-instance&lt;/code&gt;, you would use
   * &lt;code&gt;filter=name ne example-instance&lt;/code&gt;.
   * You can filter on nested fields. For example, you could filter on
   * instances that have set the &lt;code&gt;scheduling.automaticRestart&lt;/code&gt; field
   * to &lt;code&gt;true&lt;/code&gt;. Use filtering on nested fields to take advantage of
   * &lt;a href="/compute/docs/label-or-tag-resources"&gt;labels&lt;/a&gt;
   * to organize and search for results based on label values.
   * To filter on multiple expressions, provide each separate expression within
   * parentheses. For example,
   * &lt;code&gt;(scheduling.automaticRestart eq true) (zone eq us-central1-f)&lt;/code&gt;.
   * Multiple expressions are treated as &lt;code&gt;AND&lt;/code&gt; expressions, meaning
   * that resources must match all expressions to pass the filters.
   * </pre>
   *
   * <code>optional string filter = 6;</code>
   */
  public java.lang.String getFilter() {
    java.lang.Object ref = filter_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      filter_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Sets a filter expression for filtering listed resources, in the form
   * &lt;code&gt;filter={expression}&lt;/code&gt;. Your &lt;code&gt;{expression}&lt;/code&gt; must
   * be in the format: &lt;code&gt;field_name comparison_string literal_string&lt;/code&gt;.
   * The &lt;code&gt;field_name&lt;/code&gt; is the name of the field you want to compare.
   * Only atomic field types are supported (string, number, boolean). The
   * &lt;code&gt;comparison_string&lt;/code&gt; must be either &lt;code&gt;eq&lt;/code&gt; (equals) or
   * &lt;code&gt;ne&lt;/code&gt; (not equals). The &lt;code&gt;literal_string&lt;/code&gt; is the string
   * value to filter to. The literal value must be valid for the type of field
   * you are filtering by (string, number, boolean). For string fields, the
   * literal value is interpreted as a regular expression
   * using &lt;a href="https://github.com/google/re2" target="_blank"&gt;RE2&lt;/a&gt;
   * syntax. The literal value must match the entire field.
   * For example, to filter for instances that do not have a name of
   * &lt;code&gt;example-instance&lt;/code&gt;, you would use
   * &lt;code&gt;filter=name ne example-instance&lt;/code&gt;.
   * You can filter on nested fields. For example, you could filter on
   * instances that have set the &lt;code&gt;scheduling.automaticRestart&lt;/code&gt; field
   * to &lt;code&gt;true&lt;/code&gt;. Use filtering on nested fields to take advantage of
   * &lt;a href="/compute/docs/label-or-tag-resources"&gt;labels&lt;/a&gt;
   * to organize and search for results based on label values.
   * To filter on multiple expressions, provide each separate expression within
   * parentheses. For example,
   * &lt;code&gt;(scheduling.automaticRestart eq true) (zone eq us-central1-f)&lt;/code&gt;.
   * Multiple expressions are treated as &lt;code&gt;AND&lt;/code&gt; expressions, meaning
   * that resources must match all expressions to pass the filters.
   * </pre>
   *
   * <code>optional string filter = 6;</code>
   */
  public com.google.protobuf.ByteString
      getFilterBytes() {
    java.lang.Object ref = filter_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      filter_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ORDER_BY_FIELD_NUMBER = 14;
  private volatile java.lang.Object orderBy_;
  /**
   * <pre>
   * Sorts list results by a certain order. By default, results
   * are returned in alphanumerical order based on the resource name.
   * You can also sort results in descending order based on the creation timestamp
   * using &lt;code&gt;orderBy="creationTimestamp desc"&lt;/code&gt;. This sorts
   * results based on the &lt;code&gt;creationTimestamp&lt;/code&gt; field in
   * reverse chronological order (newest result first). Use this to sort resources
   * like operations so that the newest operation is returned first.
   * Currently, only sorting by &lt;code&gt;name&lt;/code&gt; or
   * &lt;code&gt;creationTimestamp desc&lt;/code&gt; is supported.
   * </pre>
   *
   * <code>optional string order_by = 14;</code>
   */
  public java.lang.String getOrderBy() {
    java.lang.Object ref = orderBy_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      orderBy_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Sorts list results by a certain order. By default, results
   * are returned in alphanumerical order based on the resource name.
   * You can also sort results in descending order based on the creation timestamp
   * using &lt;code&gt;orderBy="creationTimestamp desc"&lt;/code&gt;. This sorts
   * results based on the &lt;code&gt;creationTimestamp&lt;/code&gt; field in
   * reverse chronological order (newest result first). Use this to sort resources
   * like operations so that the newest operation is returned first.
   * Currently, only sorting by &lt;code&gt;name&lt;/code&gt; or
   * &lt;code&gt;creationTimestamp desc&lt;/code&gt; is supported.
   * </pre>
   *
   * <code>optional string order_by = 14;</code>
   */
  public com.google.protobuf.ByteString
      getOrderByBytes() {
    java.lang.Object ref = orderBy_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      orderBy_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PROJECT_FIELD_NUMBER = 2;
  private volatile java.lang.Object project_;
  /**
   * <pre>
   * Project ID for this request.
   * </pre>
   *
   * <code>optional string project = 2;</code>
   */
  public java.lang.String getProject() {
    java.lang.Object ref = project_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      project_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Project ID for this request.
   * </pre>
   *
   * <code>optional string project = 2;</code>
   */
  public com.google.protobuf.ByteString
      getProjectBytes() {
    java.lang.Object ref = project_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      project_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ZONE_FIELD_NUMBER = 3;
  private volatile java.lang.Object zone_;
  /**
   * <pre>
   * The name of the zone for this request.
   * </pre>
   *
   * <code>optional string zone = 3;</code>
   */
  public java.lang.String getZone() {
    java.lang.Object ref = zone_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      zone_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the zone for this request.
   * </pre>
   *
   * <code>optional string zone = 3;</code>
   */
  public com.google.protobuf.ByteString
      getZoneBytes() {
    java.lang.Object ref = zone_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      zone_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getProjectBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, project_);
    }
    if (!getZoneBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, zone_);
    }
    if (maxResults_ != 0) {
      output.writeUInt32(4, maxResults_);
    }
    if (!getPageTokenBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, pageToken_);
    }
    if (!getFilterBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, filter_);
    }
    if (!getOrderByBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 14, orderBy_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getProjectBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, project_);
    }
    if (!getZoneBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, zone_);
    }
    if (maxResults_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(4, maxResults_);
    }
    if (!getPageTokenBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, pageToken_);
    }
    if (!getFilterBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, filter_);
    }
    if (!getOrderByBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, orderBy_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.compute.v1.InstancesListRequest)) {
      return super.equals(obj);
    }
    com.google.cloud.compute.v1.InstancesListRequest other = (com.google.cloud.compute.v1.InstancesListRequest) obj;

    boolean result = true;
    result = result && (getMaxResults()
        == other.getMaxResults());
    result = result && getPageToken()
        .equals(other.getPageToken());
    result = result && getFilter()
        .equals(other.getFilter());
    result = result && getOrderBy()
        .equals(other.getOrderBy());
    result = result && getProject()
        .equals(other.getProject());
    result = result && getZone()
        .equals(other.getZone());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    hash = (37 * hash) + MAX_RESULTS_FIELD_NUMBER;
    hash = (53 * hash) + getMaxResults();
    hash = (37 * hash) + PAGE_TOKEN_FIELD_NUMBER;
    hash = (53 * hash) + getPageToken().hashCode();
    hash = (37 * hash) + FILTER_FIELD_NUMBER;
    hash = (53 * hash) + getFilter().hashCode();
    hash = (37 * hash) + ORDER_BY_FIELD_NUMBER;
    hash = (53 * hash) + getOrderBy().hashCode();
    hash = (37 * hash) + PROJECT_FIELD_NUMBER;
    hash = (53 * hash) + getProject().hashCode();
    hash = (37 * hash) + ZONE_FIELD_NUMBER;
    hash = (53 * hash) + getZone().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.compute.v1.InstancesListRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.compute.v1.InstancesListRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.compute.v1.InstancesListRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.compute.v1.InstancesListRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.compute.v1.InstancesListRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.compute.v1.InstancesListRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.compute.v1.InstancesListRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.compute.v1.InstancesListRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.compute.v1.InstancesListRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.compute.v1.InstancesListRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.compute.v1.InstancesListRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.compute.v1.InstancesListRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.compute.v1.InstancesListRequest)
      com.google.cloud.compute.v1.InstancesListRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_InstancesListRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_InstancesListRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.compute.v1.InstancesListRequest.class, com.google.cloud.compute.v1.InstancesListRequest.Builder.class);
    }

    // Construct using com.google.cloud.compute.v1.InstancesListRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      maxResults_ = 0;

      pageToken_ = "";

      filter_ = "";

      orderBy_ = "";

      project_ = "";

      zone_ = "";

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_InstancesListRequest_descriptor;
    }

    public com.google.cloud.compute.v1.InstancesListRequest getDefaultInstanceForType() {
      return com.google.cloud.compute.v1.InstancesListRequest.getDefaultInstance();
    }

    public com.google.cloud.compute.v1.InstancesListRequest build() {
      com.google.cloud.compute.v1.InstancesListRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.cloud.compute.v1.InstancesListRequest buildPartial() {
      com.google.cloud.compute.v1.InstancesListRequest result = new com.google.cloud.compute.v1.InstancesListRequest(this);
      result.maxResults_ = maxResults_;
      result.pageToken_ = pageToken_;
      result.filter_ = filter_;
      result.orderBy_ = orderBy_;
      result.project_ = project_;
      result.zone_ = zone_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.compute.v1.InstancesListRequest) {
        return mergeFrom((com.google.cloud.compute.v1.InstancesListRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.compute.v1.InstancesListRequest other) {
      if (other == com.google.cloud.compute.v1.InstancesListRequest.getDefaultInstance()) return this;
      if (other.getMaxResults() != 0) {
        setMaxResults(other.getMaxResults());
      }
      if (!other.getPageToken().isEmpty()) {
        pageToken_ = other.pageToken_;
        onChanged();
      }
      if (!other.getFilter().isEmpty()) {
        filter_ = other.filter_;
        onChanged();
      }
      if (!other.getOrderBy().isEmpty()) {
        orderBy_ = other.orderBy_;
        onChanged();
      }
      if (!other.getProject().isEmpty()) {
        project_ = other.project_;
        onChanged();
      }
      if (!other.getZone().isEmpty()) {
        zone_ = other.zone_;
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.compute.v1.InstancesListRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloud.compute.v1.InstancesListRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int maxResults_ ;
    /**
     * <pre>
     * The maximum number of results per page that should be returned.
     * If the number of available results is larger than &lt;code&gt;maxResults&lt;/code&gt;,
     * Compute Engine returns a &lt;code&gt;nextPageToken&lt;/code&gt; that can be used to get
     * the next page of results in subsequent list requests. Acceptable values are
     * &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;500&lt;/code&gt;, inclusive. (Default: &lt;code&gt;500&lt;/code&gt;)
     * </pre>
     *
     * <code>optional uint32 max_results = 4;</code>
     */
    public int getMaxResults() {
      return maxResults_;
    }
    /**
     * <pre>
     * The maximum number of results per page that should be returned.
     * If the number of available results is larger than &lt;code&gt;maxResults&lt;/code&gt;,
     * Compute Engine returns a &lt;code&gt;nextPageToken&lt;/code&gt; that can be used to get
     * the next page of results in subsequent list requests. Acceptable values are
     * &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;500&lt;/code&gt;, inclusive. (Default: &lt;code&gt;500&lt;/code&gt;)
     * </pre>
     *
     * <code>optional uint32 max_results = 4;</code>
     */
    public Builder setMaxResults(int value) {
      
      maxResults_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of results per page that should be returned.
     * If the number of available results is larger than &lt;code&gt;maxResults&lt;/code&gt;,
     * Compute Engine returns a &lt;code&gt;nextPageToken&lt;/code&gt; that can be used to get
     * the next page of results in subsequent list requests. Acceptable values are
     * &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;500&lt;/code&gt;, inclusive. (Default: &lt;code&gt;500&lt;/code&gt;)
     * </pre>
     *
     * <code>optional uint32 max_results = 4;</code>
     */
    public Builder clearMaxResults() {
      
      maxResults_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object pageToken_ = "";
    /**
     * <pre>
     * Specifies a page token to use. Set &lt;code&gt;pageToken&lt;/code&gt; to the
     * &lt;code&gt;nextPageToken&lt;/code&gt; returned by a previous list request to get
     * the next page of results.
     * </pre>
     *
     * <code>optional string page_token = 5;</code>
     */
    public java.lang.String getPageToken() {
      java.lang.Object ref = pageToken_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        pageToken_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies a page token to use. Set &lt;code&gt;pageToken&lt;/code&gt; to the
     * &lt;code&gt;nextPageToken&lt;/code&gt; returned by a previous list request to get
     * the next page of results.
     * </pre>
     *
     * <code>optional string page_token = 5;</code>
     */
    public com.google.protobuf.ByteString
        getPageTokenBytes() {
      java.lang.Object ref = pageToken_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pageToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies a page token to use. Set &lt;code&gt;pageToken&lt;/code&gt; to the
     * &lt;code&gt;nextPageToken&lt;/code&gt; returned by a previous list request to get
     * the next page of results.
     * </pre>
     *
     * <code>optional string page_token = 5;</code>
     */
    public Builder setPageToken(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pageToken_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a page token to use. Set &lt;code&gt;pageToken&lt;/code&gt; to the
     * &lt;code&gt;nextPageToken&lt;/code&gt; returned by a previous list request to get
     * the next page of results.
     * </pre>
     *
     * <code>optional string page_token = 5;</code>
     */
    public Builder clearPageToken() {
      
      pageToken_ = getDefaultInstance().getPageToken();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a page token to use. Set &lt;code&gt;pageToken&lt;/code&gt; to the
     * &lt;code&gt;nextPageToken&lt;/code&gt; returned by a previous list request to get
     * the next page of results.
     * </pre>
     *
     * <code>optional string page_token = 5;</code>
     */
    public Builder setPageTokenBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pageToken_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object filter_ = "";
    /**
     * <pre>
     * Sets a filter expression for filtering listed resources, in the form
     * &lt;code&gt;filter={expression}&lt;/code&gt;. Your &lt;code&gt;{expression}&lt;/code&gt; must
     * be in the format: &lt;code&gt;field_name comparison_string literal_string&lt;/code&gt;.
     * The &lt;code&gt;field_name&lt;/code&gt; is the name of the field you want to compare.
     * Only atomic field types are supported (string, number, boolean). The
     * &lt;code&gt;comparison_string&lt;/code&gt; must be either &lt;code&gt;eq&lt;/code&gt; (equals) or
     * &lt;code&gt;ne&lt;/code&gt; (not equals). The &lt;code&gt;literal_string&lt;/code&gt; is the string
     * value to filter to. The literal value must be valid for the type of field
     * you are filtering by (string, number, boolean). For string fields, the
     * literal value is interpreted as a regular expression
     * using &lt;a href="https://github.com/google/re2" target="_blank"&gt;RE2&lt;/a&gt;
     * syntax. The literal value must match the entire field.
     * For example, to filter for instances that do not have a name of
     * &lt;code&gt;example-instance&lt;/code&gt;, you would use
     * &lt;code&gt;filter=name ne example-instance&lt;/code&gt;.
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the &lt;code&gt;scheduling.automaticRestart&lt;/code&gt; field
     * to &lt;code&gt;true&lt;/code&gt;. Use filtering on nested fields to take advantage of
     * &lt;a href="/compute/docs/label-or-tag-resources"&gt;labels&lt;/a&gt;
     * to organize and search for results based on label values.
     * To filter on multiple expressions, provide each separate expression within
     * parentheses. For example,
     * &lt;code&gt;(scheduling.automaticRestart eq true) (zone eq us-central1-f)&lt;/code&gt;.
     * Multiple expressions are treated as &lt;code&gt;AND&lt;/code&gt; expressions, meaning
     * that resources must match all expressions to pass the filters.
     * </pre>
     *
     * <code>optional string filter = 6;</code>
     */
    public java.lang.String getFilter() {
      java.lang.Object ref = filter_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        filter_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Sets a filter expression for filtering listed resources, in the form
     * &lt;code&gt;filter={expression}&lt;/code&gt;. Your &lt;code&gt;{expression}&lt;/code&gt; must
     * be in the format: &lt;code&gt;field_name comparison_string literal_string&lt;/code&gt;.
     * The &lt;code&gt;field_name&lt;/code&gt; is the name of the field you want to compare.
     * Only atomic field types are supported (string, number, boolean). The
     * &lt;code&gt;comparison_string&lt;/code&gt; must be either &lt;code&gt;eq&lt;/code&gt; (equals) or
     * &lt;code&gt;ne&lt;/code&gt; (not equals). The &lt;code&gt;literal_string&lt;/code&gt; is the string
     * value to filter to. The literal value must be valid for the type of field
     * you are filtering by (string, number, boolean). For string fields, the
     * literal value is interpreted as a regular expression
     * using &lt;a href="https://github.com/google/re2" target="_blank"&gt;RE2&lt;/a&gt;
     * syntax. The literal value must match the entire field.
     * For example, to filter for instances that do not have a name of
     * &lt;code&gt;example-instance&lt;/code&gt;, you would use
     * &lt;code&gt;filter=name ne example-instance&lt;/code&gt;.
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the &lt;code&gt;scheduling.automaticRestart&lt;/code&gt; field
     * to &lt;code&gt;true&lt;/code&gt;. Use filtering on nested fields to take advantage of
     * &lt;a href="/compute/docs/label-or-tag-resources"&gt;labels&lt;/a&gt;
     * to organize and search for results based on label values.
     * To filter on multiple expressions, provide each separate expression within
     * parentheses. For example,
     * &lt;code&gt;(scheduling.automaticRestart eq true) (zone eq us-central1-f)&lt;/code&gt;.
     * Multiple expressions are treated as &lt;code&gt;AND&lt;/code&gt; expressions, meaning
     * that resources must match all expressions to pass the filters.
     * </pre>
     *
     * <code>optional string filter = 6;</code>
     */
    public com.google.protobuf.ByteString
        getFilterBytes() {
      java.lang.Object ref = filter_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        filter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Sets a filter expression for filtering listed resources, in the form
     * &lt;code&gt;filter={expression}&lt;/code&gt;. Your &lt;code&gt;{expression}&lt;/code&gt; must
     * be in the format: &lt;code&gt;field_name comparison_string literal_string&lt;/code&gt;.
     * The &lt;code&gt;field_name&lt;/code&gt; is the name of the field you want to compare.
     * Only atomic field types are supported (string, number, boolean). The
     * &lt;code&gt;comparison_string&lt;/code&gt; must be either &lt;code&gt;eq&lt;/code&gt; (equals) or
     * &lt;code&gt;ne&lt;/code&gt; (not equals). The &lt;code&gt;literal_string&lt;/code&gt; is the string
     * value to filter to. The literal value must be valid for the type of field
     * you are filtering by (string, number, boolean). For string fields, the
     * literal value is interpreted as a regular expression
     * using &lt;a href="https://github.com/google/re2" target="_blank"&gt;RE2&lt;/a&gt;
     * syntax. The literal value must match the entire field.
     * For example, to filter for instances that do not have a name of
     * &lt;code&gt;example-instance&lt;/code&gt;, you would use
     * &lt;code&gt;filter=name ne example-instance&lt;/code&gt;.
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the &lt;code&gt;scheduling.automaticRestart&lt;/code&gt; field
     * to &lt;code&gt;true&lt;/code&gt;. Use filtering on nested fields to take advantage of
     * &lt;a href="/compute/docs/label-or-tag-resources"&gt;labels&lt;/a&gt;
     * to organize and search for results based on label values.
     * To filter on multiple expressions, provide each separate expression within
     * parentheses. For example,
     * &lt;code&gt;(scheduling.automaticRestart eq true) (zone eq us-central1-f)&lt;/code&gt;.
     * Multiple expressions are treated as &lt;code&gt;AND&lt;/code&gt; expressions, meaning
     * that resources must match all expressions to pass the filters.
     * </pre>
     *
     * <code>optional string filter = 6;</code>
     */
    public Builder setFilter(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      filter_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sets a filter expression for filtering listed resources, in the form
     * &lt;code&gt;filter={expression}&lt;/code&gt;. Your &lt;code&gt;{expression}&lt;/code&gt; must
     * be in the format: &lt;code&gt;field_name comparison_string literal_string&lt;/code&gt;.
     * The &lt;code&gt;field_name&lt;/code&gt; is the name of the field you want to compare.
     * Only atomic field types are supported (string, number, boolean). The
     * &lt;code&gt;comparison_string&lt;/code&gt; must be either &lt;code&gt;eq&lt;/code&gt; (equals) or
     * &lt;code&gt;ne&lt;/code&gt; (not equals). The &lt;code&gt;literal_string&lt;/code&gt; is the string
     * value to filter to. The literal value must be valid for the type of field
     * you are filtering by (string, number, boolean). For string fields, the
     * literal value is interpreted as a regular expression
     * using &lt;a href="https://github.com/google/re2" target="_blank"&gt;RE2&lt;/a&gt;
     * syntax. The literal value must match the entire field.
     * For example, to filter for instances that do not have a name of
     * &lt;code&gt;example-instance&lt;/code&gt;, you would use
     * &lt;code&gt;filter=name ne example-instance&lt;/code&gt;.
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the &lt;code&gt;scheduling.automaticRestart&lt;/code&gt; field
     * to &lt;code&gt;true&lt;/code&gt;. Use filtering on nested fields to take advantage of
     * &lt;a href="/compute/docs/label-or-tag-resources"&gt;labels&lt;/a&gt;
     * to organize and search for results based on label values.
     * To filter on multiple expressions, provide each separate expression within
     * parentheses. For example,
     * &lt;code&gt;(scheduling.automaticRestart eq true) (zone eq us-central1-f)&lt;/code&gt;.
     * Multiple expressions are treated as &lt;code&gt;AND&lt;/code&gt; expressions, meaning
     * that resources must match all expressions to pass the filters.
     * </pre>
     *
     * <code>optional string filter = 6;</code>
     */
    public Builder clearFilter() {
      
      filter_ = getDefaultInstance().getFilter();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sets a filter expression for filtering listed resources, in the form
     * &lt;code&gt;filter={expression}&lt;/code&gt;. Your &lt;code&gt;{expression}&lt;/code&gt; must
     * be in the format: &lt;code&gt;field_name comparison_string literal_string&lt;/code&gt;.
     * The &lt;code&gt;field_name&lt;/code&gt; is the name of the field you want to compare.
     * Only atomic field types are supported (string, number, boolean). The
     * &lt;code&gt;comparison_string&lt;/code&gt; must be either &lt;code&gt;eq&lt;/code&gt; (equals) or
     * &lt;code&gt;ne&lt;/code&gt; (not equals). The &lt;code&gt;literal_string&lt;/code&gt; is the string
     * value to filter to. The literal value must be valid for the type of field
     * you are filtering by (string, number, boolean). For string fields, the
     * literal value is interpreted as a regular expression
     * using &lt;a href="https://github.com/google/re2" target="_blank"&gt;RE2&lt;/a&gt;
     * syntax. The literal value must match the entire field.
     * For example, to filter for instances that do not have a name of
     * &lt;code&gt;example-instance&lt;/code&gt;, you would use
     * &lt;code&gt;filter=name ne example-instance&lt;/code&gt;.
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the &lt;code&gt;scheduling.automaticRestart&lt;/code&gt; field
     * to &lt;code&gt;true&lt;/code&gt;. Use filtering on nested fields to take advantage of
     * &lt;a href="/compute/docs/label-or-tag-resources"&gt;labels&lt;/a&gt;
     * to organize and search for results based on label values.
     * To filter on multiple expressions, provide each separate expression within
     * parentheses. For example,
     * &lt;code&gt;(scheduling.automaticRestart eq true) (zone eq us-central1-f)&lt;/code&gt;.
     * Multiple expressions are treated as &lt;code&gt;AND&lt;/code&gt; expressions, meaning
     * that resources must match all expressions to pass the filters.
     * </pre>
     *
     * <code>optional string filter = 6;</code>
     */
    public Builder setFilterBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      filter_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object orderBy_ = "";
    /**
     * <pre>
     * Sorts list results by a certain order. By default, results
     * are returned in alphanumerical order based on the resource name.
     * You can also sort results in descending order based on the creation timestamp
     * using &lt;code&gt;orderBy="creationTimestamp desc"&lt;/code&gt;. This sorts
     * results based on the &lt;code&gt;creationTimestamp&lt;/code&gt; field in
     * reverse chronological order (newest result first). Use this to sort resources
     * like operations so that the newest operation is returned first.
     * Currently, only sorting by &lt;code&gt;name&lt;/code&gt; or
     * &lt;code&gt;creationTimestamp desc&lt;/code&gt; is supported.
     * </pre>
     *
     * <code>optional string order_by = 14;</code>
     */
    public java.lang.String getOrderBy() {
      java.lang.Object ref = orderBy_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        orderBy_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Sorts list results by a certain order. By default, results
     * are returned in alphanumerical order based on the resource name.
     * You can also sort results in descending order based on the creation timestamp
     * using &lt;code&gt;orderBy="creationTimestamp desc"&lt;/code&gt;. This sorts
     * results based on the &lt;code&gt;creationTimestamp&lt;/code&gt; field in
     * reverse chronological order (newest result first). Use this to sort resources
     * like operations so that the newest operation is returned first.
     * Currently, only sorting by &lt;code&gt;name&lt;/code&gt; or
     * &lt;code&gt;creationTimestamp desc&lt;/code&gt; is supported.
     * </pre>
     *
     * <code>optional string order_by = 14;</code>
     */
    public com.google.protobuf.ByteString
        getOrderByBytes() {
      java.lang.Object ref = orderBy_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        orderBy_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Sorts list results by a certain order. By default, results
     * are returned in alphanumerical order based on the resource name.
     * You can also sort results in descending order based on the creation timestamp
     * using &lt;code&gt;orderBy="creationTimestamp desc"&lt;/code&gt;. This sorts
     * results based on the &lt;code&gt;creationTimestamp&lt;/code&gt; field in
     * reverse chronological order (newest result first). Use this to sort resources
     * like operations so that the newest operation is returned first.
     * Currently, only sorting by &lt;code&gt;name&lt;/code&gt; or
     * &lt;code&gt;creationTimestamp desc&lt;/code&gt; is supported.
     * </pre>
     *
     * <code>optional string order_by = 14;</code>
     */
    public Builder setOrderBy(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      orderBy_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sorts list results by a certain order. By default, results
     * are returned in alphanumerical order based on the resource name.
     * You can also sort results in descending order based on the creation timestamp
     * using &lt;code&gt;orderBy="creationTimestamp desc"&lt;/code&gt;. This sorts
     * results based on the &lt;code&gt;creationTimestamp&lt;/code&gt; field in
     * reverse chronological order (newest result first). Use this to sort resources
     * like operations so that the newest operation is returned first.
     * Currently, only sorting by &lt;code&gt;name&lt;/code&gt; or
     * &lt;code&gt;creationTimestamp desc&lt;/code&gt; is supported.
     * </pre>
     *
     * <code>optional string order_by = 14;</code>
     */
    public Builder clearOrderBy() {
      
      orderBy_ = getDefaultInstance().getOrderBy();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sorts list results by a certain order. By default, results
     * are returned in alphanumerical order based on the resource name.
     * You can also sort results in descending order based on the creation timestamp
     * using &lt;code&gt;orderBy="creationTimestamp desc"&lt;/code&gt;. This sorts
     * results based on the &lt;code&gt;creationTimestamp&lt;/code&gt; field in
     * reverse chronological order (newest result first). Use this to sort resources
     * like operations so that the newest operation is returned first.
     * Currently, only sorting by &lt;code&gt;name&lt;/code&gt; or
     * &lt;code&gt;creationTimestamp desc&lt;/code&gt; is supported.
     * </pre>
     *
     * <code>optional string order_by = 14;</code>
     */
    public Builder setOrderByBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      orderBy_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object project_ = "";
    /**
     * <pre>
     * Project ID for this request.
     * </pre>
     *
     * <code>optional string project = 2;</code>
     */
    public java.lang.String getProject() {
      java.lang.Object ref = project_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        project_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Project ID for this request.
     * </pre>
     *
     * <code>optional string project = 2;</code>
     */
    public com.google.protobuf.ByteString
        getProjectBytes() {
      java.lang.Object ref = project_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        project_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Project ID for this request.
     * </pre>
     *
     * <code>optional string project = 2;</code>
     */
    public Builder setProject(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      project_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Project ID for this request.
     * </pre>
     *
     * <code>optional string project = 2;</code>
     */
    public Builder clearProject() {
      
      project_ = getDefaultInstance().getProject();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Project ID for this request.
     * </pre>
     *
     * <code>optional string project = 2;</code>
     */
    public Builder setProjectBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      project_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object zone_ = "";
    /**
     * <pre>
     * The name of the zone for this request.
     * </pre>
     *
     * <code>optional string zone = 3;</code>
     */
    public java.lang.String getZone() {
      java.lang.Object ref = zone_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        zone_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the zone for this request.
     * </pre>
     *
     * <code>optional string zone = 3;</code>
     */
    public com.google.protobuf.ByteString
        getZoneBytes() {
      java.lang.Object ref = zone_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        zone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the zone for this request.
     * </pre>
     *
     * <code>optional string zone = 3;</code>
     */
    public Builder setZone(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      zone_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the zone for this request.
     * </pre>
     *
     * <code>optional string zone = 3;</code>
     */
    public Builder clearZone() {
      
      zone_ = getDefaultInstance().getZone();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the zone for this request.
     * </pre>
     *
     * <code>optional string zone = 3;</code>
     */
    public Builder setZoneBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      zone_ = value;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.compute.v1.InstancesListRequest)
  }

  // @@protoc_insertion_point(class_scope:google.compute.v1.InstancesListRequest)
  private static final com.google.cloud.compute.v1.InstancesListRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.compute.v1.InstancesListRequest();
  }

  public static com.google.cloud.compute.v1.InstancesListRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InstancesListRequest>
      PARSER = new com.google.protobuf.AbstractParser<InstancesListRequest>() {
    public InstancesListRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstancesListRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InstancesListRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InstancesListRequest> getParserForType() {
    return PARSER;
  }

  public com.google.cloud.compute.v1.InstancesListRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

