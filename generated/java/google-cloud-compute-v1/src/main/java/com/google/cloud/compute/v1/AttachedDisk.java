// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/compute/v1/compute_instances.proto

package com.google.cloud.compute.v1;

/**
 * <pre>
 * An instance-attached disk resource.
 * </pre>
 *
 * Protobuf type {@code google.compute.v1.AttachedDisk}
 */
public  final class AttachedDisk extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.compute.v1.AttachedDisk)
    AttachedDiskOrBuilder {
  // Use AttachedDisk.newBuilder() to construct.
  private AttachedDisk(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AttachedDisk() {
    kind_ = "";
    type_ = 0;
    mode_ = 0;
    source_ = "";
    deviceName_ = "";
    index_ = 0;
    boot_ = false;
    autoDelete_ = false;
    licenses_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    interface_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private AttachedDisk(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            int rawValue = input.readEnum();

            type_ = rawValue;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            mode_ = rawValue;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            source_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            deviceName_ = s;
            break;
          }
          case 40: {

            index_ = input.readInt32();
            break;
          }
          case 48: {

            boot_ = input.readBool();
            break;
          }
          case 58: {
            com.google.cloud.compute.v1.AttachedDisk.InitializeParams.Builder subBuilder = null;
            if (initializeParams_ != null) {
              subBuilder = initializeParams_.toBuilder();
            }
            initializeParams_ = input.readMessage(com.google.cloud.compute.v1.AttachedDisk.InitializeParams.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(initializeParams_);
              initializeParams_ = subBuilder.buildPartial();
            }

            break;
          }
          case 64: {

            autoDelete_ = input.readBool();
            break;
          }
          case 74: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
              licenses_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000200;
            }
            licenses_.add(s);
            break;
          }
          case 80: {
            int rawValue = input.readEnum();

            interface_ = rawValue;
            break;
          }
          case 8002: {
            java.lang.String s = input.readStringRequireUtf8();

            kind_ = s;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
        licenses_ = licenses_.getUnmodifiableView();
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.compute.v1.AttachedDisk.class, com.google.cloud.compute.v1.AttachedDisk.Builder.class);
  }

  /**
   * Protobuf enum {@code google.compute.v1.AttachedDisk.DiskType}
   */
  public enum DiskType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SCRATCH = 0;</code>
     */
    SCRATCH(0),
    /**
     * <code>PERSISTENT = 1;</code>
     */
    PERSISTENT(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SCRATCH = 0;</code>
     */
    public static final int SCRATCH_VALUE = 0;
    /**
     * <code>PERSISTENT = 1;</code>
     */
    public static final int PERSISTENT_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DiskType valueOf(int value) {
      return forNumber(value);
    }

    public static DiskType forNumber(int value) {
      switch (value) {
        case 0: return SCRATCH;
        case 1: return PERSISTENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DiskType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DiskType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DiskType>() {
            public DiskType findValueByNumber(int number) {
              return DiskType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.cloud.compute.v1.AttachedDisk.getDescriptor().getEnumTypes().get(0);
    }

    private static final DiskType[] VALUES = values();

    public static DiskType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DiskType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.compute.v1.AttachedDisk.DiskType)
  }

  /**
   * Protobuf enum {@code google.compute.v1.AttachedDisk.DiskMode}
   */
  public enum DiskMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * &lt;b&gt;[Default]&lt;/b&gt; Attaches this disk in read-write mode. Only one
     * virtual machine at a time can be attached to a disk in read-write mode.
     * </pre>
     *
     * <code>READ_WRITE = 0;</code>
     */
    READ_WRITE(0),
    /**
     * <pre>
     * Attaches this disk in read-only mode. Multiple virtual machines can use
     * a disk in read-only mode at a time.
     * </pre>
     *
     * <code>READ_ONLY = 1;</code>
     */
    READ_ONLY(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * &lt;b&gt;[Default]&lt;/b&gt; Attaches this disk in read-write mode. Only one
     * virtual machine at a time can be attached to a disk in read-write mode.
     * </pre>
     *
     * <code>READ_WRITE = 0;</code>
     */
    public static final int READ_WRITE_VALUE = 0;
    /**
     * <pre>
     * Attaches this disk in read-only mode. Multiple virtual machines can use
     * a disk in read-only mode at a time.
     * </pre>
     *
     * <code>READ_ONLY = 1;</code>
     */
    public static final int READ_ONLY_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DiskMode valueOf(int value) {
      return forNumber(value);
    }

    public static DiskMode forNumber(int value) {
      switch (value) {
        case 0: return READ_WRITE;
        case 1: return READ_ONLY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DiskMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DiskMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DiskMode>() {
            public DiskMode findValueByNumber(int number) {
              return DiskMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.cloud.compute.v1.AttachedDisk.getDescriptor().getEnumTypes().get(1);
    }

    private static final DiskMode[] VALUES = values();

    public static DiskMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DiskMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.compute.v1.AttachedDisk.DiskMode)
  }

  /**
   * Protobuf enum {@code google.compute.v1.AttachedDisk.DiskInterface}
   */
  public enum DiskInterface
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SCSI = 0;</code>
     */
    SCSI(0),
    /**
     * <code>NVME = 1;</code>
     */
    NVME(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SCSI = 0;</code>
     */
    public static final int SCSI_VALUE = 0;
    /**
     * <code>NVME = 1;</code>
     */
    public static final int NVME_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DiskInterface valueOf(int value) {
      return forNumber(value);
    }

    public static DiskInterface forNumber(int value) {
      switch (value) {
        case 0: return SCSI;
        case 1: return NVME;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DiskInterface>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DiskInterface> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DiskInterface>() {
            public DiskInterface findValueByNumber(int number) {
              return DiskInterface.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.cloud.compute.v1.AttachedDisk.getDescriptor().getEnumTypes().get(2);
    }

    private static final DiskInterface[] VALUES = values();

    public static DiskInterface valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DiskInterface(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.compute.v1.AttachedDisk.DiskInterface)
  }

  public interface InitializeParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.compute.v1.AttachedDisk.InitializeParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the disk name. If not specified, the default is to use the name
     * of the instance.
     * </pre>
     *
     * <code>optional string disk_name = 1;</code>
     */
    java.lang.String getDiskName();
    /**
     * <pre>
     * Specifies the disk name. If not specified, the default is to use the name
     * of the instance.
     * </pre>
     *
     * <code>optional string disk_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getDiskNameBytes();

    /**
     * <pre>
     * The source image to create this disk. When creating a new instance,
     * one of &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
     * &lt;code&gt;disks.source&lt;/code&gt; is required.
     * To create a disk with one of the public operating system images, specify
     * the image by its family name. For example, specify
     * &lt;code&gt;family/debian-8&lt;/code&gt; to use the latest Debian 8 image:
     * &lt;code&gt;projects/debian-cloud/global/images/family/debian-8&lt;/code&gt;
     * Alternatively, use a specific version of a public operating system image:
     * &lt;code&gt;projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD&lt;/code&gt;
     * To create a disk with a private image that you created, specify the
     * image name in the following format:
     * &lt;code&gt;global/images/my-private-image&lt;/code&gt;
     * You can also specify a private image by its image family, which returns
     * the latest version of the image in that family. Replace the image name
     * with &lt;code&gt;family/family-name&lt;/code&gt;:
     * &lt;code&gt;global/images/family/my-private-family&lt;/code&gt;
     * If the source image is deleted later, this field will not be set.
     * </pre>
     *
     * <code>optional string source_image = 2;</code>
     */
    java.lang.String getSourceImage();
    /**
     * <pre>
     * The source image to create this disk. When creating a new instance,
     * one of &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
     * &lt;code&gt;disks.source&lt;/code&gt; is required.
     * To create a disk with one of the public operating system images, specify
     * the image by its family name. For example, specify
     * &lt;code&gt;family/debian-8&lt;/code&gt; to use the latest Debian 8 image:
     * &lt;code&gt;projects/debian-cloud/global/images/family/debian-8&lt;/code&gt;
     * Alternatively, use a specific version of a public operating system image:
     * &lt;code&gt;projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD&lt;/code&gt;
     * To create a disk with a private image that you created, specify the
     * image name in the following format:
     * &lt;code&gt;global/images/my-private-image&lt;/code&gt;
     * You can also specify a private image by its image family, which returns
     * the latest version of the image in that family. Replace the image name
     * with &lt;code&gt;family/family-name&lt;/code&gt;:
     * &lt;code&gt;global/images/family/my-private-family&lt;/code&gt;
     * If the source image is deleted later, this field will not be set.
     * </pre>
     *
     * <code>optional string source_image = 2;</code>
     */
    com.google.protobuf.ByteString
        getSourceImageBytes();

    /**
     * <pre>
     * Specifies the size of the disk in base-2 GB.
     * </pre>
     *
     * <code>optional int64 disk_size_gb = 3;</code>
     */
    long getDiskSizeGb();

    /**
     * <pre>
     * Specifies the disk type to use to create the instance. If not specified,
     * the default is &lt;code&gt;pd-standard&lt;/code&gt;, specified using the full URL.
     * For example:
     * &lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/pd-standard&lt;/code&gt;
     * Other values include &lt;code&gt;pd-ssd&lt;/code&gt; and &lt;code&gt;local-ssd&lt;/code&gt;. If
     * you define this field, you can provide either the full or partial URL.
     * For example, the following are valid values:
     * &lt;ul&gt;
     *   &lt;li&gt;&lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     *   &lt;li&gt;&lt;code&gt;projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     *   &lt;li&gt;&lt;code&gt;zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     * Note that for InstanceTemplate, this is the name of the disk type, not
     * URL.
     * </pre>
     *
     * <code>optional string disk_type = 5;</code>
     */
    java.lang.String getDiskType();
    /**
     * <pre>
     * Specifies the disk type to use to create the instance. If not specified,
     * the default is &lt;code&gt;pd-standard&lt;/code&gt;, specified using the full URL.
     * For example:
     * &lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/pd-standard&lt;/code&gt;
     * Other values include &lt;code&gt;pd-ssd&lt;/code&gt; and &lt;code&gt;local-ssd&lt;/code&gt;. If
     * you define this field, you can provide either the full or partial URL.
     * For example, the following are valid values:
     * &lt;ul&gt;
     *   &lt;li&gt;&lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     *   &lt;li&gt;&lt;code&gt;projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     *   &lt;li&gt;&lt;code&gt;zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     * Note that for InstanceTemplate, this is the name of the disk type, not
     * URL.
     * </pre>
     *
     * <code>optional string disk_type = 5;</code>
     */
    com.google.protobuf.ByteString
        getDiskTypeBytes();
  }
  /**
   * <pre>
   * [Input Only] Specifies the parameters for a new disk that will be created
   * alongside the new instance. Use initialization parameters to create boot
   * disks or local SSDs attached to the new instance.
   * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
   * you can only define one or the other, but not both.
   * </pre>
   *
   * Protobuf type {@code google.compute.v1.AttachedDisk.InitializeParams}
   */
  public  static final class InitializeParams extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.compute.v1.AttachedDisk.InitializeParams)
      InitializeParamsOrBuilder {
    // Use InitializeParams.newBuilder() to construct.
    private InitializeParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InitializeParams() {
      diskName_ = "";
      sourceImage_ = "";
      diskSizeGb_ = 0L;
      diskType_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private InitializeParams(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              diskName_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              sourceImage_ = s;
              break;
            }
            case 24: {

              diskSizeGb_ = input.readInt64();
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              diskType_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_InitializeParams_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_InitializeParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.compute.v1.AttachedDisk.InitializeParams.class, com.google.cloud.compute.v1.AttachedDisk.InitializeParams.Builder.class);
    }

    public static final int DISK_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object diskName_;
    /**
     * <pre>
     * Specifies the disk name. If not specified, the default is to use the name
     * of the instance.
     * </pre>
     *
     * <code>optional string disk_name = 1;</code>
     */
    public java.lang.String getDiskName() {
      java.lang.Object ref = diskName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        diskName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the disk name. If not specified, the default is to use the name
     * of the instance.
     * </pre>
     *
     * <code>optional string disk_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getDiskNameBytes() {
      java.lang.Object ref = diskName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        diskName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SOURCE_IMAGE_FIELD_NUMBER = 2;
    private volatile java.lang.Object sourceImage_;
    /**
     * <pre>
     * The source image to create this disk. When creating a new instance,
     * one of &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
     * &lt;code&gt;disks.source&lt;/code&gt; is required.
     * To create a disk with one of the public operating system images, specify
     * the image by its family name. For example, specify
     * &lt;code&gt;family/debian-8&lt;/code&gt; to use the latest Debian 8 image:
     * &lt;code&gt;projects/debian-cloud/global/images/family/debian-8&lt;/code&gt;
     * Alternatively, use a specific version of a public operating system image:
     * &lt;code&gt;projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD&lt;/code&gt;
     * To create a disk with a private image that you created, specify the
     * image name in the following format:
     * &lt;code&gt;global/images/my-private-image&lt;/code&gt;
     * You can also specify a private image by its image family, which returns
     * the latest version of the image in that family. Replace the image name
     * with &lt;code&gt;family/family-name&lt;/code&gt;:
     * &lt;code&gt;global/images/family/my-private-family&lt;/code&gt;
     * If the source image is deleted later, this field will not be set.
     * </pre>
     *
     * <code>optional string source_image = 2;</code>
     */
    public java.lang.String getSourceImage() {
      java.lang.Object ref = sourceImage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sourceImage_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The source image to create this disk. When creating a new instance,
     * one of &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
     * &lt;code&gt;disks.source&lt;/code&gt; is required.
     * To create a disk with one of the public operating system images, specify
     * the image by its family name. For example, specify
     * &lt;code&gt;family/debian-8&lt;/code&gt; to use the latest Debian 8 image:
     * &lt;code&gt;projects/debian-cloud/global/images/family/debian-8&lt;/code&gt;
     * Alternatively, use a specific version of a public operating system image:
     * &lt;code&gt;projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD&lt;/code&gt;
     * To create a disk with a private image that you created, specify the
     * image name in the following format:
     * &lt;code&gt;global/images/my-private-image&lt;/code&gt;
     * You can also specify a private image by its image family, which returns
     * the latest version of the image in that family. Replace the image name
     * with &lt;code&gt;family/family-name&lt;/code&gt;:
     * &lt;code&gt;global/images/family/my-private-family&lt;/code&gt;
     * If the source image is deleted later, this field will not be set.
     * </pre>
     *
     * <code>optional string source_image = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSourceImageBytes() {
      java.lang.Object ref = sourceImage_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sourceImage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DISK_SIZE_GB_FIELD_NUMBER = 3;
    private long diskSizeGb_;
    /**
     * <pre>
     * Specifies the size of the disk in base-2 GB.
     * </pre>
     *
     * <code>optional int64 disk_size_gb = 3;</code>
     */
    public long getDiskSizeGb() {
      return diskSizeGb_;
    }

    public static final int DISK_TYPE_FIELD_NUMBER = 5;
    private volatile java.lang.Object diskType_;
    /**
     * <pre>
     * Specifies the disk type to use to create the instance. If not specified,
     * the default is &lt;code&gt;pd-standard&lt;/code&gt;, specified using the full URL.
     * For example:
     * &lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/pd-standard&lt;/code&gt;
     * Other values include &lt;code&gt;pd-ssd&lt;/code&gt; and &lt;code&gt;local-ssd&lt;/code&gt;. If
     * you define this field, you can provide either the full or partial URL.
     * For example, the following are valid values:
     * &lt;ul&gt;
     *   &lt;li&gt;&lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     *   &lt;li&gt;&lt;code&gt;projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     *   &lt;li&gt;&lt;code&gt;zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     * Note that for InstanceTemplate, this is the name of the disk type, not
     * URL.
     * </pre>
     *
     * <code>optional string disk_type = 5;</code>
     */
    public java.lang.String getDiskType() {
      java.lang.Object ref = diskType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        diskType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the disk type to use to create the instance. If not specified,
     * the default is &lt;code&gt;pd-standard&lt;/code&gt;, specified using the full URL.
     * For example:
     * &lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/pd-standard&lt;/code&gt;
     * Other values include &lt;code&gt;pd-ssd&lt;/code&gt; and &lt;code&gt;local-ssd&lt;/code&gt;. If
     * you define this field, you can provide either the full or partial URL.
     * For example, the following are valid values:
     * &lt;ul&gt;
     *   &lt;li&gt;&lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     *   &lt;li&gt;&lt;code&gt;projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     *   &lt;li&gt;&lt;code&gt;zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
     * &lt;/ul&gt;
     * Note that for InstanceTemplate, this is the name of the disk type, not
     * URL.
     * </pre>
     *
     * <code>optional string disk_type = 5;</code>
     */
    public com.google.protobuf.ByteString
        getDiskTypeBytes() {
      java.lang.Object ref = diskType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        diskType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDiskNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, diskName_);
      }
      if (!getSourceImageBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceImage_);
      }
      if (diskSizeGb_ != 0L) {
        output.writeInt64(3, diskSizeGb_);
      }
      if (!getDiskTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, diskType_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDiskNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, diskName_);
      }
      if (!getSourceImageBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sourceImage_);
      }
      if (diskSizeGb_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, diskSizeGb_);
      }
      if (!getDiskTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, diskType_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.cloud.compute.v1.AttachedDisk.InitializeParams)) {
        return super.equals(obj);
      }
      com.google.cloud.compute.v1.AttachedDisk.InitializeParams other = (com.google.cloud.compute.v1.AttachedDisk.InitializeParams) obj;

      boolean result = true;
      result = result && getDiskName()
          .equals(other.getDiskName());
      result = result && getSourceImage()
          .equals(other.getSourceImage());
      result = result && (getDiskSizeGb()
          == other.getDiskSizeGb());
      result = result && getDiskType()
          .equals(other.getDiskType());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + DISK_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getDiskName().hashCode();
      hash = (37 * hash) + SOURCE_IMAGE_FIELD_NUMBER;
      hash = (53 * hash) + getSourceImage().hashCode();
      hash = (37 * hash) + DISK_SIZE_GB_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDiskSizeGb());
      hash = (37 * hash) + DISK_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getDiskType().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.cloud.compute.v1.AttachedDisk.InitializeParams prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * Protobuf type {@code google.compute.v1.AttachedDisk.InitializeParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.compute.v1.AttachedDisk.InitializeParams)
        com.google.cloud.compute.v1.AttachedDisk.InitializeParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_InitializeParams_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_InitializeParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.cloud.compute.v1.AttachedDisk.InitializeParams.class, com.google.cloud.compute.v1.AttachedDisk.InitializeParams.Builder.class);
      }

      // Construct using com.google.cloud.compute.v1.AttachedDisk.InitializeParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        diskName_ = "";

        sourceImage_ = "";

        diskSizeGb_ = 0L;

        diskType_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_InitializeParams_descriptor;
      }

      public com.google.cloud.compute.v1.AttachedDisk.InitializeParams getDefaultInstanceForType() {
        return com.google.cloud.compute.v1.AttachedDisk.InitializeParams.getDefaultInstance();
      }

      public com.google.cloud.compute.v1.AttachedDisk.InitializeParams build() {
        com.google.cloud.compute.v1.AttachedDisk.InitializeParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.cloud.compute.v1.AttachedDisk.InitializeParams buildPartial() {
        com.google.cloud.compute.v1.AttachedDisk.InitializeParams result = new com.google.cloud.compute.v1.AttachedDisk.InitializeParams(this);
        result.diskName_ = diskName_;
        result.sourceImage_ = sourceImage_;
        result.diskSizeGb_ = diskSizeGb_;
        result.diskType_ = diskType_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.cloud.compute.v1.AttachedDisk.InitializeParams) {
          return mergeFrom((com.google.cloud.compute.v1.AttachedDisk.InitializeParams)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.cloud.compute.v1.AttachedDisk.InitializeParams other) {
        if (other == com.google.cloud.compute.v1.AttachedDisk.InitializeParams.getDefaultInstance()) return this;
        if (!other.getDiskName().isEmpty()) {
          diskName_ = other.diskName_;
          onChanged();
        }
        if (!other.getSourceImage().isEmpty()) {
          sourceImage_ = other.sourceImage_;
          onChanged();
        }
        if (other.getDiskSizeGb() != 0L) {
          setDiskSizeGb(other.getDiskSizeGb());
        }
        if (!other.getDiskType().isEmpty()) {
          diskType_ = other.diskType_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.cloud.compute.v1.AttachedDisk.InitializeParams parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.cloud.compute.v1.AttachedDisk.InitializeParams) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object diskName_ = "";
      /**
       * <pre>
       * Specifies the disk name. If not specified, the default is to use the name
       * of the instance.
       * </pre>
       *
       * <code>optional string disk_name = 1;</code>
       */
      public java.lang.String getDiskName() {
        java.lang.Object ref = diskName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          diskName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the disk name. If not specified, the default is to use the name
       * of the instance.
       * </pre>
       *
       * <code>optional string disk_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getDiskNameBytes() {
        java.lang.Object ref = diskName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          diskName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the disk name. If not specified, the default is to use the name
       * of the instance.
       * </pre>
       *
       * <code>optional string disk_name = 1;</code>
       */
      public Builder setDiskName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        diskName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the disk name. If not specified, the default is to use the name
       * of the instance.
       * </pre>
       *
       * <code>optional string disk_name = 1;</code>
       */
      public Builder clearDiskName() {
        
        diskName_ = getDefaultInstance().getDiskName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the disk name. If not specified, the default is to use the name
       * of the instance.
       * </pre>
       *
       * <code>optional string disk_name = 1;</code>
       */
      public Builder setDiskNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        diskName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object sourceImage_ = "";
      /**
       * <pre>
       * The source image to create this disk. When creating a new instance,
       * one of &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
       * &lt;code&gt;disks.source&lt;/code&gt; is required.
       * To create a disk with one of the public operating system images, specify
       * the image by its family name. For example, specify
       * &lt;code&gt;family/debian-8&lt;/code&gt; to use the latest Debian 8 image:
       * &lt;code&gt;projects/debian-cloud/global/images/family/debian-8&lt;/code&gt;
       * Alternatively, use a specific version of a public operating system image:
       * &lt;code&gt;projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD&lt;/code&gt;
       * To create a disk with a private image that you created, specify the
       * image name in the following format:
       * &lt;code&gt;global/images/my-private-image&lt;/code&gt;
       * You can also specify a private image by its image family, which returns
       * the latest version of the image in that family. Replace the image name
       * with &lt;code&gt;family/family-name&lt;/code&gt;:
       * &lt;code&gt;global/images/family/my-private-family&lt;/code&gt;
       * If the source image is deleted later, this field will not be set.
       * </pre>
       *
       * <code>optional string source_image = 2;</code>
       */
      public java.lang.String getSourceImage() {
        java.lang.Object ref = sourceImage_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sourceImage_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The source image to create this disk. When creating a new instance,
       * one of &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
       * &lt;code&gt;disks.source&lt;/code&gt; is required.
       * To create a disk with one of the public operating system images, specify
       * the image by its family name. For example, specify
       * &lt;code&gt;family/debian-8&lt;/code&gt; to use the latest Debian 8 image:
       * &lt;code&gt;projects/debian-cloud/global/images/family/debian-8&lt;/code&gt;
       * Alternatively, use a specific version of a public operating system image:
       * &lt;code&gt;projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD&lt;/code&gt;
       * To create a disk with a private image that you created, specify the
       * image name in the following format:
       * &lt;code&gt;global/images/my-private-image&lt;/code&gt;
       * You can also specify a private image by its image family, which returns
       * the latest version of the image in that family. Replace the image name
       * with &lt;code&gt;family/family-name&lt;/code&gt;:
       * &lt;code&gt;global/images/family/my-private-family&lt;/code&gt;
       * If the source image is deleted later, this field will not be set.
       * </pre>
       *
       * <code>optional string source_image = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceImageBytes() {
        java.lang.Object ref = sourceImage_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sourceImage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The source image to create this disk. When creating a new instance,
       * one of &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
       * &lt;code&gt;disks.source&lt;/code&gt; is required.
       * To create a disk with one of the public operating system images, specify
       * the image by its family name. For example, specify
       * &lt;code&gt;family/debian-8&lt;/code&gt; to use the latest Debian 8 image:
       * &lt;code&gt;projects/debian-cloud/global/images/family/debian-8&lt;/code&gt;
       * Alternatively, use a specific version of a public operating system image:
       * &lt;code&gt;projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD&lt;/code&gt;
       * To create a disk with a private image that you created, specify the
       * image name in the following format:
       * &lt;code&gt;global/images/my-private-image&lt;/code&gt;
       * You can also specify a private image by its image family, which returns
       * the latest version of the image in that family. Replace the image name
       * with &lt;code&gt;family/family-name&lt;/code&gt;:
       * &lt;code&gt;global/images/family/my-private-family&lt;/code&gt;
       * If the source image is deleted later, this field will not be set.
       * </pre>
       *
       * <code>optional string source_image = 2;</code>
       */
      public Builder setSourceImage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sourceImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The source image to create this disk. When creating a new instance,
       * one of &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
       * &lt;code&gt;disks.source&lt;/code&gt; is required.
       * To create a disk with one of the public operating system images, specify
       * the image by its family name. For example, specify
       * &lt;code&gt;family/debian-8&lt;/code&gt; to use the latest Debian 8 image:
       * &lt;code&gt;projects/debian-cloud/global/images/family/debian-8&lt;/code&gt;
       * Alternatively, use a specific version of a public operating system image:
       * &lt;code&gt;projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD&lt;/code&gt;
       * To create a disk with a private image that you created, specify the
       * image name in the following format:
       * &lt;code&gt;global/images/my-private-image&lt;/code&gt;
       * You can also specify a private image by its image family, which returns
       * the latest version of the image in that family. Replace the image name
       * with &lt;code&gt;family/family-name&lt;/code&gt;:
       * &lt;code&gt;global/images/family/my-private-family&lt;/code&gt;
       * If the source image is deleted later, this field will not be set.
       * </pre>
       *
       * <code>optional string source_image = 2;</code>
       */
      public Builder clearSourceImage() {
        
        sourceImage_ = getDefaultInstance().getSourceImage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The source image to create this disk. When creating a new instance,
       * one of &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
       * &lt;code&gt;disks.source&lt;/code&gt; is required.
       * To create a disk with one of the public operating system images, specify
       * the image by its family name. For example, specify
       * &lt;code&gt;family/debian-8&lt;/code&gt; to use the latest Debian 8 image:
       * &lt;code&gt;projects/debian-cloud/global/images/family/debian-8&lt;/code&gt;
       * Alternatively, use a specific version of a public operating system image:
       * &lt;code&gt;projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD&lt;/code&gt;
       * To create a disk with a private image that you created, specify the
       * image name in the following format:
       * &lt;code&gt;global/images/my-private-image&lt;/code&gt;
       * You can also specify a private image by its image family, which returns
       * the latest version of the image in that family. Replace the image name
       * with &lt;code&gt;family/family-name&lt;/code&gt;:
       * &lt;code&gt;global/images/family/my-private-family&lt;/code&gt;
       * If the source image is deleted later, this field will not be set.
       * </pre>
       *
       * <code>optional string source_image = 2;</code>
       */
      public Builder setSourceImageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sourceImage_ = value;
        onChanged();
        return this;
      }

      private long diskSizeGb_ ;
      /**
       * <pre>
       * Specifies the size of the disk in base-2 GB.
       * </pre>
       *
       * <code>optional int64 disk_size_gb = 3;</code>
       */
      public long getDiskSizeGb() {
        return diskSizeGb_;
      }
      /**
       * <pre>
       * Specifies the size of the disk in base-2 GB.
       * </pre>
       *
       * <code>optional int64 disk_size_gb = 3;</code>
       */
      public Builder setDiskSizeGb(long value) {
        
        diskSizeGb_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the size of the disk in base-2 GB.
       * </pre>
       *
       * <code>optional int64 disk_size_gb = 3;</code>
       */
      public Builder clearDiskSizeGb() {
        
        diskSizeGb_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object diskType_ = "";
      /**
       * <pre>
       * Specifies the disk type to use to create the instance. If not specified,
       * the default is &lt;code&gt;pd-standard&lt;/code&gt;, specified using the full URL.
       * For example:
       * &lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/pd-standard&lt;/code&gt;
       * Other values include &lt;code&gt;pd-ssd&lt;/code&gt; and &lt;code&gt;local-ssd&lt;/code&gt;. If
       * you define this field, you can provide either the full or partial URL.
       * For example, the following are valid values:
       * &lt;ul&gt;
       *   &lt;li&gt;&lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       * &lt;/ul&gt;
       * Note that for InstanceTemplate, this is the name of the disk type, not
       * URL.
       * </pre>
       *
       * <code>optional string disk_type = 5;</code>
       */
      public java.lang.String getDiskType() {
        java.lang.Object ref = diskType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          diskType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the disk type to use to create the instance. If not specified,
       * the default is &lt;code&gt;pd-standard&lt;/code&gt;, specified using the full URL.
       * For example:
       * &lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/pd-standard&lt;/code&gt;
       * Other values include &lt;code&gt;pd-ssd&lt;/code&gt; and &lt;code&gt;local-ssd&lt;/code&gt;. If
       * you define this field, you can provide either the full or partial URL.
       * For example, the following are valid values:
       * &lt;ul&gt;
       *   &lt;li&gt;&lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       * &lt;/ul&gt;
       * Note that for InstanceTemplate, this is the name of the disk type, not
       * URL.
       * </pre>
       *
       * <code>optional string disk_type = 5;</code>
       */
      public com.google.protobuf.ByteString
          getDiskTypeBytes() {
        java.lang.Object ref = diskType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          diskType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the disk type to use to create the instance. If not specified,
       * the default is &lt;code&gt;pd-standard&lt;/code&gt;, specified using the full URL.
       * For example:
       * &lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/pd-standard&lt;/code&gt;
       * Other values include &lt;code&gt;pd-ssd&lt;/code&gt; and &lt;code&gt;local-ssd&lt;/code&gt;. If
       * you define this field, you can provide either the full or partial URL.
       * For example, the following are valid values:
       * &lt;ul&gt;
       *   &lt;li&gt;&lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       * &lt;/ul&gt;
       * Note that for InstanceTemplate, this is the name of the disk type, not
       * URL.
       * </pre>
       *
       * <code>optional string disk_type = 5;</code>
       */
      public Builder setDiskType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        diskType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the disk type to use to create the instance. If not specified,
       * the default is &lt;code&gt;pd-standard&lt;/code&gt;, specified using the full URL.
       * For example:
       * &lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/pd-standard&lt;/code&gt;
       * Other values include &lt;code&gt;pd-ssd&lt;/code&gt; and &lt;code&gt;local-ssd&lt;/code&gt;. If
       * you define this field, you can provide either the full or partial URL.
       * For example, the following are valid values:
       * &lt;ul&gt;
       *   &lt;li&gt;&lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       * &lt;/ul&gt;
       * Note that for InstanceTemplate, this is the name of the disk type, not
       * URL.
       * </pre>
       *
       * <code>optional string disk_type = 5;</code>
       */
      public Builder clearDiskType() {
        
        diskType_ = getDefaultInstance().getDiskType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the disk type to use to create the instance. If not specified,
       * the default is &lt;code&gt;pd-standard&lt;/code&gt;, specified using the full URL.
       * For example:
       * &lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/pd-standard&lt;/code&gt;
       * Other values include &lt;code&gt;pd-ssd&lt;/code&gt; and &lt;code&gt;local-ssd&lt;/code&gt;. If
       * you define this field, you can provide either the full or partial URL.
       * For example, the following are valid values:
       * &lt;ul&gt;
       *   &lt;li&gt;&lt;code&gt;https://www.googleapis.com/compute/v1/projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;projects/&lt;var class="apiparam"&gt;project&lt;/var&gt;/zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;&lt;span&gt;/diskTypes/&lt;/span&gt;&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       *   &lt;li&gt;&lt;code&gt;zones/&lt;var class="apiparam"&gt;zone&lt;/var&gt;/diskTypes/&lt;var class="apiparam"&gt;diskType&lt;/var&gt;&lt;/code&gt;&lt;/li&gt;
       * &lt;/ul&gt;
       * Note that for InstanceTemplate, this is the name of the disk type, not
       * URL.
       * </pre>
       *
       * <code>optional string disk_type = 5;</code>
       */
      public Builder setDiskTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        diskType_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:google.compute.v1.AttachedDisk.InitializeParams)
    }

    // @@protoc_insertion_point(class_scope:google.compute.v1.AttachedDisk.InitializeParams)
    private static final com.google.cloud.compute.v1.AttachedDisk.InitializeParams DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.cloud.compute.v1.AttachedDisk.InitializeParams();
    }

    public static com.google.cloud.compute.v1.AttachedDisk.InitializeParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InitializeParams>
        PARSER = new com.google.protobuf.AbstractParser<InitializeParams>() {
      public InitializeParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new InitializeParams(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InitializeParams> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InitializeParams> getParserForType() {
      return PARSER;
    }

    public com.google.cloud.compute.v1.AttachedDisk.InitializeParams getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int KIND_FIELD_NUMBER = 1000;
  private volatile java.lang.Object kind_;
  /**
   * <pre>
   * [Output Only] Type of the resource. Always
   * &lt;code&gt;compute#attachedDisk&lt;/code&gt; for attached disks.
   * </pre>
   *
   * <code>optional string kind = 1000;</code>
   */
  public java.lang.String getKind() {
    java.lang.Object ref = kind_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      kind_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * [Output Only] Type of the resource. Always
   * &lt;code&gt;compute#attachedDisk&lt;/code&gt; for attached disks.
   * </pre>
   *
   * <code>optional string kind = 1000;</code>
   */
  public com.google.protobuf.ByteString
      getKindBytes() {
    java.lang.Object ref = kind_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      kind_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TYPE_FIELD_NUMBER = 1;
  private int type_;
  /**
   * <pre>
   * Specifies the type of the disk, either &lt;code&gt;SCRATCH&lt;/code&gt; or
   * &lt;code&gt;PERSISTENT&lt;/code&gt;. If not specified, the default is
   * &lt;code&gt;PERSISTENT&lt;/code&gt;.
   * </pre>
   *
   * <code>optional .google.compute.v1.AttachedDisk.DiskType type = 1;</code>
   */
  public int getTypeValue() {
    return type_;
  }
  /**
   * <pre>
   * Specifies the type of the disk, either &lt;code&gt;SCRATCH&lt;/code&gt; or
   * &lt;code&gt;PERSISTENT&lt;/code&gt;. If not specified, the default is
   * &lt;code&gt;PERSISTENT&lt;/code&gt;.
   * </pre>
   *
   * <code>optional .google.compute.v1.AttachedDisk.DiskType type = 1;</code>
   */
  public com.google.cloud.compute.v1.AttachedDisk.DiskType getType() {
    com.google.cloud.compute.v1.AttachedDisk.DiskType result = com.google.cloud.compute.v1.AttachedDisk.DiskType.valueOf(type_);
    return result == null ? com.google.cloud.compute.v1.AttachedDisk.DiskType.UNRECOGNIZED : result;
  }

  public static final int MODE_FIELD_NUMBER = 2;
  private int mode_;
  /**
   * <pre>
   * The mode in which to attach this disk, either &lt;code&gt;READ_WRITE&lt;/code&gt; or
   * &lt;code&gt;READ_ONLY&lt;/code&gt;. If not specified, the default is to attach the disk
   * in &lt;code&gt;READ_WRITE&lt;/code&gt; mode.
   * </pre>
   *
   * <code>optional .google.compute.v1.AttachedDisk.DiskMode mode = 2;</code>
   */
  public int getModeValue() {
    return mode_;
  }
  /**
   * <pre>
   * The mode in which to attach this disk, either &lt;code&gt;READ_WRITE&lt;/code&gt; or
   * &lt;code&gt;READ_ONLY&lt;/code&gt;. If not specified, the default is to attach the disk
   * in &lt;code&gt;READ_WRITE&lt;/code&gt; mode.
   * </pre>
   *
   * <code>optional .google.compute.v1.AttachedDisk.DiskMode mode = 2;</code>
   */
  public com.google.cloud.compute.v1.AttachedDisk.DiskMode getMode() {
    com.google.cloud.compute.v1.AttachedDisk.DiskMode result = com.google.cloud.compute.v1.AttachedDisk.DiskMode.valueOf(mode_);
    return result == null ? com.google.cloud.compute.v1.AttachedDisk.DiskMode.UNRECOGNIZED : result;
  }

  public static final int SOURCE_FIELD_NUMBER = 3;
  private volatile java.lang.Object source_;
  /**
   * <pre>
   * Specifies a valid partial or full URL to an existing Persistent Disk
   * resource. When creating a new instance, one of
   * &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
   * &lt;code&gt;disks.source&lt;/code&gt; is required.
   * If desired, you can also attach existing non-root persistent disks using
   * this property. This field is only applicable for persistent disks.
   * Note that for InstanceTemplate, specify the disk name, not the URL for the
   * disk.
   * </pre>
   *
   * <code>optional string source = 3;</code>
   */
  public java.lang.String getSource() {
    java.lang.Object ref = source_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      source_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies a valid partial or full URL to an existing Persistent Disk
   * resource. When creating a new instance, one of
   * &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
   * &lt;code&gt;disks.source&lt;/code&gt; is required.
   * If desired, you can also attach existing non-root persistent disks using
   * this property. This field is only applicable for persistent disks.
   * Note that for InstanceTemplate, specify the disk name, not the URL for the
   * disk.
   * </pre>
   *
   * <code>optional string source = 3;</code>
   */
  public com.google.protobuf.ByteString
      getSourceBytes() {
    java.lang.Object ref = source_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      source_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DEVICE_NAME_FIELD_NUMBER = 4;
  private volatile java.lang.Object deviceName_;
  /**
   * <pre>
   * Specifies a unique device name of your choice that is reflected into the
   * &lt;code&gt;/dev/disk/by-id/google-*&lt;/code&gt; tree of a Linux operating system
   * running within the instance. This name can be used to reference the device
   * for mounting, resizing, and so on, from within the instance.
   * If not specified, the server chooses a default device name to apply to this
   * disk, in the form &lt;code&gt;persistent-disks-x&lt;/code&gt;, where x is a number
   * assigned by Google Compute Engine. This field is only applicable for
   * persistent disks.
   * </pre>
   *
   * <code>optional string device_name = 4;</code>
   */
  public java.lang.String getDeviceName() {
    java.lang.Object ref = deviceName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      deviceName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies a unique device name of your choice that is reflected into the
   * &lt;code&gt;/dev/disk/by-id/google-*&lt;/code&gt; tree of a Linux operating system
   * running within the instance. This name can be used to reference the device
   * for mounting, resizing, and so on, from within the instance.
   * If not specified, the server chooses a default device name to apply to this
   * disk, in the form &lt;code&gt;persistent-disks-x&lt;/code&gt;, where x is a number
   * assigned by Google Compute Engine. This field is only applicable for
   * persistent disks.
   * </pre>
   *
   * <code>optional string device_name = 4;</code>
   */
  public com.google.protobuf.ByteString
      getDeviceNameBytes() {
    java.lang.Object ref = deviceName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      deviceName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INDEX_FIELD_NUMBER = 5;
  private int index_;
  /**
   * <pre>
   * Assigns a zero-based index to this disk, where 0 is reserved for the boot
   * disk. For example, if you have many disks attached to an instance, each
   * disk would have a unique index number. If not specified, the server will
   * choose an appropriate value.
   * </pre>
   *
   * <code>optional int32 index = 5;</code>
   */
  public int getIndex() {
    return index_;
  }

  public static final int BOOT_FIELD_NUMBER = 6;
  private boolean boot_;
  /**
   * <pre>
   * Indicates that this is a boot disk. The virtual machine will use the first
   * partition of the disk for its root filesystem.
   * </pre>
   *
   * <code>optional bool boot = 6;</code>
   */
  public boolean getBoot() {
    return boot_;
  }

  public static final int INITIALIZE_PARAMS_FIELD_NUMBER = 7;
  private com.google.cloud.compute.v1.AttachedDisk.InitializeParams initializeParams_;
  /**
   * <pre>
   * [Input Only] Specifies the parameters for a new disk that will be created
   * alongside the new instance. Use initialization parameters to create boot
   * disks or local SSDs attached to the new instance.
   * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
   * you can only define one or the other, but not both.
   * </pre>
   *
   * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
   */
  public boolean hasInitializeParams() {
    return initializeParams_ != null;
  }
  /**
   * <pre>
   * [Input Only] Specifies the parameters for a new disk that will be created
   * alongside the new instance. Use initialization parameters to create boot
   * disks or local SSDs attached to the new instance.
   * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
   * you can only define one or the other, but not both.
   * </pre>
   *
   * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
   */
  public com.google.cloud.compute.v1.AttachedDisk.InitializeParams getInitializeParams() {
    return initializeParams_ == null ? com.google.cloud.compute.v1.AttachedDisk.InitializeParams.getDefaultInstance() : initializeParams_;
  }
  /**
   * <pre>
   * [Input Only] Specifies the parameters for a new disk that will be created
   * alongside the new instance. Use initialization parameters to create boot
   * disks or local SSDs attached to the new instance.
   * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
   * you can only define one or the other, but not both.
   * </pre>
   *
   * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
   */
  public com.google.cloud.compute.v1.AttachedDisk.InitializeParamsOrBuilder getInitializeParamsOrBuilder() {
    return getInitializeParams();
  }

  public static final int AUTO_DELETE_FIELD_NUMBER = 8;
  private boolean autoDelete_;
  /**
   * <pre>
   * Specifies whether the disk will be auto-deleted when the instance is deleted
   * (but not when the disk is detached from the instance).
   * </pre>
   *
   * <code>optional bool auto_delete = 8;</code>
   */
  public boolean getAutoDelete() {
    return autoDelete_;
  }

  public static final int LICENSES_FIELD_NUMBER = 9;
  private com.google.protobuf.LazyStringList licenses_;
  /**
   * <pre>
   * [Output Only] Any valid publicly visible licenses.
   * </pre>
   *
   * <code>repeated string licenses = 9;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getLicensesList() {
    return licenses_;
  }
  /**
   * <pre>
   * [Output Only] Any valid publicly visible licenses.
   * </pre>
   *
   * <code>repeated string licenses = 9;</code>
   */
  public int getLicensesCount() {
    return licenses_.size();
  }
  /**
   * <pre>
   * [Output Only] Any valid publicly visible licenses.
   * </pre>
   *
   * <code>repeated string licenses = 9;</code>
   */
  public java.lang.String getLicenses(int index) {
    return licenses_.get(index);
  }
  /**
   * <pre>
   * [Output Only] Any valid publicly visible licenses.
   * </pre>
   *
   * <code>repeated string licenses = 9;</code>
   */
  public com.google.protobuf.ByteString
      getLicensesBytes(int index) {
    return licenses_.getByteString(index);
  }

  public static final int INTERFACE_FIELD_NUMBER = 10;
  private int interface_;
  /**
   * <pre>
   * Specifies the disk interface to use for attaching this disk, which is
   * either &lt;code&gt;SCSI&lt;/code&gt; or &lt;code&gt;NVME&lt;/code&gt;. The default is
   * &lt;code&gt;SCSI&lt;/code&gt;. Persistent disks must always use SCSI and the request
   * will fail if you attempt to attach a persistent disk in any other format
   * than SCSI. Local SSDs can use either NVME or SCSI. For performance
   * characteristics of SCSI over NVMe, see
   * &lt;a href="/compute/docs/disks#localssds"&gt;Local SSD performance&lt;/a&gt;.
   * </pre>
   *
   * <code>optional .google.compute.v1.AttachedDisk.DiskInterface interface = 10;</code>
   */
  public int getInterfaceValue() {
    return interface_;
  }
  /**
   * <pre>
   * Specifies the disk interface to use for attaching this disk, which is
   * either &lt;code&gt;SCSI&lt;/code&gt; or &lt;code&gt;NVME&lt;/code&gt;. The default is
   * &lt;code&gt;SCSI&lt;/code&gt;. Persistent disks must always use SCSI and the request
   * will fail if you attempt to attach a persistent disk in any other format
   * than SCSI. Local SSDs can use either NVME or SCSI. For performance
   * characteristics of SCSI over NVMe, see
   * &lt;a href="/compute/docs/disks#localssds"&gt;Local SSD performance&lt;/a&gt;.
   * </pre>
   *
   * <code>optional .google.compute.v1.AttachedDisk.DiskInterface interface = 10;</code>
   */
  public com.google.cloud.compute.v1.AttachedDisk.DiskInterface getInterface() {
    com.google.cloud.compute.v1.AttachedDisk.DiskInterface result = com.google.cloud.compute.v1.AttachedDisk.DiskInterface.valueOf(interface_);
    return result == null ? com.google.cloud.compute.v1.AttachedDisk.DiskInterface.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (type_ != com.google.cloud.compute.v1.AttachedDisk.DiskType.SCRATCH.getNumber()) {
      output.writeEnum(1, type_);
    }
    if (mode_ != com.google.cloud.compute.v1.AttachedDisk.DiskMode.READ_WRITE.getNumber()) {
      output.writeEnum(2, mode_);
    }
    if (!getSourceBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, source_);
    }
    if (!getDeviceNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, deviceName_);
    }
    if (index_ != 0) {
      output.writeInt32(5, index_);
    }
    if (boot_ != false) {
      output.writeBool(6, boot_);
    }
    if (initializeParams_ != null) {
      output.writeMessage(7, getInitializeParams());
    }
    if (autoDelete_ != false) {
      output.writeBool(8, autoDelete_);
    }
    for (int i = 0; i < licenses_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, licenses_.getRaw(i));
    }
    if (interface_ != com.google.cloud.compute.v1.AttachedDisk.DiskInterface.SCSI.getNumber()) {
      output.writeEnum(10, interface_);
    }
    if (!getKindBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1000, kind_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (type_ != com.google.cloud.compute.v1.AttachedDisk.DiskType.SCRATCH.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, type_);
    }
    if (mode_ != com.google.cloud.compute.v1.AttachedDisk.DiskMode.READ_WRITE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, mode_);
    }
    if (!getSourceBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, source_);
    }
    if (!getDeviceNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, deviceName_);
    }
    if (index_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, index_);
    }
    if (boot_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, boot_);
    }
    if (initializeParams_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getInitializeParams());
    }
    if (autoDelete_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, autoDelete_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < licenses_.size(); i++) {
        dataSize += computeStringSizeNoTag(licenses_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getLicensesList().size();
    }
    if (interface_ != com.google.cloud.compute.v1.AttachedDisk.DiskInterface.SCSI.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(10, interface_);
    }
    if (!getKindBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1000, kind_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.compute.v1.AttachedDisk)) {
      return super.equals(obj);
    }
    com.google.cloud.compute.v1.AttachedDisk other = (com.google.cloud.compute.v1.AttachedDisk) obj;

    boolean result = true;
    result = result && getKind()
        .equals(other.getKind());
    result = result && type_ == other.type_;
    result = result && mode_ == other.mode_;
    result = result && getSource()
        .equals(other.getSource());
    result = result && getDeviceName()
        .equals(other.getDeviceName());
    result = result && (getIndex()
        == other.getIndex());
    result = result && (getBoot()
        == other.getBoot());
    result = result && (hasInitializeParams() == other.hasInitializeParams());
    if (hasInitializeParams()) {
      result = result && getInitializeParams()
          .equals(other.getInitializeParams());
    }
    result = result && (getAutoDelete()
        == other.getAutoDelete());
    result = result && getLicensesList()
        .equals(other.getLicensesList());
    result = result && interface_ == other.interface_;
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    hash = (37 * hash) + KIND_FIELD_NUMBER;
    hash = (53 * hash) + getKind().hashCode();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    hash = (37 * hash) + SOURCE_FIELD_NUMBER;
    hash = (53 * hash) + getSource().hashCode();
    hash = (37 * hash) + DEVICE_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getDeviceName().hashCode();
    hash = (37 * hash) + INDEX_FIELD_NUMBER;
    hash = (53 * hash) + getIndex();
    hash = (37 * hash) + BOOT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getBoot());
    if (hasInitializeParams()) {
      hash = (37 * hash) + INITIALIZE_PARAMS_FIELD_NUMBER;
      hash = (53 * hash) + getInitializeParams().hashCode();
    }
    hash = (37 * hash) + AUTO_DELETE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAutoDelete());
    if (getLicensesCount() > 0) {
      hash = (37 * hash) + LICENSES_FIELD_NUMBER;
      hash = (53 * hash) + getLicensesList().hashCode();
    }
    hash = (37 * hash) + INTERFACE_FIELD_NUMBER;
    hash = (53 * hash) + interface_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.compute.v1.AttachedDisk parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.compute.v1.AttachedDisk parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.compute.v1.AttachedDisk parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.compute.v1.AttachedDisk parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.compute.v1.AttachedDisk parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.compute.v1.AttachedDisk parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.compute.v1.AttachedDisk parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.compute.v1.AttachedDisk parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.compute.v1.AttachedDisk parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.compute.v1.AttachedDisk parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.compute.v1.AttachedDisk prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An instance-attached disk resource.
   * </pre>
   *
   * Protobuf type {@code google.compute.v1.AttachedDisk}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.compute.v1.AttachedDisk)
      com.google.cloud.compute.v1.AttachedDiskOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.compute.v1.AttachedDisk.class, com.google.cloud.compute.v1.AttachedDisk.Builder.class);
    }

    // Construct using com.google.cloud.compute.v1.AttachedDisk.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      kind_ = "";

      type_ = 0;

      mode_ = 0;

      source_ = "";

      deviceName_ = "";

      index_ = 0;

      boot_ = false;

      if (initializeParamsBuilder_ == null) {
        initializeParams_ = null;
      } else {
        initializeParams_ = null;
        initializeParamsBuilder_ = null;
      }
      autoDelete_ = false;

      licenses_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000200);
      interface_ = 0;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.compute.v1.ComputeInstances.internal_static_google_compute_v1_AttachedDisk_descriptor;
    }

    public com.google.cloud.compute.v1.AttachedDisk getDefaultInstanceForType() {
      return com.google.cloud.compute.v1.AttachedDisk.getDefaultInstance();
    }

    public com.google.cloud.compute.v1.AttachedDisk build() {
      com.google.cloud.compute.v1.AttachedDisk result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.cloud.compute.v1.AttachedDisk buildPartial() {
      com.google.cloud.compute.v1.AttachedDisk result = new com.google.cloud.compute.v1.AttachedDisk(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.kind_ = kind_;
      result.type_ = type_;
      result.mode_ = mode_;
      result.source_ = source_;
      result.deviceName_ = deviceName_;
      result.index_ = index_;
      result.boot_ = boot_;
      if (initializeParamsBuilder_ == null) {
        result.initializeParams_ = initializeParams_;
      } else {
        result.initializeParams_ = initializeParamsBuilder_.build();
      }
      result.autoDelete_ = autoDelete_;
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        licenses_ = licenses_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000200);
      }
      result.licenses_ = licenses_;
      result.interface_ = interface_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.compute.v1.AttachedDisk) {
        return mergeFrom((com.google.cloud.compute.v1.AttachedDisk)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.compute.v1.AttachedDisk other) {
      if (other == com.google.cloud.compute.v1.AttachedDisk.getDefaultInstance()) return this;
      if (!other.getKind().isEmpty()) {
        kind_ = other.kind_;
        onChanged();
      }
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      if (!other.getSource().isEmpty()) {
        source_ = other.source_;
        onChanged();
      }
      if (!other.getDeviceName().isEmpty()) {
        deviceName_ = other.deviceName_;
        onChanged();
      }
      if (other.getIndex() != 0) {
        setIndex(other.getIndex());
      }
      if (other.getBoot() != false) {
        setBoot(other.getBoot());
      }
      if (other.hasInitializeParams()) {
        mergeInitializeParams(other.getInitializeParams());
      }
      if (other.getAutoDelete() != false) {
        setAutoDelete(other.getAutoDelete());
      }
      if (!other.licenses_.isEmpty()) {
        if (licenses_.isEmpty()) {
          licenses_ = other.licenses_;
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          ensureLicensesIsMutable();
          licenses_.addAll(other.licenses_);
        }
        onChanged();
      }
      if (other.interface_ != 0) {
        setInterfaceValue(other.getInterfaceValue());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.compute.v1.AttachedDisk parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloud.compute.v1.AttachedDisk) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object kind_ = "";
    /**
     * <pre>
     * [Output Only] Type of the resource. Always
     * &lt;code&gt;compute#attachedDisk&lt;/code&gt; for attached disks.
     * </pre>
     *
     * <code>optional string kind = 1000;</code>
     */
    public java.lang.String getKind() {
      java.lang.Object ref = kind_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        kind_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * [Output Only] Type of the resource. Always
     * &lt;code&gt;compute#attachedDisk&lt;/code&gt; for attached disks.
     * </pre>
     *
     * <code>optional string kind = 1000;</code>
     */
    public com.google.protobuf.ByteString
        getKindBytes() {
      java.lang.Object ref = kind_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        kind_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * [Output Only] Type of the resource. Always
     * &lt;code&gt;compute#attachedDisk&lt;/code&gt; for attached disks.
     * </pre>
     *
     * <code>optional string kind = 1000;</code>
     */
    public Builder setKind(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Output Only] Type of the resource. Always
     * &lt;code&gt;compute#attachedDisk&lt;/code&gt; for attached disks.
     * </pre>
     *
     * <code>optional string kind = 1000;</code>
     */
    public Builder clearKind() {
      
      kind_ = getDefaultInstance().getKind();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Output Only] Type of the resource. Always
     * &lt;code&gt;compute#attachedDisk&lt;/code&gt; for attached disks.
     * </pre>
     *
     * <code>optional string kind = 1000;</code>
     */
    public Builder setKindBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      kind_ = value;
      onChanged();
      return this;
    }

    private int type_ = 0;
    /**
     * <pre>
     * Specifies the type of the disk, either &lt;code&gt;SCRATCH&lt;/code&gt; or
     * &lt;code&gt;PERSISTENT&lt;/code&gt;. If not specified, the default is
     * &lt;code&gt;PERSISTENT&lt;/code&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskType type = 1;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Specifies the type of the disk, either &lt;code&gt;SCRATCH&lt;/code&gt; or
     * &lt;code&gt;PERSISTENT&lt;/code&gt;. If not specified, the default is
     * &lt;code&gt;PERSISTENT&lt;/code&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskType type = 1;</code>
     */
    public Builder setTypeValue(int value) {
      type_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the type of the disk, either &lt;code&gt;SCRATCH&lt;/code&gt; or
     * &lt;code&gt;PERSISTENT&lt;/code&gt;. If not specified, the default is
     * &lt;code&gt;PERSISTENT&lt;/code&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskType type = 1;</code>
     */
    public com.google.cloud.compute.v1.AttachedDisk.DiskType getType() {
      com.google.cloud.compute.v1.AttachedDisk.DiskType result = com.google.cloud.compute.v1.AttachedDisk.DiskType.valueOf(type_);
      return result == null ? com.google.cloud.compute.v1.AttachedDisk.DiskType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Specifies the type of the disk, either &lt;code&gt;SCRATCH&lt;/code&gt; or
     * &lt;code&gt;PERSISTENT&lt;/code&gt;. If not specified, the default is
     * &lt;code&gt;PERSISTENT&lt;/code&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskType type = 1;</code>
     */
    public Builder setType(com.google.cloud.compute.v1.AttachedDisk.DiskType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the type of the disk, either &lt;code&gt;SCRATCH&lt;/code&gt; or
     * &lt;code&gt;PERSISTENT&lt;/code&gt;. If not specified, the default is
     * &lt;code&gt;PERSISTENT&lt;/code&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskType type = 1;</code>
     */
    public Builder clearType() {
      
      type_ = 0;
      onChanged();
      return this;
    }

    private int mode_ = 0;
    /**
     * <pre>
     * The mode in which to attach this disk, either &lt;code&gt;READ_WRITE&lt;/code&gt; or
     * &lt;code&gt;READ_ONLY&lt;/code&gt;. If not specified, the default is to attach the disk
     * in &lt;code&gt;READ_WRITE&lt;/code&gt; mode.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskMode mode = 2;</code>
     */
    public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     * The mode in which to attach this disk, either &lt;code&gt;READ_WRITE&lt;/code&gt; or
     * &lt;code&gt;READ_ONLY&lt;/code&gt;. If not specified, the default is to attach the disk
     * in &lt;code&gt;READ_WRITE&lt;/code&gt; mode.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskMode mode = 2;</code>
     */
    public Builder setModeValue(int value) {
      mode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The mode in which to attach this disk, either &lt;code&gt;READ_WRITE&lt;/code&gt; or
     * &lt;code&gt;READ_ONLY&lt;/code&gt;. If not specified, the default is to attach the disk
     * in &lt;code&gt;READ_WRITE&lt;/code&gt; mode.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskMode mode = 2;</code>
     */
    public com.google.cloud.compute.v1.AttachedDisk.DiskMode getMode() {
      com.google.cloud.compute.v1.AttachedDisk.DiskMode result = com.google.cloud.compute.v1.AttachedDisk.DiskMode.valueOf(mode_);
      return result == null ? com.google.cloud.compute.v1.AttachedDisk.DiskMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The mode in which to attach this disk, either &lt;code&gt;READ_WRITE&lt;/code&gt; or
     * &lt;code&gt;READ_ONLY&lt;/code&gt;. If not specified, the default is to attach the disk
     * in &lt;code&gt;READ_WRITE&lt;/code&gt; mode.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskMode mode = 2;</code>
     */
    public Builder setMode(com.google.cloud.compute.v1.AttachedDisk.DiskMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The mode in which to attach this disk, either &lt;code&gt;READ_WRITE&lt;/code&gt; or
     * &lt;code&gt;READ_ONLY&lt;/code&gt;. If not specified, the default is to attach the disk
     * in &lt;code&gt;READ_WRITE&lt;/code&gt; mode.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskMode mode = 2;</code>
     */
    public Builder clearMode() {
      
      mode_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object source_ = "";
    /**
     * <pre>
     * Specifies a valid partial or full URL to an existing Persistent Disk
     * resource. When creating a new instance, one of
     * &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
     * &lt;code&gt;disks.source&lt;/code&gt; is required.
     * If desired, you can also attach existing non-root persistent disks using
     * this property. This field is only applicable for persistent disks.
     * Note that for InstanceTemplate, specify the disk name, not the URL for the
     * disk.
     * </pre>
     *
     * <code>optional string source = 3;</code>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        source_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies a valid partial or full URL to an existing Persistent Disk
     * resource. When creating a new instance, one of
     * &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
     * &lt;code&gt;disks.source&lt;/code&gt; is required.
     * If desired, you can also attach existing non-root persistent disks using
     * this property. This field is only applicable for persistent disks.
     * Note that for InstanceTemplate, specify the disk name, not the URL for the
     * disk.
     * </pre>
     *
     * <code>optional string source = 3;</code>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies a valid partial or full URL to an existing Persistent Disk
     * resource. When creating a new instance, one of
     * &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
     * &lt;code&gt;disks.source&lt;/code&gt; is required.
     * If desired, you can also attach existing non-root persistent disks using
     * this property. This field is only applicable for persistent disks.
     * Note that for InstanceTemplate, specify the disk name, not the URL for the
     * disk.
     * </pre>
     *
     * <code>optional string source = 3;</code>
     */
    public Builder setSource(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      source_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a valid partial or full URL to an existing Persistent Disk
     * resource. When creating a new instance, one of
     * &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
     * &lt;code&gt;disks.source&lt;/code&gt; is required.
     * If desired, you can also attach existing non-root persistent disks using
     * this property. This field is only applicable for persistent disks.
     * Note that for InstanceTemplate, specify the disk name, not the URL for the
     * disk.
     * </pre>
     *
     * <code>optional string source = 3;</code>
     */
    public Builder clearSource() {
      
      source_ = getDefaultInstance().getSource();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a valid partial or full URL to an existing Persistent Disk
     * resource. When creating a new instance, one of
     * &lt;code&gt;initializeParams.sourceImage&lt;/code&gt; or
     * &lt;code&gt;disks.source&lt;/code&gt; is required.
     * If desired, you can also attach existing non-root persistent disks using
     * this property. This field is only applicable for persistent disks.
     * Note that for InstanceTemplate, specify the disk name, not the URL for the
     * disk.
     * </pre>
     *
     * <code>optional string source = 3;</code>
     */
    public Builder setSourceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      source_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object deviceName_ = "";
    /**
     * <pre>
     * Specifies a unique device name of your choice that is reflected into the
     * &lt;code&gt;/dev/disk/by-id/google-*&lt;/code&gt; tree of a Linux operating system
     * running within the instance. This name can be used to reference the device
     * for mounting, resizing, and so on, from within the instance.
     * If not specified, the server chooses a default device name to apply to this
     * disk, in the form &lt;code&gt;persistent-disks-x&lt;/code&gt;, where x is a number
     * assigned by Google Compute Engine. This field is only applicable for
     * persistent disks.
     * </pre>
     *
     * <code>optional string device_name = 4;</code>
     */
    public java.lang.String getDeviceName() {
      java.lang.Object ref = deviceName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deviceName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies a unique device name of your choice that is reflected into the
     * &lt;code&gt;/dev/disk/by-id/google-*&lt;/code&gt; tree of a Linux operating system
     * running within the instance. This name can be used to reference the device
     * for mounting, resizing, and so on, from within the instance.
     * If not specified, the server chooses a default device name to apply to this
     * disk, in the form &lt;code&gt;persistent-disks-x&lt;/code&gt;, where x is a number
     * assigned by Google Compute Engine. This field is only applicable for
     * persistent disks.
     * </pre>
     *
     * <code>optional string device_name = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDeviceNameBytes() {
      java.lang.Object ref = deviceName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deviceName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies a unique device name of your choice that is reflected into the
     * &lt;code&gt;/dev/disk/by-id/google-*&lt;/code&gt; tree of a Linux operating system
     * running within the instance. This name can be used to reference the device
     * for mounting, resizing, and so on, from within the instance.
     * If not specified, the server chooses a default device name to apply to this
     * disk, in the form &lt;code&gt;persistent-disks-x&lt;/code&gt;, where x is a number
     * assigned by Google Compute Engine. This field is only applicable for
     * persistent disks.
     * </pre>
     *
     * <code>optional string device_name = 4;</code>
     */
    public Builder setDeviceName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      deviceName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a unique device name of your choice that is reflected into the
     * &lt;code&gt;/dev/disk/by-id/google-*&lt;/code&gt; tree of a Linux operating system
     * running within the instance. This name can be used to reference the device
     * for mounting, resizing, and so on, from within the instance.
     * If not specified, the server chooses a default device name to apply to this
     * disk, in the form &lt;code&gt;persistent-disks-x&lt;/code&gt;, where x is a number
     * assigned by Google Compute Engine. This field is only applicable for
     * persistent disks.
     * </pre>
     *
     * <code>optional string device_name = 4;</code>
     */
    public Builder clearDeviceName() {
      
      deviceName_ = getDefaultInstance().getDeviceName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a unique device name of your choice that is reflected into the
     * &lt;code&gt;/dev/disk/by-id/google-*&lt;/code&gt; tree of a Linux operating system
     * running within the instance. This name can be used to reference the device
     * for mounting, resizing, and so on, from within the instance.
     * If not specified, the server chooses a default device name to apply to this
     * disk, in the form &lt;code&gt;persistent-disks-x&lt;/code&gt;, where x is a number
     * assigned by Google Compute Engine. This field is only applicable for
     * persistent disks.
     * </pre>
     *
     * <code>optional string device_name = 4;</code>
     */
    public Builder setDeviceNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      deviceName_ = value;
      onChanged();
      return this;
    }

    private int index_ ;
    /**
     * <pre>
     * Assigns a zero-based index to this disk, where 0 is reserved for the boot
     * disk. For example, if you have many disks attached to an instance, each
     * disk would have a unique index number. If not specified, the server will
     * choose an appropriate value.
     * </pre>
     *
     * <code>optional int32 index = 5;</code>
     */
    public int getIndex() {
      return index_;
    }
    /**
     * <pre>
     * Assigns a zero-based index to this disk, where 0 is reserved for the boot
     * disk. For example, if you have many disks attached to an instance, each
     * disk would have a unique index number. If not specified, the server will
     * choose an appropriate value.
     * </pre>
     *
     * <code>optional int32 index = 5;</code>
     */
    public Builder setIndex(int value) {
      
      index_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Assigns a zero-based index to this disk, where 0 is reserved for the boot
     * disk. For example, if you have many disks attached to an instance, each
     * disk would have a unique index number. If not specified, the server will
     * choose an appropriate value.
     * </pre>
     *
     * <code>optional int32 index = 5;</code>
     */
    public Builder clearIndex() {
      
      index_ = 0;
      onChanged();
      return this;
    }

    private boolean boot_ ;
    /**
     * <pre>
     * Indicates that this is a boot disk. The virtual machine will use the first
     * partition of the disk for its root filesystem.
     * </pre>
     *
     * <code>optional bool boot = 6;</code>
     */
    public boolean getBoot() {
      return boot_;
    }
    /**
     * <pre>
     * Indicates that this is a boot disk. The virtual machine will use the first
     * partition of the disk for its root filesystem.
     * </pre>
     *
     * <code>optional bool boot = 6;</code>
     */
    public Builder setBoot(boolean value) {
      
      boot_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates that this is a boot disk. The virtual machine will use the first
     * partition of the disk for its root filesystem.
     * </pre>
     *
     * <code>optional bool boot = 6;</code>
     */
    public Builder clearBoot() {
      
      boot_ = false;
      onChanged();
      return this;
    }

    private com.google.cloud.compute.v1.AttachedDisk.InitializeParams initializeParams_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.compute.v1.AttachedDisk.InitializeParams, com.google.cloud.compute.v1.AttachedDisk.InitializeParams.Builder, com.google.cloud.compute.v1.AttachedDisk.InitializeParamsOrBuilder> initializeParamsBuilder_;
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
     */
    public boolean hasInitializeParams() {
      return initializeParamsBuilder_ != null || initializeParams_ != null;
    }
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
     */
    public com.google.cloud.compute.v1.AttachedDisk.InitializeParams getInitializeParams() {
      if (initializeParamsBuilder_ == null) {
        return initializeParams_ == null ? com.google.cloud.compute.v1.AttachedDisk.InitializeParams.getDefaultInstance() : initializeParams_;
      } else {
        return initializeParamsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
     */
    public Builder setInitializeParams(com.google.cloud.compute.v1.AttachedDisk.InitializeParams value) {
      if (initializeParamsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        initializeParams_ = value;
        onChanged();
      } else {
        initializeParamsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
     */
    public Builder setInitializeParams(
        com.google.cloud.compute.v1.AttachedDisk.InitializeParams.Builder builderForValue) {
      if (initializeParamsBuilder_ == null) {
        initializeParams_ = builderForValue.build();
        onChanged();
      } else {
        initializeParamsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
     */
    public Builder mergeInitializeParams(com.google.cloud.compute.v1.AttachedDisk.InitializeParams value) {
      if (initializeParamsBuilder_ == null) {
        if (initializeParams_ != null) {
          initializeParams_ =
            com.google.cloud.compute.v1.AttachedDisk.InitializeParams.newBuilder(initializeParams_).mergeFrom(value).buildPartial();
        } else {
          initializeParams_ = value;
        }
        onChanged();
      } else {
        initializeParamsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
     */
    public Builder clearInitializeParams() {
      if (initializeParamsBuilder_ == null) {
        initializeParams_ = null;
        onChanged();
      } else {
        initializeParams_ = null;
        initializeParamsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
     */
    public com.google.cloud.compute.v1.AttachedDisk.InitializeParams.Builder getInitializeParamsBuilder() {
      
      onChanged();
      return getInitializeParamsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
     */
    public com.google.cloud.compute.v1.AttachedDisk.InitializeParamsOrBuilder getInitializeParamsOrBuilder() {
      if (initializeParamsBuilder_ != null) {
        return initializeParamsBuilder_.getMessageOrBuilder();
      } else {
        return initializeParams_ == null ?
            com.google.cloud.compute.v1.AttachedDisk.InitializeParams.getDefaultInstance() : initializeParams_;
      }
    }
    /**
     * <pre>
     * [Input Only] Specifies the parameters for a new disk that will be created
     * alongside the new instance. Use initialization parameters to create boot
     * disks or local SSDs attached to the new instance.
     * This property is mutually exclusive with the &lt;code&gt;source&lt;/code&gt; property;
     * you can only define one or the other, but not both.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.InitializeParams initialize_params = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.compute.v1.AttachedDisk.InitializeParams, com.google.cloud.compute.v1.AttachedDisk.InitializeParams.Builder, com.google.cloud.compute.v1.AttachedDisk.InitializeParamsOrBuilder> 
        getInitializeParamsFieldBuilder() {
      if (initializeParamsBuilder_ == null) {
        initializeParamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.compute.v1.AttachedDisk.InitializeParams, com.google.cloud.compute.v1.AttachedDisk.InitializeParams.Builder, com.google.cloud.compute.v1.AttachedDisk.InitializeParamsOrBuilder>(
                getInitializeParams(),
                getParentForChildren(),
                isClean());
        initializeParams_ = null;
      }
      return initializeParamsBuilder_;
    }

    private boolean autoDelete_ ;
    /**
     * <pre>
     * Specifies whether the disk will be auto-deleted when the instance is deleted
     * (but not when the disk is detached from the instance).
     * </pre>
     *
     * <code>optional bool auto_delete = 8;</code>
     */
    public boolean getAutoDelete() {
      return autoDelete_;
    }
    /**
     * <pre>
     * Specifies whether the disk will be auto-deleted when the instance is deleted
     * (but not when the disk is detached from the instance).
     * </pre>
     *
     * <code>optional bool auto_delete = 8;</code>
     */
    public Builder setAutoDelete(boolean value) {
      
      autoDelete_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies whether the disk will be auto-deleted when the instance is deleted
     * (but not when the disk is detached from the instance).
     * </pre>
     *
     * <code>optional bool auto_delete = 8;</code>
     */
    public Builder clearAutoDelete() {
      
      autoDelete_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList licenses_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureLicensesIsMutable() {
      if (!((bitField0_ & 0x00000200) == 0x00000200)) {
        licenses_ = new com.google.protobuf.LazyStringArrayList(licenses_);
        bitField0_ |= 0x00000200;
       }
    }
    /**
     * <pre>
     * [Output Only] Any valid publicly visible licenses.
     * </pre>
     *
     * <code>repeated string licenses = 9;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getLicensesList() {
      return licenses_.getUnmodifiableView();
    }
    /**
     * <pre>
     * [Output Only] Any valid publicly visible licenses.
     * </pre>
     *
     * <code>repeated string licenses = 9;</code>
     */
    public int getLicensesCount() {
      return licenses_.size();
    }
    /**
     * <pre>
     * [Output Only] Any valid publicly visible licenses.
     * </pre>
     *
     * <code>repeated string licenses = 9;</code>
     */
    public java.lang.String getLicenses(int index) {
      return licenses_.get(index);
    }
    /**
     * <pre>
     * [Output Only] Any valid publicly visible licenses.
     * </pre>
     *
     * <code>repeated string licenses = 9;</code>
     */
    public com.google.protobuf.ByteString
        getLicensesBytes(int index) {
      return licenses_.getByteString(index);
    }
    /**
     * <pre>
     * [Output Only] Any valid publicly visible licenses.
     * </pre>
     *
     * <code>repeated string licenses = 9;</code>
     */
    public Builder setLicenses(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureLicensesIsMutable();
      licenses_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Output Only] Any valid publicly visible licenses.
     * </pre>
     *
     * <code>repeated string licenses = 9;</code>
     */
    public Builder addLicenses(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureLicensesIsMutable();
      licenses_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Output Only] Any valid publicly visible licenses.
     * </pre>
     *
     * <code>repeated string licenses = 9;</code>
     */
    public Builder addAllLicenses(
        java.lang.Iterable<java.lang.String> values) {
      ensureLicensesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, licenses_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Output Only] Any valid publicly visible licenses.
     * </pre>
     *
     * <code>repeated string licenses = 9;</code>
     */
    public Builder clearLicenses() {
      licenses_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [Output Only] Any valid publicly visible licenses.
     * </pre>
     *
     * <code>repeated string licenses = 9;</code>
     */
    public Builder addLicensesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureLicensesIsMutable();
      licenses_.add(value);
      onChanged();
      return this;
    }

    private int interface_ = 0;
    /**
     * <pre>
     * Specifies the disk interface to use for attaching this disk, which is
     * either &lt;code&gt;SCSI&lt;/code&gt; or &lt;code&gt;NVME&lt;/code&gt;. The default is
     * &lt;code&gt;SCSI&lt;/code&gt;. Persistent disks must always use SCSI and the request
     * will fail if you attempt to attach a persistent disk in any other format
     * than SCSI. Local SSDs can use either NVME or SCSI. For performance
     * characteristics of SCSI over NVMe, see
     * &lt;a href="/compute/docs/disks#localssds"&gt;Local SSD performance&lt;/a&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskInterface interface = 10;</code>
     */
    public int getInterfaceValue() {
      return interface_;
    }
    /**
     * <pre>
     * Specifies the disk interface to use for attaching this disk, which is
     * either &lt;code&gt;SCSI&lt;/code&gt; or &lt;code&gt;NVME&lt;/code&gt;. The default is
     * &lt;code&gt;SCSI&lt;/code&gt;. Persistent disks must always use SCSI and the request
     * will fail if you attempt to attach a persistent disk in any other format
     * than SCSI. Local SSDs can use either NVME or SCSI. For performance
     * characteristics of SCSI over NVMe, see
     * &lt;a href="/compute/docs/disks#localssds"&gt;Local SSD performance&lt;/a&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskInterface interface = 10;</code>
     */
    public Builder setInterfaceValue(int value) {
      interface_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the disk interface to use for attaching this disk, which is
     * either &lt;code&gt;SCSI&lt;/code&gt; or &lt;code&gt;NVME&lt;/code&gt;. The default is
     * &lt;code&gt;SCSI&lt;/code&gt;. Persistent disks must always use SCSI and the request
     * will fail if you attempt to attach a persistent disk in any other format
     * than SCSI. Local SSDs can use either NVME or SCSI. For performance
     * characteristics of SCSI over NVMe, see
     * &lt;a href="/compute/docs/disks#localssds"&gt;Local SSD performance&lt;/a&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskInterface interface = 10;</code>
     */
    public com.google.cloud.compute.v1.AttachedDisk.DiskInterface getInterface() {
      com.google.cloud.compute.v1.AttachedDisk.DiskInterface result = com.google.cloud.compute.v1.AttachedDisk.DiskInterface.valueOf(interface_);
      return result == null ? com.google.cloud.compute.v1.AttachedDisk.DiskInterface.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Specifies the disk interface to use for attaching this disk, which is
     * either &lt;code&gt;SCSI&lt;/code&gt; or &lt;code&gt;NVME&lt;/code&gt;. The default is
     * &lt;code&gt;SCSI&lt;/code&gt;. Persistent disks must always use SCSI and the request
     * will fail if you attempt to attach a persistent disk in any other format
     * than SCSI. Local SSDs can use either NVME or SCSI. For performance
     * characteristics of SCSI over NVMe, see
     * &lt;a href="/compute/docs/disks#localssds"&gt;Local SSD performance&lt;/a&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskInterface interface = 10;</code>
     */
    public Builder setInterface(com.google.cloud.compute.v1.AttachedDisk.DiskInterface value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      interface_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the disk interface to use for attaching this disk, which is
     * either &lt;code&gt;SCSI&lt;/code&gt; or &lt;code&gt;NVME&lt;/code&gt;. The default is
     * &lt;code&gt;SCSI&lt;/code&gt;. Persistent disks must always use SCSI and the request
     * will fail if you attempt to attach a persistent disk in any other format
     * than SCSI. Local SSDs can use either NVME or SCSI. For performance
     * characteristics of SCSI over NVMe, see
     * &lt;a href="/compute/docs/disks#localssds"&gt;Local SSD performance&lt;/a&gt;.
     * </pre>
     *
     * <code>optional .google.compute.v1.AttachedDisk.DiskInterface interface = 10;</code>
     */
    public Builder clearInterface() {
      
      interface_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.compute.v1.AttachedDisk)
  }

  // @@protoc_insertion_point(class_scope:google.compute.v1.AttachedDisk)
  private static final com.google.cloud.compute.v1.AttachedDisk DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.compute.v1.AttachedDisk();
  }

  public static com.google.cloud.compute.v1.AttachedDisk getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AttachedDisk>
      PARSER = new com.google.protobuf.AbstractParser<AttachedDisk>() {
    public AttachedDisk parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new AttachedDisk(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<AttachedDisk> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AttachedDisk> getParserForType() {
    return PARSER;
  }

  public com.google.cloud.compute.v1.AttachedDisk getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

