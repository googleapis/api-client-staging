// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

package com.google.logging.v2;

/**
 * <pre>
 * The parameters to `UpdateSink`.
 * </pre>
 *
 * Protobuf type {@code google.logging.v2.UpdateSinkRequest}
 */
public  final class UpdateSinkRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.logging.v2.UpdateSinkRequest)
    UpdateSinkRequestOrBuilder {
  // Use UpdateSinkRequest.newBuilder() to construct.
  private UpdateSinkRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private UpdateSinkRequest() {
    sinkName_ = "";
    uniqueWriterIdentity_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private UpdateSinkRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            sinkName_ = s;
            break;
          }
          case 18: {
            com.google.logging.v2.LogSink.Builder subBuilder = null;
            if (sink_ != null) {
              subBuilder = sink_.toBuilder();
            }
            sink_ = input.readMessage(com.google.logging.v2.LogSink.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(sink_);
              sink_ = subBuilder.buildPartial();
            }

            break;
          }
          case 24: {

            uniqueWriterIdentity_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.logging.v2.LoggingConfigProto.internal_static_google_logging_v2_UpdateSinkRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.logging.v2.LoggingConfigProto.internal_static_google_logging_v2_UpdateSinkRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.logging.v2.UpdateSinkRequest.class, com.google.logging.v2.UpdateSinkRequest.Builder.class);
  }

  public static final int SINK_NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object sinkName_;
  /**
   * <pre>
   * Required. The full resource name of the sink to update, including the
   * parent resource and the sink identifier:
   *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
   *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
   *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
   * Example: `"projects/my-project-id/sinks/my-sink-id"`.
   * </pre>
   *
   * <code>optional string sink_name = 1;</code>
   */
  public java.lang.String getSinkName() {
    java.lang.Object ref = sinkName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      sinkName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The full resource name of the sink to update, including the
   * parent resource and the sink identifier:
   *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
   *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
   *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
   * Example: `"projects/my-project-id/sinks/my-sink-id"`.
   * </pre>
   *
   * <code>optional string sink_name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getSinkNameBytes() {
    java.lang.Object ref = sinkName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      sinkName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SINK_FIELD_NUMBER = 2;
  private com.google.logging.v2.LogSink sink_;
  /**
   * <pre>
   * Required. The updated sink, whose name is the same identifier that appears
   * as part of `sink_name`.  If `sink_name` does not exist, then
   * this method creates a new sink.
   * </pre>
   *
   * <code>optional .google.logging.v2.LogSink sink = 2;</code>
   */
  public boolean hasSink() {
    return sink_ != null;
  }
  /**
   * <pre>
   * Required. The updated sink, whose name is the same identifier that appears
   * as part of `sink_name`.  If `sink_name` does not exist, then
   * this method creates a new sink.
   * </pre>
   *
   * <code>optional .google.logging.v2.LogSink sink = 2;</code>
   */
  public com.google.logging.v2.LogSink getSink() {
    return sink_ == null ? com.google.logging.v2.LogSink.getDefaultInstance() : sink_;
  }
  /**
   * <pre>
   * Required. The updated sink, whose name is the same identifier that appears
   * as part of `sink_name`.  If `sink_name` does not exist, then
   * this method creates a new sink.
   * </pre>
   *
   * <code>optional .google.logging.v2.LogSink sink = 2;</code>
   */
  public com.google.logging.v2.LogSinkOrBuilder getSinkOrBuilder() {
    return getSink();
  }

  public static final int UNIQUE_WRITER_IDENTITY_FIELD_NUMBER = 3;
  private boolean uniqueWriterIdentity_;
  /**
   * <pre>
   * Optional. See
   * [sinks.create](/logging/docs/api/reference/rest/v2/projects.sinks/create)
   * for a description of this field.  When updating a sink, the effect of this
   * field on the value of `writer_identity` in the updated sink depends on both
   * the old and new values of this field:
   * +   If the old and new values of this field are both false or both true,
   *     then there is no change to the sink's `writer_identity`.
   * +   If the old value is false and the new value is true, then
   *     `writer_identity` is changed to a unique service account.
   * +   It is an error if the old value is true and the new value is false.
   * </pre>
   *
   * <code>optional bool unique_writer_identity = 3;</code>
   */
  public boolean getUniqueWriterIdentity() {
    return uniqueWriterIdentity_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getSinkNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sinkName_);
    }
    if (sink_ != null) {
      output.writeMessage(2, getSink());
    }
    if (uniqueWriterIdentity_ != false) {
      output.writeBool(3, uniqueWriterIdentity_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getSinkNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sinkName_);
    }
    if (sink_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSink());
    }
    if (uniqueWriterIdentity_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, uniqueWriterIdentity_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.logging.v2.UpdateSinkRequest)) {
      return super.equals(obj);
    }
    com.google.logging.v2.UpdateSinkRequest other = (com.google.logging.v2.UpdateSinkRequest) obj;

    boolean result = true;
    result = result && getSinkName()
        .equals(other.getSinkName());
    result = result && (hasSink() == other.hasSink());
    if (hasSink()) {
      result = result && getSink()
          .equals(other.getSink());
    }
    result = result && (getUniqueWriterIdentity()
        == other.getUniqueWriterIdentity());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    hash = (37 * hash) + SINK_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getSinkName().hashCode();
    if (hasSink()) {
      hash = (37 * hash) + SINK_FIELD_NUMBER;
      hash = (53 * hash) + getSink().hashCode();
    }
    hash = (37 * hash) + UNIQUE_WRITER_IDENTITY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getUniqueWriterIdentity());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.logging.v2.UpdateSinkRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.logging.v2.UpdateSinkRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.logging.v2.UpdateSinkRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.logging.v2.UpdateSinkRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.logging.v2.UpdateSinkRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.logging.v2.UpdateSinkRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.logging.v2.UpdateSinkRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.logging.v2.UpdateSinkRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.logging.v2.UpdateSinkRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.logging.v2.UpdateSinkRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.logging.v2.UpdateSinkRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The parameters to `UpdateSink`.
   * </pre>
   *
   * Protobuf type {@code google.logging.v2.UpdateSinkRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.logging.v2.UpdateSinkRequest)
      com.google.logging.v2.UpdateSinkRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.logging.v2.LoggingConfigProto.internal_static_google_logging_v2_UpdateSinkRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.logging.v2.LoggingConfigProto.internal_static_google_logging_v2_UpdateSinkRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.logging.v2.UpdateSinkRequest.class, com.google.logging.v2.UpdateSinkRequest.Builder.class);
    }

    // Construct using com.google.logging.v2.UpdateSinkRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      sinkName_ = "";

      if (sinkBuilder_ == null) {
        sink_ = null;
      } else {
        sink_ = null;
        sinkBuilder_ = null;
      }
      uniqueWriterIdentity_ = false;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.logging.v2.LoggingConfigProto.internal_static_google_logging_v2_UpdateSinkRequest_descriptor;
    }

    public com.google.logging.v2.UpdateSinkRequest getDefaultInstanceForType() {
      return com.google.logging.v2.UpdateSinkRequest.getDefaultInstance();
    }

    public com.google.logging.v2.UpdateSinkRequest build() {
      com.google.logging.v2.UpdateSinkRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.logging.v2.UpdateSinkRequest buildPartial() {
      com.google.logging.v2.UpdateSinkRequest result = new com.google.logging.v2.UpdateSinkRequest(this);
      result.sinkName_ = sinkName_;
      if (sinkBuilder_ == null) {
        result.sink_ = sink_;
      } else {
        result.sink_ = sinkBuilder_.build();
      }
      result.uniqueWriterIdentity_ = uniqueWriterIdentity_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.logging.v2.UpdateSinkRequest) {
        return mergeFrom((com.google.logging.v2.UpdateSinkRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.logging.v2.UpdateSinkRequest other) {
      if (other == com.google.logging.v2.UpdateSinkRequest.getDefaultInstance()) return this;
      if (!other.getSinkName().isEmpty()) {
        sinkName_ = other.sinkName_;
        onChanged();
      }
      if (other.hasSink()) {
        mergeSink(other.getSink());
      }
      if (other.getUniqueWriterIdentity() != false) {
        setUniqueWriterIdentity(other.getUniqueWriterIdentity());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.logging.v2.UpdateSinkRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.logging.v2.UpdateSinkRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object sinkName_ = "";
    /**
     * <pre>
     * Required. The full resource name of the sink to update, including the
     * parent resource and the sink identifier:
     *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
     *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
     *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
     *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
     * Example: `"projects/my-project-id/sinks/my-sink-id"`.
     * </pre>
     *
     * <code>optional string sink_name = 1;</code>
     */
    public java.lang.String getSinkName() {
      java.lang.Object ref = sinkName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sinkName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The full resource name of the sink to update, including the
     * parent resource and the sink identifier:
     *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
     *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
     *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
     *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
     * Example: `"projects/my-project-id/sinks/my-sink-id"`.
     * </pre>
     *
     * <code>optional string sink_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSinkNameBytes() {
      java.lang.Object ref = sinkName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sinkName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The full resource name of the sink to update, including the
     * parent resource and the sink identifier:
     *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
     *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
     *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
     *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
     * Example: `"projects/my-project-id/sinks/my-sink-id"`.
     * </pre>
     *
     * <code>optional string sink_name = 1;</code>
     */
    public Builder setSinkName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sinkName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The full resource name of the sink to update, including the
     * parent resource and the sink identifier:
     *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
     *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
     *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
     *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
     * Example: `"projects/my-project-id/sinks/my-sink-id"`.
     * </pre>
     *
     * <code>optional string sink_name = 1;</code>
     */
    public Builder clearSinkName() {
      
      sinkName_ = getDefaultInstance().getSinkName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The full resource name of the sink to update, including the
     * parent resource and the sink identifier:
     *     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
     *     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
     *     "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
     *     "folders/[FOLDER_ID]/sinks/[SINK_ID]"
     * Example: `"projects/my-project-id/sinks/my-sink-id"`.
     * </pre>
     *
     * <code>optional string sink_name = 1;</code>
     */
    public Builder setSinkNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      sinkName_ = value;
      onChanged();
      return this;
    }

    private com.google.logging.v2.LogSink sink_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.logging.v2.LogSink, com.google.logging.v2.LogSink.Builder, com.google.logging.v2.LogSinkOrBuilder> sinkBuilder_;
    /**
     * <pre>
     * Required. The updated sink, whose name is the same identifier that appears
     * as part of `sink_name`.  If `sink_name` does not exist, then
     * this method creates a new sink.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink sink = 2;</code>
     */
    public boolean hasSink() {
      return sinkBuilder_ != null || sink_ != null;
    }
    /**
     * <pre>
     * Required. The updated sink, whose name is the same identifier that appears
     * as part of `sink_name`.  If `sink_name` does not exist, then
     * this method creates a new sink.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink sink = 2;</code>
     */
    public com.google.logging.v2.LogSink getSink() {
      if (sinkBuilder_ == null) {
        return sink_ == null ? com.google.logging.v2.LogSink.getDefaultInstance() : sink_;
      } else {
        return sinkBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. The updated sink, whose name is the same identifier that appears
     * as part of `sink_name`.  If `sink_name` does not exist, then
     * this method creates a new sink.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink sink = 2;</code>
     */
    public Builder setSink(com.google.logging.v2.LogSink value) {
      if (sinkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sink_ = value;
        onChanged();
      } else {
        sinkBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. The updated sink, whose name is the same identifier that appears
     * as part of `sink_name`.  If `sink_name` does not exist, then
     * this method creates a new sink.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink sink = 2;</code>
     */
    public Builder setSink(
        com.google.logging.v2.LogSink.Builder builderForValue) {
      if (sinkBuilder_ == null) {
        sink_ = builderForValue.build();
        onChanged();
      } else {
        sinkBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Required. The updated sink, whose name is the same identifier that appears
     * as part of `sink_name`.  If `sink_name` does not exist, then
     * this method creates a new sink.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink sink = 2;</code>
     */
    public Builder mergeSink(com.google.logging.v2.LogSink value) {
      if (sinkBuilder_ == null) {
        if (sink_ != null) {
          sink_ =
            com.google.logging.v2.LogSink.newBuilder(sink_).mergeFrom(value).buildPartial();
        } else {
          sink_ = value;
        }
        onChanged();
      } else {
        sinkBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. The updated sink, whose name is the same identifier that appears
     * as part of `sink_name`.  If `sink_name` does not exist, then
     * this method creates a new sink.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink sink = 2;</code>
     */
    public Builder clearSink() {
      if (sinkBuilder_ == null) {
        sink_ = null;
        onChanged();
      } else {
        sink_ = null;
        sinkBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Required. The updated sink, whose name is the same identifier that appears
     * as part of `sink_name`.  If `sink_name` does not exist, then
     * this method creates a new sink.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink sink = 2;</code>
     */
    public com.google.logging.v2.LogSink.Builder getSinkBuilder() {
      
      onChanged();
      return getSinkFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. The updated sink, whose name is the same identifier that appears
     * as part of `sink_name`.  If `sink_name` does not exist, then
     * this method creates a new sink.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink sink = 2;</code>
     */
    public com.google.logging.v2.LogSinkOrBuilder getSinkOrBuilder() {
      if (sinkBuilder_ != null) {
        return sinkBuilder_.getMessageOrBuilder();
      } else {
        return sink_ == null ?
            com.google.logging.v2.LogSink.getDefaultInstance() : sink_;
      }
    }
    /**
     * <pre>
     * Required. The updated sink, whose name is the same identifier that appears
     * as part of `sink_name`.  If `sink_name` does not exist, then
     * this method creates a new sink.
     * </pre>
     *
     * <code>optional .google.logging.v2.LogSink sink = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.logging.v2.LogSink, com.google.logging.v2.LogSink.Builder, com.google.logging.v2.LogSinkOrBuilder> 
        getSinkFieldBuilder() {
      if (sinkBuilder_ == null) {
        sinkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.logging.v2.LogSink, com.google.logging.v2.LogSink.Builder, com.google.logging.v2.LogSinkOrBuilder>(
                getSink(),
                getParentForChildren(),
                isClean());
        sink_ = null;
      }
      return sinkBuilder_;
    }

    private boolean uniqueWriterIdentity_ ;
    /**
     * <pre>
     * Optional. See
     * [sinks.create](/logging/docs/api/reference/rest/v2/projects.sinks/create)
     * for a description of this field.  When updating a sink, the effect of this
     * field on the value of `writer_identity` in the updated sink depends on both
     * the old and new values of this field:
     * +   If the old and new values of this field are both false or both true,
     *     then there is no change to the sink's `writer_identity`.
     * +   If the old value is false and the new value is true, then
     *     `writer_identity` is changed to a unique service account.
     * +   It is an error if the old value is true and the new value is false.
     * </pre>
     *
     * <code>optional bool unique_writer_identity = 3;</code>
     */
    public boolean getUniqueWriterIdentity() {
      return uniqueWriterIdentity_;
    }
    /**
     * <pre>
     * Optional. See
     * [sinks.create](/logging/docs/api/reference/rest/v2/projects.sinks/create)
     * for a description of this field.  When updating a sink, the effect of this
     * field on the value of `writer_identity` in the updated sink depends on both
     * the old and new values of this field:
     * +   If the old and new values of this field are both false or both true,
     *     then there is no change to the sink's `writer_identity`.
     * +   If the old value is false and the new value is true, then
     *     `writer_identity` is changed to a unique service account.
     * +   It is an error if the old value is true and the new value is false.
     * </pre>
     *
     * <code>optional bool unique_writer_identity = 3;</code>
     */
    public Builder setUniqueWriterIdentity(boolean value) {
      
      uniqueWriterIdentity_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. See
     * [sinks.create](/logging/docs/api/reference/rest/v2/projects.sinks/create)
     * for a description of this field.  When updating a sink, the effect of this
     * field on the value of `writer_identity` in the updated sink depends on both
     * the old and new values of this field:
     * +   If the old and new values of this field are both false or both true,
     *     then there is no change to the sink's `writer_identity`.
     * +   If the old value is false and the new value is true, then
     *     `writer_identity` is changed to a unique service account.
     * +   It is an error if the old value is true and the new value is false.
     * </pre>
     *
     * <code>optional bool unique_writer_identity = 3;</code>
     */
    public Builder clearUniqueWriterIdentity() {
      
      uniqueWriterIdentity_ = false;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    public final Builder setSinkNameWithSinkNameOneof(com.google.logging.v2.SinkNameOneof value) {
      if (value == null) {
        return setSinkName("");
      }
      return setSinkName(value.toString());
    }
    
    public final com.google.logging.v2.SinkNameOneof getSinkNameAsSinkNameOneof() {
      java.lang.String str = getSinkName();
      if (str.isEmpty()) {
        return null;
      }
      return com.google.logging.v2.SinkNameOneof.parse(str);
    }
    // @@protoc_insertion_point(builder_scope:google.logging.v2.UpdateSinkRequest)
  }

  public final com.google.logging.v2.SinkNameOneof getSinkNameAsSinkNameOneof() {
    java.lang.String str = getSinkName();
    if (str.isEmpty()) {
      return null;
    }
    return com.google.logging.v2.SinkNameOneof.parse(str);
  }
  // @@protoc_insertion_point(class_scope:google.logging.v2.UpdateSinkRequest)
  private static final com.google.logging.v2.UpdateSinkRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.logging.v2.UpdateSinkRequest();
  }

  public static com.google.logging.v2.UpdateSinkRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UpdateSinkRequest>
      PARSER = new com.google.protobuf.AbstractParser<UpdateSinkRequest>() {
    public UpdateSinkRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new UpdateSinkRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<UpdateSinkRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<UpdateSinkRequest> getParserForType() {
    return PARSER;
  }

  public com.google.logging.v2.UpdateSinkRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

