// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_metrics.proto

package com.google.logging.v2;

public interface LogMetricOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.logging.v2.LogMetric)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. The client-assigned metric identifier.
   * Examples: `"error_count"`, `"nginx/requests"`.
   * Metric identifiers are limited to 100 characters and can include
   * only the following characters: `A-Z`, `a-z`, `0-9`, and the
   * special characters `_-.,+!*',()%/`.  The forward-slash character
   * (`/`) denotes a hierarchy of name pieces, and it cannot be the
   * first character of the name.
   * The metric identifier in this field must not be
   * [URL-encoded](https://en.wikipedia.org/wiki/Percent-encoding).
   * However, when the metric identifier appears as the `[METRIC_ID]`
   * part of a `metric_name` API parameter, then the metric identifier
   * must be URL-encoded. Example:
   * `"projects/my-project/metrics/nginx%2Frequests"`.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * Required. The client-assigned metric identifier.
   * Examples: `"error_count"`, `"nginx/requests"`.
   * Metric identifiers are limited to 100 characters and can include
   * only the following characters: `A-Z`, `a-z`, `0-9`, and the
   * special characters `_-.,+!*',()%/`.  The forward-slash character
   * (`/`) denotes a hierarchy of name pieces, and it cannot be the
   * first character of the name.
   * The metric identifier in this field must not be
   * [URL-encoded](https://en.wikipedia.org/wiki/Percent-encoding).
   * However, when the metric identifier appears as the `[METRIC_ID]`
   * part of a `metric_name` API parameter, then the metric identifier
   * must be URL-encoded. Example:
   * `"projects/my-project/metrics/nginx%2Frequests"`.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Optional. A description of this metric, which is used in documentation.
   * </pre>
   *
   * <code>string description = 2;</code>
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * Optional. A description of this metric, which is used in documentation.
   * </pre>
   *
   * <code>string description = 2;</code>
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * Required. An [advanced logs filter](/logging/docs/view/advanced_filters)
   * which is used to match log entries.
   * Example:
   *     "resource.type=gae_app AND severity&gt;=ERROR"
   * The maximum length of the filter is 20000 characters.
   * </pre>
   *
   * <code>string filter = 3;</code>
   */
  java.lang.String getFilter();
  /**
   * <pre>
   * Required. An [advanced logs filter](/logging/docs/view/advanced_filters)
   * which is used to match log entries.
   * Example:
   *     "resource.type=gae_app AND severity&gt;=ERROR"
   * The maximum length of the filter is 20000 characters.
   * </pre>
   *
   * <code>string filter = 3;</code>
   */
  com.google.protobuf.ByteString
      getFilterBytes();

  /**
   * <pre>
   * Output only. The API version that created or updated this metric.
   * The version also dictates the syntax of the filter expression. When a value
   * for this field is missing, the default value of V2 should be assumed.
   * </pre>
   *
   * <code>.google.logging.v2.LogMetric.ApiVersion version = 4;</code>
   */
  int getVersionValue();
  /**
   * <pre>
   * Output only. The API version that created or updated this metric.
   * The version also dictates the syntax of the filter expression. When a value
   * for this field is missing, the default value of V2 should be assumed.
   * </pre>
   *
   * <code>.google.logging.v2.LogMetric.ApiVersion version = 4;</code>
   */
  com.google.logging.v2.LogMetric.ApiVersion getVersion();
}
