// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

package com.google.privacy.dlp.v2beta1;

/**
 * <pre>
 * Configuration description of the scanning process.
 * When used with redactContent only info_types and min_likelihood are currently
 * used.
 * </pre>
 *
 * Protobuf type {@code google.privacy.dlp.v2beta1.InspectConfig}
 */
public  final class InspectConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2beta1.InspectConfig)
    InspectConfigOrBuilder {
  // Use InspectConfig.newBuilder() to construct.
  private InspectConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InspectConfig() {
    infoTypes_ = java.util.Collections.emptyList();
    minLikelihood_ = 0;
    maxFindings_ = 0;
    includeQuote_ = false;
    excludeTypes_ = false;
    infoTypeLimits_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private InspectConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              infoTypes_ = new java.util.ArrayList<com.google.privacy.dlp.v2beta1.InfoType>();
              mutable_bitField0_ |= 0x00000001;
            }
            infoTypes_.add(
                input.readMessage(com.google.privacy.dlp.v2beta1.InfoType.parser(), extensionRegistry));
            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            minLikelihood_ = rawValue;
            break;
          }
          case 24: {

            maxFindings_ = input.readInt32();
            break;
          }
          case 32: {

            includeQuote_ = input.readBool();
            break;
          }
          case 48: {

            excludeTypes_ = input.readBool();
            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              infoTypeLimits_ = new java.util.ArrayList<com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit>();
              mutable_bitField0_ |= 0x00000020;
            }
            infoTypeLimits_.add(
                input.readMessage(com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        infoTypes_ = java.util.Collections.unmodifiableList(infoTypes_);
      }
      if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
        infoTypeLimits_ = java.util.Collections.unmodifiableList(infoTypeLimits_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.privacy.dlp.v2beta1.InspectConfig.class, com.google.privacy.dlp.v2beta1.InspectConfig.Builder.class);
  }

  public interface InfoTypeLimitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type of information the findings limit applies to. Only one limit per
     * info_type should be provided. If InfoTypeLimit does not have an
     * info_type, the DLP API applies the limit against all info_types that are
     * found but not specified in another InfoTypeLimit.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
     */
    boolean hasInfoType();
    /**
     * <pre>
     * Type of information the findings limit applies to. Only one limit per
     * info_type should be provided. If InfoTypeLimit does not have an
     * info_type, the DLP API applies the limit against all info_types that are
     * found but not specified in another InfoTypeLimit.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
     */
    com.google.privacy.dlp.v2beta1.InfoType getInfoType();
    /**
     * <pre>
     * Type of information the findings limit applies to. Only one limit per
     * info_type should be provided. If InfoTypeLimit does not have an
     * info_type, the DLP API applies the limit against all info_types that are
     * found but not specified in another InfoTypeLimit.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
     */
    com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder getInfoTypeOrBuilder();

    /**
     * <pre>
     * Max findings limit for the given infoType.
     * </pre>
     *
     * <code>int32 max_findings = 2;</code>
     */
    int getMaxFindings();
  }
  /**
   * <pre>
   * Max findings configuration per info type, per content item or long running
   * operation.
   * </pre>
   *
   * Protobuf type {@code google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit}
   */
  public  static final class InfoTypeLimit extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
      InfoTypeLimitOrBuilder {
    // Use InfoTypeLimit.newBuilder() to construct.
    private InfoTypeLimit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InfoTypeLimit() {
      maxFindings_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private InfoTypeLimit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.privacy.dlp.v2beta1.InfoType.Builder subBuilder = null;
              if (infoType_ != null) {
                subBuilder = infoType_.toBuilder();
              }
              infoType_ = input.readMessage(com.google.privacy.dlp.v2beta1.InfoType.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(infoType_);
                infoType_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              maxFindings_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_InfoTypeLimit_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_InfoTypeLimit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.class, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder.class);
    }

    public static final int INFO_TYPE_FIELD_NUMBER = 1;
    private com.google.privacy.dlp.v2beta1.InfoType infoType_;
    /**
     * <pre>
     * Type of information the findings limit applies to. Only one limit per
     * info_type should be provided. If InfoTypeLimit does not have an
     * info_type, the DLP API applies the limit against all info_types that are
     * found but not specified in another InfoTypeLimit.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
     */
    public boolean hasInfoType() {
      return infoType_ != null;
    }
    /**
     * <pre>
     * Type of information the findings limit applies to. Only one limit per
     * info_type should be provided. If InfoTypeLimit does not have an
     * info_type, the DLP API applies the limit against all info_types that are
     * found but not specified in another InfoTypeLimit.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InfoType getInfoType() {
      return infoType_ == null ? com.google.privacy.dlp.v2beta1.InfoType.getDefaultInstance() : infoType_;
    }
    /**
     * <pre>
     * Type of information the findings limit applies to. Only one limit per
     * info_type should be provided. If InfoTypeLimit does not have an
     * info_type, the DLP API applies the limit against all info_types that are
     * found but not specified in another InfoTypeLimit.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder getInfoTypeOrBuilder() {
      return getInfoType();
    }

    public static final int MAX_FINDINGS_FIELD_NUMBER = 2;
    private int maxFindings_;
    /**
     * <pre>
     * Max findings limit for the given infoType.
     * </pre>
     *
     * <code>int32 max_findings = 2;</code>
     */
    public int getMaxFindings() {
      return maxFindings_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (infoType_ != null) {
        output.writeMessage(1, getInfoType());
      }
      if (maxFindings_ != 0) {
        output.writeInt32(2, maxFindings_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (infoType_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getInfoType());
      }
      if (maxFindings_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, maxFindings_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)) {
        return super.equals(obj);
      }
      com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit other = (com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit) obj;

      boolean result = true;
      result = result && (hasInfoType() == other.hasInfoType());
      if (hasInfoType()) {
        result = result && getInfoType()
            .equals(other.getInfoType());
      }
      result = result && (getMaxFindings()
          == other.getMaxFindings());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInfoType()) {
        hash = (37 * hash) + INFO_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getInfoType().hashCode();
      }
      hash = (37 * hash) + MAX_FINDINGS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxFindings();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Max findings configuration per info type, per content item or long running
     * operation.
     * </pre>
     *
     * Protobuf type {@code google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
        com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimitOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_InfoTypeLimit_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_InfoTypeLimit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.class, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder.class);
      }

      // Construct using com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (infoTypeBuilder_ == null) {
          infoType_ = null;
        } else {
          infoType_ = null;
          infoTypeBuilder_ = null;
        }
        maxFindings_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_InfoTypeLimit_descriptor;
      }

      public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit getDefaultInstanceForType() {
        return com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.getDefaultInstance();
      }

      public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit build() {
        com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit buildPartial() {
        com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit result = new com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit(this);
        if (infoTypeBuilder_ == null) {
          result.infoType_ = infoType_;
        } else {
          result.infoType_ = infoTypeBuilder_.build();
        }
        result.maxFindings_ = maxFindings_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit) {
          return mergeFrom((com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit other) {
        if (other == com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.getDefaultInstance()) return this;
        if (other.hasInfoType()) {
          mergeInfoType(other.getInfoType());
        }
        if (other.getMaxFindings() != 0) {
          setMaxFindings(other.getMaxFindings());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.privacy.dlp.v2beta1.InfoType infoType_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.privacy.dlp.v2beta1.InfoType, com.google.privacy.dlp.v2beta1.InfoType.Builder, com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder> infoTypeBuilder_;
      /**
       * <pre>
       * Type of information the findings limit applies to. Only one limit per
       * info_type should be provided. If InfoTypeLimit does not have an
       * info_type, the DLP API applies the limit against all info_types that are
       * found but not specified in another InfoTypeLimit.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
       */
      public boolean hasInfoType() {
        return infoTypeBuilder_ != null || infoType_ != null;
      }
      /**
       * <pre>
       * Type of information the findings limit applies to. Only one limit per
       * info_type should be provided. If InfoTypeLimit does not have an
       * info_type, the DLP API applies the limit against all info_types that are
       * found but not specified in another InfoTypeLimit.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
       */
      public com.google.privacy.dlp.v2beta1.InfoType getInfoType() {
        if (infoTypeBuilder_ == null) {
          return infoType_ == null ? com.google.privacy.dlp.v2beta1.InfoType.getDefaultInstance() : infoType_;
        } else {
          return infoTypeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Type of information the findings limit applies to. Only one limit per
       * info_type should be provided. If InfoTypeLimit does not have an
       * info_type, the DLP API applies the limit against all info_types that are
       * found but not specified in another InfoTypeLimit.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
       */
      public Builder setInfoType(com.google.privacy.dlp.v2beta1.InfoType value) {
        if (infoTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          infoType_ = value;
          onChanged();
        } else {
          infoTypeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Type of information the findings limit applies to. Only one limit per
       * info_type should be provided. If InfoTypeLimit does not have an
       * info_type, the DLP API applies the limit against all info_types that are
       * found but not specified in another InfoTypeLimit.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
       */
      public Builder setInfoType(
          com.google.privacy.dlp.v2beta1.InfoType.Builder builderForValue) {
        if (infoTypeBuilder_ == null) {
          infoType_ = builderForValue.build();
          onChanged();
        } else {
          infoTypeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Type of information the findings limit applies to. Only one limit per
       * info_type should be provided. If InfoTypeLimit does not have an
       * info_type, the DLP API applies the limit against all info_types that are
       * found but not specified in another InfoTypeLimit.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
       */
      public Builder mergeInfoType(com.google.privacy.dlp.v2beta1.InfoType value) {
        if (infoTypeBuilder_ == null) {
          if (infoType_ != null) {
            infoType_ =
              com.google.privacy.dlp.v2beta1.InfoType.newBuilder(infoType_).mergeFrom(value).buildPartial();
          } else {
            infoType_ = value;
          }
          onChanged();
        } else {
          infoTypeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Type of information the findings limit applies to. Only one limit per
       * info_type should be provided. If InfoTypeLimit does not have an
       * info_type, the DLP API applies the limit against all info_types that are
       * found but not specified in another InfoTypeLimit.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
       */
      public Builder clearInfoType() {
        if (infoTypeBuilder_ == null) {
          infoType_ = null;
          onChanged();
        } else {
          infoType_ = null;
          infoTypeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Type of information the findings limit applies to. Only one limit per
       * info_type should be provided. If InfoTypeLimit does not have an
       * info_type, the DLP API applies the limit against all info_types that are
       * found but not specified in another InfoTypeLimit.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
       */
      public com.google.privacy.dlp.v2beta1.InfoType.Builder getInfoTypeBuilder() {
        
        onChanged();
        return getInfoTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Type of information the findings limit applies to. Only one limit per
       * info_type should be provided. If InfoTypeLimit does not have an
       * info_type, the DLP API applies the limit against all info_types that are
       * found but not specified in another InfoTypeLimit.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
       */
      public com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder getInfoTypeOrBuilder() {
        if (infoTypeBuilder_ != null) {
          return infoTypeBuilder_.getMessageOrBuilder();
        } else {
          return infoType_ == null ?
              com.google.privacy.dlp.v2beta1.InfoType.getDefaultInstance() : infoType_;
        }
      }
      /**
       * <pre>
       * Type of information the findings limit applies to. Only one limit per
       * info_type should be provided. If InfoTypeLimit does not have an
       * info_type, the DLP API applies the limit against all info_types that are
       * found but not specified in another InfoTypeLimit.
       * </pre>
       *
       * <code>.google.privacy.dlp.v2beta1.InfoType info_type = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.privacy.dlp.v2beta1.InfoType, com.google.privacy.dlp.v2beta1.InfoType.Builder, com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder> 
          getInfoTypeFieldBuilder() {
        if (infoTypeBuilder_ == null) {
          infoTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.privacy.dlp.v2beta1.InfoType, com.google.privacy.dlp.v2beta1.InfoType.Builder, com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder>(
                  getInfoType(),
                  getParentForChildren(),
                  isClean());
          infoType_ = null;
        }
        return infoTypeBuilder_;
      }

      private int maxFindings_ ;
      /**
       * <pre>
       * Max findings limit for the given infoType.
       * </pre>
       *
       * <code>int32 max_findings = 2;</code>
       */
      public int getMaxFindings() {
        return maxFindings_;
      }
      /**
       * <pre>
       * Max findings limit for the given infoType.
       * </pre>
       *
       * <code>int32 max_findings = 2;</code>
       */
      public Builder setMaxFindings(int value) {
        
        maxFindings_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Max findings limit for the given infoType.
       * </pre>
       *
       * <code>int32 max_findings = 2;</code>
       */
      public Builder clearMaxFindings() {
        
        maxFindings_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
    }

    // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
    private static final com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit();
    }

    public static com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InfoTypeLimit>
        PARSER = new com.google.protobuf.AbstractParser<InfoTypeLimit>() {
      public InfoTypeLimit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new InfoTypeLimit(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InfoTypeLimit> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InfoTypeLimit> getParserForType() {
      return PARSER;
    }

    public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int INFO_TYPES_FIELD_NUMBER = 1;
  private java.util.List<com.google.privacy.dlp.v2beta1.InfoType> infoTypes_;
  /**
   * <pre>
   * Restricts what info_types to look for. The values must correspond to
   * InfoType values returned by ListInfoTypes or found in documentation.
   * Empty info_types runs all enabled detectors.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
   */
  public java.util.List<com.google.privacy.dlp.v2beta1.InfoType> getInfoTypesList() {
    return infoTypes_;
  }
  /**
   * <pre>
   * Restricts what info_types to look for. The values must correspond to
   * InfoType values returned by ListInfoTypes or found in documentation.
   * Empty info_types runs all enabled detectors.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
   */
  public java.util.List<? extends com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder> 
      getInfoTypesOrBuilderList() {
    return infoTypes_;
  }
  /**
   * <pre>
   * Restricts what info_types to look for. The values must correspond to
   * InfoType values returned by ListInfoTypes or found in documentation.
   * Empty info_types runs all enabled detectors.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
   */
  public int getInfoTypesCount() {
    return infoTypes_.size();
  }
  /**
   * <pre>
   * Restricts what info_types to look for. The values must correspond to
   * InfoType values returned by ListInfoTypes or found in documentation.
   * Empty info_types runs all enabled detectors.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
   */
  public com.google.privacy.dlp.v2beta1.InfoType getInfoTypes(int index) {
    return infoTypes_.get(index);
  }
  /**
   * <pre>
   * Restricts what info_types to look for. The values must correspond to
   * InfoType values returned by ListInfoTypes or found in documentation.
   * Empty info_types runs all enabled detectors.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
   */
  public com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder getInfoTypesOrBuilder(
      int index) {
    return infoTypes_.get(index);
  }

  public static final int MIN_LIKELIHOOD_FIELD_NUMBER = 2;
  private int minLikelihood_;
  /**
   * <pre>
   * Only returns findings equal or above this threshold.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
   */
  public int getMinLikelihoodValue() {
    return minLikelihood_;
  }
  /**
   * <pre>
   * Only returns findings equal or above this threshold.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
   */
  public com.google.privacy.dlp.v2beta1.Likelihood getMinLikelihood() {
    com.google.privacy.dlp.v2beta1.Likelihood result = com.google.privacy.dlp.v2beta1.Likelihood.valueOf(minLikelihood_);
    return result == null ? com.google.privacy.dlp.v2beta1.Likelihood.UNRECOGNIZED : result;
  }

  public static final int MAX_FINDINGS_FIELD_NUMBER = 3;
  private int maxFindings_;
  /**
   * <pre>
   * Limits the number of findings per content item or long running operation.
   * </pre>
   *
   * <code>int32 max_findings = 3;</code>
   */
  public int getMaxFindings() {
    return maxFindings_;
  }

  public static final int INCLUDE_QUOTE_FIELD_NUMBER = 4;
  private boolean includeQuote_;
  /**
   * <pre>
   * When true, a contextual quote from the data that triggered a finding is
   * included in the response; see Finding.quote.
   * </pre>
   *
   * <code>bool include_quote = 4;</code>
   */
  public boolean getIncludeQuote() {
    return includeQuote_;
  }

  public static final int EXCLUDE_TYPES_FIELD_NUMBER = 6;
  private boolean excludeTypes_;
  /**
   * <pre>
   * When true, excludes type information of the findings.
   * </pre>
   *
   * <code>bool exclude_types = 6;</code>
   */
  public boolean getExcludeTypes() {
    return excludeTypes_;
  }

  public static final int INFO_TYPE_LIMITS_FIELD_NUMBER = 7;
  private java.util.List<com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit> infoTypeLimits_;
  /**
   * <pre>
   * Configuration of findings limit given for specified info types.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
   */
  public java.util.List<com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit> getInfoTypeLimitsList() {
    return infoTypeLimits_;
  }
  /**
   * <pre>
   * Configuration of findings limit given for specified info types.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
   */
  public java.util.List<? extends com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimitOrBuilder> 
      getInfoTypeLimitsOrBuilderList() {
    return infoTypeLimits_;
  }
  /**
   * <pre>
   * Configuration of findings limit given for specified info types.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
   */
  public int getInfoTypeLimitsCount() {
    return infoTypeLimits_.size();
  }
  /**
   * <pre>
   * Configuration of findings limit given for specified info types.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
   */
  public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit getInfoTypeLimits(int index) {
    return infoTypeLimits_.get(index);
  }
  /**
   * <pre>
   * Configuration of findings limit given for specified info types.
   * </pre>
   *
   * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
   */
  public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimitOrBuilder getInfoTypeLimitsOrBuilder(
      int index) {
    return infoTypeLimits_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < infoTypes_.size(); i++) {
      output.writeMessage(1, infoTypes_.get(i));
    }
    if (minLikelihood_ != com.google.privacy.dlp.v2beta1.Likelihood.LIKELIHOOD_UNSPECIFIED.getNumber()) {
      output.writeEnum(2, minLikelihood_);
    }
    if (maxFindings_ != 0) {
      output.writeInt32(3, maxFindings_);
    }
    if (includeQuote_ != false) {
      output.writeBool(4, includeQuote_);
    }
    if (excludeTypes_ != false) {
      output.writeBool(6, excludeTypes_);
    }
    for (int i = 0; i < infoTypeLimits_.size(); i++) {
      output.writeMessage(7, infoTypeLimits_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < infoTypes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, infoTypes_.get(i));
    }
    if (minLikelihood_ != com.google.privacy.dlp.v2beta1.Likelihood.LIKELIHOOD_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, minLikelihood_);
    }
    if (maxFindings_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, maxFindings_);
    }
    if (includeQuote_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, includeQuote_);
    }
    if (excludeTypes_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, excludeTypes_);
    }
    for (int i = 0; i < infoTypeLimits_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, infoTypeLimits_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.privacy.dlp.v2beta1.InspectConfig)) {
      return super.equals(obj);
    }
    com.google.privacy.dlp.v2beta1.InspectConfig other = (com.google.privacy.dlp.v2beta1.InspectConfig) obj;

    boolean result = true;
    result = result && getInfoTypesList()
        .equals(other.getInfoTypesList());
    result = result && minLikelihood_ == other.minLikelihood_;
    result = result && (getMaxFindings()
        == other.getMaxFindings());
    result = result && (getIncludeQuote()
        == other.getIncludeQuote());
    result = result && (getExcludeTypes()
        == other.getExcludeTypes());
    result = result && getInfoTypeLimitsList()
        .equals(other.getInfoTypeLimitsList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getInfoTypesCount() > 0) {
      hash = (37 * hash) + INFO_TYPES_FIELD_NUMBER;
      hash = (53 * hash) + getInfoTypesList().hashCode();
    }
    hash = (37 * hash) + MIN_LIKELIHOOD_FIELD_NUMBER;
    hash = (53 * hash) + minLikelihood_;
    hash = (37 * hash) + MAX_FINDINGS_FIELD_NUMBER;
    hash = (53 * hash) + getMaxFindings();
    hash = (37 * hash) + INCLUDE_QUOTE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIncludeQuote());
    hash = (37 * hash) + EXCLUDE_TYPES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getExcludeTypes());
    if (getInfoTypeLimitsCount() > 0) {
      hash = (37 * hash) + INFO_TYPE_LIMITS_FIELD_NUMBER;
      hash = (53 * hash) + getInfoTypeLimitsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.privacy.dlp.v2beta1.InspectConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.privacy.dlp.v2beta1.InspectConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration description of the scanning process.
   * When used with redactContent only info_types and min_likelihood are currently
   * used.
   * </pre>
   *
   * Protobuf type {@code google.privacy.dlp.v2beta1.InspectConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2beta1.InspectConfig)
      com.google.privacy.dlp.v2beta1.InspectConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.privacy.dlp.v2beta1.InspectConfig.class, com.google.privacy.dlp.v2beta1.InspectConfig.Builder.class);
    }

    // Construct using com.google.privacy.dlp.v2beta1.InspectConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getInfoTypesFieldBuilder();
        getInfoTypeLimitsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (infoTypesBuilder_ == null) {
        infoTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        infoTypesBuilder_.clear();
      }
      minLikelihood_ = 0;

      maxFindings_ = 0;

      includeQuote_ = false;

      excludeTypes_ = false;

      if (infoTypeLimitsBuilder_ == null) {
        infoTypeLimits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
      } else {
        infoTypeLimitsBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_InspectConfig_descriptor;
    }

    public com.google.privacy.dlp.v2beta1.InspectConfig getDefaultInstanceForType() {
      return com.google.privacy.dlp.v2beta1.InspectConfig.getDefaultInstance();
    }

    public com.google.privacy.dlp.v2beta1.InspectConfig build() {
      com.google.privacy.dlp.v2beta1.InspectConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.privacy.dlp.v2beta1.InspectConfig buildPartial() {
      com.google.privacy.dlp.v2beta1.InspectConfig result = new com.google.privacy.dlp.v2beta1.InspectConfig(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (infoTypesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          infoTypes_ = java.util.Collections.unmodifiableList(infoTypes_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.infoTypes_ = infoTypes_;
      } else {
        result.infoTypes_ = infoTypesBuilder_.build();
      }
      result.minLikelihood_ = minLikelihood_;
      result.maxFindings_ = maxFindings_;
      result.includeQuote_ = includeQuote_;
      result.excludeTypes_ = excludeTypes_;
      if (infoTypeLimitsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          infoTypeLimits_ = java.util.Collections.unmodifiableList(infoTypeLimits_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.infoTypeLimits_ = infoTypeLimits_;
      } else {
        result.infoTypeLimits_ = infoTypeLimitsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.privacy.dlp.v2beta1.InspectConfig) {
        return mergeFrom((com.google.privacy.dlp.v2beta1.InspectConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.privacy.dlp.v2beta1.InspectConfig other) {
      if (other == com.google.privacy.dlp.v2beta1.InspectConfig.getDefaultInstance()) return this;
      if (infoTypesBuilder_ == null) {
        if (!other.infoTypes_.isEmpty()) {
          if (infoTypes_.isEmpty()) {
            infoTypes_ = other.infoTypes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureInfoTypesIsMutable();
            infoTypes_.addAll(other.infoTypes_);
          }
          onChanged();
        }
      } else {
        if (!other.infoTypes_.isEmpty()) {
          if (infoTypesBuilder_.isEmpty()) {
            infoTypesBuilder_.dispose();
            infoTypesBuilder_ = null;
            infoTypes_ = other.infoTypes_;
            bitField0_ = (bitField0_ & ~0x00000001);
            infoTypesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInfoTypesFieldBuilder() : null;
          } else {
            infoTypesBuilder_.addAllMessages(other.infoTypes_);
          }
        }
      }
      if (other.minLikelihood_ != 0) {
        setMinLikelihoodValue(other.getMinLikelihoodValue());
      }
      if (other.getMaxFindings() != 0) {
        setMaxFindings(other.getMaxFindings());
      }
      if (other.getIncludeQuote() != false) {
        setIncludeQuote(other.getIncludeQuote());
      }
      if (other.getExcludeTypes() != false) {
        setExcludeTypes(other.getExcludeTypes());
      }
      if (infoTypeLimitsBuilder_ == null) {
        if (!other.infoTypeLimits_.isEmpty()) {
          if (infoTypeLimits_.isEmpty()) {
            infoTypeLimits_ = other.infoTypeLimits_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureInfoTypeLimitsIsMutable();
            infoTypeLimits_.addAll(other.infoTypeLimits_);
          }
          onChanged();
        }
      } else {
        if (!other.infoTypeLimits_.isEmpty()) {
          if (infoTypeLimitsBuilder_.isEmpty()) {
            infoTypeLimitsBuilder_.dispose();
            infoTypeLimitsBuilder_ = null;
            infoTypeLimits_ = other.infoTypeLimits_;
            bitField0_ = (bitField0_ & ~0x00000020);
            infoTypeLimitsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInfoTypeLimitsFieldBuilder() : null;
          } else {
            infoTypeLimitsBuilder_.addAllMessages(other.infoTypeLimits_);
          }
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.privacy.dlp.v2beta1.InspectConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.privacy.dlp.v2beta1.InspectConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.privacy.dlp.v2beta1.InfoType> infoTypes_ =
      java.util.Collections.emptyList();
    private void ensureInfoTypesIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        infoTypes_ = new java.util.ArrayList<com.google.privacy.dlp.v2beta1.InfoType>(infoTypes_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.InfoType, com.google.privacy.dlp.v2beta1.InfoType.Builder, com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder> infoTypesBuilder_;

    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public java.util.List<com.google.privacy.dlp.v2beta1.InfoType> getInfoTypesList() {
      if (infoTypesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(infoTypes_);
      } else {
        return infoTypesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public int getInfoTypesCount() {
      if (infoTypesBuilder_ == null) {
        return infoTypes_.size();
      } else {
        return infoTypesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InfoType getInfoTypes(int index) {
      if (infoTypesBuilder_ == null) {
        return infoTypes_.get(index);
      } else {
        return infoTypesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public Builder setInfoTypes(
        int index, com.google.privacy.dlp.v2beta1.InfoType value) {
      if (infoTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInfoTypesIsMutable();
        infoTypes_.set(index, value);
        onChanged();
      } else {
        infoTypesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public Builder setInfoTypes(
        int index, com.google.privacy.dlp.v2beta1.InfoType.Builder builderForValue) {
      if (infoTypesBuilder_ == null) {
        ensureInfoTypesIsMutable();
        infoTypes_.set(index, builderForValue.build());
        onChanged();
      } else {
        infoTypesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public Builder addInfoTypes(com.google.privacy.dlp.v2beta1.InfoType value) {
      if (infoTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInfoTypesIsMutable();
        infoTypes_.add(value);
        onChanged();
      } else {
        infoTypesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public Builder addInfoTypes(
        int index, com.google.privacy.dlp.v2beta1.InfoType value) {
      if (infoTypesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInfoTypesIsMutable();
        infoTypes_.add(index, value);
        onChanged();
      } else {
        infoTypesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public Builder addInfoTypes(
        com.google.privacy.dlp.v2beta1.InfoType.Builder builderForValue) {
      if (infoTypesBuilder_ == null) {
        ensureInfoTypesIsMutable();
        infoTypes_.add(builderForValue.build());
        onChanged();
      } else {
        infoTypesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public Builder addInfoTypes(
        int index, com.google.privacy.dlp.v2beta1.InfoType.Builder builderForValue) {
      if (infoTypesBuilder_ == null) {
        ensureInfoTypesIsMutable();
        infoTypes_.add(index, builderForValue.build());
        onChanged();
      } else {
        infoTypesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public Builder addAllInfoTypes(
        java.lang.Iterable<? extends com.google.privacy.dlp.v2beta1.InfoType> values) {
      if (infoTypesBuilder_ == null) {
        ensureInfoTypesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, infoTypes_);
        onChanged();
      } else {
        infoTypesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public Builder clearInfoTypes() {
      if (infoTypesBuilder_ == null) {
        infoTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        infoTypesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public Builder removeInfoTypes(int index) {
      if (infoTypesBuilder_ == null) {
        ensureInfoTypesIsMutable();
        infoTypes_.remove(index);
        onChanged();
      } else {
        infoTypesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InfoType.Builder getInfoTypesBuilder(
        int index) {
      return getInfoTypesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder getInfoTypesOrBuilder(
        int index) {
      if (infoTypesBuilder_ == null) {
        return infoTypes_.get(index);  } else {
        return infoTypesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public java.util.List<? extends com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder> 
         getInfoTypesOrBuilderList() {
      if (infoTypesBuilder_ != null) {
        return infoTypesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(infoTypes_);
      }
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InfoType.Builder addInfoTypesBuilder() {
      return getInfoTypesFieldBuilder().addBuilder(
          com.google.privacy.dlp.v2beta1.InfoType.getDefaultInstance());
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InfoType.Builder addInfoTypesBuilder(
        int index) {
      return getInfoTypesFieldBuilder().addBuilder(
          index, com.google.privacy.dlp.v2beta1.InfoType.getDefaultInstance());
    }
    /**
     * <pre>
     * Restricts what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public java.util.List<com.google.privacy.dlp.v2beta1.InfoType.Builder> 
         getInfoTypesBuilderList() {
      return getInfoTypesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.InfoType, com.google.privacy.dlp.v2beta1.InfoType.Builder, com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder> 
        getInfoTypesFieldBuilder() {
      if (infoTypesBuilder_ == null) {
        infoTypesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.privacy.dlp.v2beta1.InfoType, com.google.privacy.dlp.v2beta1.InfoType.Builder, com.google.privacy.dlp.v2beta1.InfoTypeOrBuilder>(
                infoTypes_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        infoTypes_ = null;
      }
      return infoTypesBuilder_;
    }

    private int minLikelihood_ = 0;
    /**
     * <pre>
     * Only returns findings equal or above this threshold.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
     */
    public int getMinLikelihoodValue() {
      return minLikelihood_;
    }
    /**
     * <pre>
     * Only returns findings equal or above this threshold.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
     */
    public Builder setMinLikelihoodValue(int value) {
      minLikelihood_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Only returns findings equal or above this threshold.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
     */
    public com.google.privacy.dlp.v2beta1.Likelihood getMinLikelihood() {
      com.google.privacy.dlp.v2beta1.Likelihood result = com.google.privacy.dlp.v2beta1.Likelihood.valueOf(minLikelihood_);
      return result == null ? com.google.privacy.dlp.v2beta1.Likelihood.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Only returns findings equal or above this threshold.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
     */
    public Builder setMinLikelihood(com.google.privacy.dlp.v2beta1.Likelihood value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      minLikelihood_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Only returns findings equal or above this threshold.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
     */
    public Builder clearMinLikelihood() {
      
      minLikelihood_ = 0;
      onChanged();
      return this;
    }

    private int maxFindings_ ;
    /**
     * <pre>
     * Limits the number of findings per content item or long running operation.
     * </pre>
     *
     * <code>int32 max_findings = 3;</code>
     */
    public int getMaxFindings() {
      return maxFindings_;
    }
    /**
     * <pre>
     * Limits the number of findings per content item or long running operation.
     * </pre>
     *
     * <code>int32 max_findings = 3;</code>
     */
    public Builder setMaxFindings(int value) {
      
      maxFindings_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limits the number of findings per content item or long running operation.
     * </pre>
     *
     * <code>int32 max_findings = 3;</code>
     */
    public Builder clearMaxFindings() {
      
      maxFindings_ = 0;
      onChanged();
      return this;
    }

    private boolean includeQuote_ ;
    /**
     * <pre>
     * When true, a contextual quote from the data that triggered a finding is
     * included in the response; see Finding.quote.
     * </pre>
     *
     * <code>bool include_quote = 4;</code>
     */
    public boolean getIncludeQuote() {
      return includeQuote_;
    }
    /**
     * <pre>
     * When true, a contextual quote from the data that triggered a finding is
     * included in the response; see Finding.quote.
     * </pre>
     *
     * <code>bool include_quote = 4;</code>
     */
    public Builder setIncludeQuote(boolean value) {
      
      includeQuote_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When true, a contextual quote from the data that triggered a finding is
     * included in the response; see Finding.quote.
     * </pre>
     *
     * <code>bool include_quote = 4;</code>
     */
    public Builder clearIncludeQuote() {
      
      includeQuote_ = false;
      onChanged();
      return this;
    }

    private boolean excludeTypes_ ;
    /**
     * <pre>
     * When true, excludes type information of the findings.
     * </pre>
     *
     * <code>bool exclude_types = 6;</code>
     */
    public boolean getExcludeTypes() {
      return excludeTypes_;
    }
    /**
     * <pre>
     * When true, excludes type information of the findings.
     * </pre>
     *
     * <code>bool exclude_types = 6;</code>
     */
    public Builder setExcludeTypes(boolean value) {
      
      excludeTypes_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When true, excludes type information of the findings.
     * </pre>
     *
     * <code>bool exclude_types = 6;</code>
     */
    public Builder clearExcludeTypes() {
      
      excludeTypes_ = false;
      onChanged();
      return this;
    }

    private java.util.List<com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit> infoTypeLimits_ =
      java.util.Collections.emptyList();
    private void ensureInfoTypeLimitsIsMutable() {
      if (!((bitField0_ & 0x00000020) == 0x00000020)) {
        infoTypeLimits_ = new java.util.ArrayList<com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit>(infoTypeLimits_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimitOrBuilder> infoTypeLimitsBuilder_;

    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public java.util.List<com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit> getInfoTypeLimitsList() {
      if (infoTypeLimitsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(infoTypeLimits_);
      } else {
        return infoTypeLimitsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public int getInfoTypeLimitsCount() {
      if (infoTypeLimitsBuilder_ == null) {
        return infoTypeLimits_.size();
      } else {
        return infoTypeLimitsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit getInfoTypeLimits(int index) {
      if (infoTypeLimitsBuilder_ == null) {
        return infoTypeLimits_.get(index);
      } else {
        return infoTypeLimitsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public Builder setInfoTypeLimits(
        int index, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit value) {
      if (infoTypeLimitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInfoTypeLimitsIsMutable();
        infoTypeLimits_.set(index, value);
        onChanged();
      } else {
        infoTypeLimitsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public Builder setInfoTypeLimits(
        int index, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder builderForValue) {
      if (infoTypeLimitsBuilder_ == null) {
        ensureInfoTypeLimitsIsMutable();
        infoTypeLimits_.set(index, builderForValue.build());
        onChanged();
      } else {
        infoTypeLimitsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public Builder addInfoTypeLimits(com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit value) {
      if (infoTypeLimitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInfoTypeLimitsIsMutable();
        infoTypeLimits_.add(value);
        onChanged();
      } else {
        infoTypeLimitsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public Builder addInfoTypeLimits(
        int index, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit value) {
      if (infoTypeLimitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInfoTypeLimitsIsMutable();
        infoTypeLimits_.add(index, value);
        onChanged();
      } else {
        infoTypeLimitsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public Builder addInfoTypeLimits(
        com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder builderForValue) {
      if (infoTypeLimitsBuilder_ == null) {
        ensureInfoTypeLimitsIsMutable();
        infoTypeLimits_.add(builderForValue.build());
        onChanged();
      } else {
        infoTypeLimitsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public Builder addInfoTypeLimits(
        int index, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder builderForValue) {
      if (infoTypeLimitsBuilder_ == null) {
        ensureInfoTypeLimitsIsMutable();
        infoTypeLimits_.add(index, builderForValue.build());
        onChanged();
      } else {
        infoTypeLimitsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public Builder addAllInfoTypeLimits(
        java.lang.Iterable<? extends com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit> values) {
      if (infoTypeLimitsBuilder_ == null) {
        ensureInfoTypeLimitsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, infoTypeLimits_);
        onChanged();
      } else {
        infoTypeLimitsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public Builder clearInfoTypeLimits() {
      if (infoTypeLimitsBuilder_ == null) {
        infoTypeLimits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        infoTypeLimitsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public Builder removeInfoTypeLimits(int index) {
      if (infoTypeLimitsBuilder_ == null) {
        ensureInfoTypeLimitsIsMutable();
        infoTypeLimits_.remove(index);
        onChanged();
      } else {
        infoTypeLimitsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder getInfoTypeLimitsBuilder(
        int index) {
      return getInfoTypeLimitsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimitOrBuilder getInfoTypeLimitsOrBuilder(
        int index) {
      if (infoTypeLimitsBuilder_ == null) {
        return infoTypeLimits_.get(index);  } else {
        return infoTypeLimitsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public java.util.List<? extends com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimitOrBuilder> 
         getInfoTypeLimitsOrBuilderList() {
      if (infoTypeLimitsBuilder_ != null) {
        return infoTypeLimitsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(infoTypeLimits_);
      }
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder addInfoTypeLimitsBuilder() {
      return getInfoTypeLimitsFieldBuilder().addBuilder(
          com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder addInfoTypeLimitsBuilder(
        int index) {
      return getInfoTypeLimitsFieldBuilder().addBuilder(
          index, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration of findings limit given for specified info types.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;</code>
     */
    public java.util.List<com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder> 
         getInfoTypeLimitsBuilderList() {
      return getInfoTypeLimitsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimitOrBuilder> 
        getInfoTypeLimitsFieldBuilder() {
      if (infoTypeLimitsBuilder_ == null) {
        infoTypeLimitsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.Builder, com.google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimitOrBuilder>(
                infoTypeLimits_,
                ((bitField0_ & 0x00000020) == 0x00000020),
                getParentForChildren(),
                isClean());
        infoTypeLimits_ = null;
      }
      return infoTypeLimitsBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2beta1.InspectConfig)
  }

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectConfig)
  private static final com.google.privacy.dlp.v2beta1.InspectConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.privacy.dlp.v2beta1.InspectConfig();
  }

  public static com.google.privacy.dlp.v2beta1.InspectConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InspectConfig>
      PARSER = new com.google.protobuf.AbstractParser<InspectConfig>() {
    public InspectConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new InspectConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InspectConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InspectConfig> getParserForType() {
    return PARSER;
  }

  public com.google.privacy.dlp.v2beta1.InspectConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

