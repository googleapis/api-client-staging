// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

package com.google.privacy.dlp.v2beta1;

public interface CreateInspectOperationRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Configuration for the inspector.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
   */
  boolean hasInspectConfig();
  /**
   * <pre>
   * Configuration for the inspector.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
   */
  com.google.privacy.dlp.v2beta1.InspectConfig getInspectConfig();
  /**
   * <pre>
   * Configuration for the inspector.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
   */
  com.google.privacy.dlp.v2beta1.InspectConfigOrBuilder getInspectConfigOrBuilder();

  /**
   * <pre>
   * Specification of the data set to process.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
   */
  boolean hasStorageConfig();
  /**
   * <pre>
   * Specification of the data set to process.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
   */
  com.google.privacy.dlp.v2beta1.StorageConfig getStorageConfig();
  /**
   * <pre>
   * Specification of the data set to process.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
   */
  com.google.privacy.dlp.v2beta1.StorageConfigOrBuilder getStorageConfigOrBuilder();

  /**
   * <pre>
   * Optional location to store findings. The bucket must already exist and
   * the Google APIs service account for DLP must have write permission to
   * write to the given bucket.
   * &lt;p&gt;Results are split over multiple csv files with each file name matching
   * the pattern "[operation_id]_[count].csv", for example
   * `3094877188788974909_1.csv`. The `operation_id` matches the
   * identifier for the Operation, and the `count` is a counter used for
   * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
   * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
   * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
   * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
   * &lt;li&gt;start_offset&lt;br/&gt;
   * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
   * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
   */
  boolean hasOutputConfig();
  /**
   * <pre>
   * Optional location to store findings. The bucket must already exist and
   * the Google APIs service account for DLP must have write permission to
   * write to the given bucket.
   * &lt;p&gt;Results are split over multiple csv files with each file name matching
   * the pattern "[operation_id]_[count].csv", for example
   * `3094877188788974909_1.csv`. The `operation_id` matches the
   * identifier for the Operation, and the `count` is a counter used for
   * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
   * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
   * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
   * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
   * &lt;li&gt;start_offset&lt;br/&gt;
   * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
   * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
   */
  com.google.privacy.dlp.v2beta1.OutputStorageConfig getOutputConfig();
  /**
   * <pre>
   * Optional location to store findings. The bucket must already exist and
   * the Google APIs service account for DLP must have write permission to
   * write to the given bucket.
   * &lt;p&gt;Results are split over multiple csv files with each file name matching
   * the pattern "[operation_id]_[count].csv", for example
   * `3094877188788974909_1.csv`. The `operation_id` matches the
   * identifier for the Operation, and the `count` is a counter used for
   * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
   * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
   * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
   * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
   * &lt;li&gt;start_offset&lt;br/&gt;
   * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
   * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
   */
  com.google.privacy.dlp.v2beta1.OutputStorageConfigOrBuilder getOutputConfigOrBuilder();
}
