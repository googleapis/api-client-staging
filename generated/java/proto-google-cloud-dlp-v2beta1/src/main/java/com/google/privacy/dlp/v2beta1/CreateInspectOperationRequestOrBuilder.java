// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

package com.google.privacy.dlp.v2beta1;

public interface CreateInspectOperationRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Configuration for the inspector.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
   */
  boolean hasInspectConfig();
  /**
   * <pre>
   * Configuration for the inspector.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
   */
  com.google.privacy.dlp.v2beta1.InspectConfig getInspectConfig();
  /**
   * <pre>
   * Configuration for the inspector.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
   */
  com.google.privacy.dlp.v2beta1.InspectConfigOrBuilder getInspectConfigOrBuilder();

  /**
   * <pre>
   * Specification of the data set to process.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
   */
  boolean hasStorageConfig();
  /**
   * <pre>
   * Specification of the data set to process.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
   */
  com.google.privacy.dlp.v2beta1.StorageConfig getStorageConfig();
  /**
   * <pre>
   * Specification of the data set to process.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
   */
  com.google.privacy.dlp.v2beta1.StorageConfigOrBuilder getStorageConfigOrBuilder();

  /**
   * <pre>
   * Optional location to store findings. The bucket must already exist and
   * the Google APIs service account for DLP must have write permission to
   * write to the given bucket.
   * Results will be split over multiple csv files with each file name matching
   * the pattern "[operation_id] + [count].csv".
   * The operation_id will match the identifier for the Operation,
   * and the [count] is a counter used for tracking the number of files written.
   * The CSV file(s) contain the following columns regardless of storage type
   * scanned: id, info_type, likelihood, byte size of finding, quote, time_stamp
   * For cloud storage the next two columns are: file_path, start_offset
   * For datastore the next two columns are: project_id, namespace_id, path,
   *     column_name, offset.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
   */
  boolean hasOutputConfig();
  /**
   * <pre>
   * Optional location to store findings. The bucket must already exist and
   * the Google APIs service account for DLP must have write permission to
   * write to the given bucket.
   * Results will be split over multiple csv files with each file name matching
   * the pattern "[operation_id] + [count].csv".
   * The operation_id will match the identifier for the Operation,
   * and the [count] is a counter used for tracking the number of files written.
   * The CSV file(s) contain the following columns regardless of storage type
   * scanned: id, info_type, likelihood, byte size of finding, quote, time_stamp
   * For cloud storage the next two columns are: file_path, start_offset
   * For datastore the next two columns are: project_id, namespace_id, path,
   *     column_name, offset.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
   */
  com.google.privacy.dlp.v2beta1.OutputStorageConfig getOutputConfig();
  /**
   * <pre>
   * Optional location to store findings. The bucket must already exist and
   * the Google APIs service account for DLP must have write permission to
   * write to the given bucket.
   * Results will be split over multiple csv files with each file name matching
   * the pattern "[operation_id] + [count].csv".
   * The operation_id will match the identifier for the Operation,
   * and the [count] is a counter used for tracking the number of files written.
   * The CSV file(s) contain the following columns regardless of storage type
   * scanned: id, info_type, likelihood, byte size of finding, quote, time_stamp
   * For cloud storage the next two columns are: file_path, start_offset
   * For datastore the next two columns are: project_id, namespace_id, path,
   *     column_name, offset.
   * </pre>
   *
   * <code>optional .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
   */
  com.google.privacy.dlp.v2beta1.OutputStorageConfigOrBuilder getOutputConfigOrBuilder();
}
