// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

package com.google.privacy.dlp.v2beta1;

/**
 * <pre>
 * Request for scheduling a scan of a data subset from a Google Platform data
 * repository.
 * </pre>
 *
 * Protobuf type {@code google.privacy.dlp.v2beta1.CreateInspectOperationRequest}
 */
public  final class CreateInspectOperationRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
    CreateInspectOperationRequestOrBuilder {
  // Use CreateInspectOperationRequest.newBuilder() to construct.
  private CreateInspectOperationRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CreateInspectOperationRequest() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private CreateInspectOperationRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.privacy.dlp.v2beta1.InspectConfig.Builder subBuilder = null;
            if (inspectConfig_ != null) {
              subBuilder = inspectConfig_.toBuilder();
            }
            inspectConfig_ = input.readMessage(com.google.privacy.dlp.v2beta1.InspectConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(inspectConfig_);
              inspectConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.google.privacy.dlp.v2beta1.StorageConfig.Builder subBuilder = null;
            if (storageConfig_ != null) {
              subBuilder = storageConfig_.toBuilder();
            }
            storageConfig_ = input.readMessage(com.google.privacy.dlp.v2beta1.StorageConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(storageConfig_);
              storageConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.google.privacy.dlp.v2beta1.OutputStorageConfig.Builder subBuilder = null;
            if (outputConfig_ != null) {
              subBuilder = outputConfig_.toBuilder();
            }
            outputConfig_ = input.readMessage(com.google.privacy.dlp.v2beta1.OutputStorageConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(outputConfig_);
              outputConfig_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_CreateInspectOperationRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_CreateInspectOperationRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest.class, com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest.Builder.class);
  }

  public static final int INSPECT_CONFIG_FIELD_NUMBER = 1;
  private com.google.privacy.dlp.v2beta1.InspectConfig inspectConfig_;
  /**
   * <pre>
   * Configuration for the inspector.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
   */
  public boolean hasInspectConfig() {
    return inspectConfig_ != null;
  }
  /**
   * <pre>
   * Configuration for the inspector.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
   */
  public com.google.privacy.dlp.v2beta1.InspectConfig getInspectConfig() {
    return inspectConfig_ == null ? com.google.privacy.dlp.v2beta1.InspectConfig.getDefaultInstance() : inspectConfig_;
  }
  /**
   * <pre>
   * Configuration for the inspector.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
   */
  public com.google.privacy.dlp.v2beta1.InspectConfigOrBuilder getInspectConfigOrBuilder() {
    return getInspectConfig();
  }

  public static final int STORAGE_CONFIG_FIELD_NUMBER = 2;
  private com.google.privacy.dlp.v2beta1.StorageConfig storageConfig_;
  /**
   * <pre>
   * Specification of the data set to process.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
   */
  public boolean hasStorageConfig() {
    return storageConfig_ != null;
  }
  /**
   * <pre>
   * Specification of the data set to process.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
   */
  public com.google.privacy.dlp.v2beta1.StorageConfig getStorageConfig() {
    return storageConfig_ == null ? com.google.privacy.dlp.v2beta1.StorageConfig.getDefaultInstance() : storageConfig_;
  }
  /**
   * <pre>
   * Specification of the data set to process.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
   */
  public com.google.privacy.dlp.v2beta1.StorageConfigOrBuilder getStorageConfigOrBuilder() {
    return getStorageConfig();
  }

  public static final int OUTPUT_CONFIG_FIELD_NUMBER = 3;
  private com.google.privacy.dlp.v2beta1.OutputStorageConfig outputConfig_;
  /**
   * <pre>
   * Optional location to store findings. The bucket must already exist and
   * the Google APIs service account for DLP must have write permission to
   * write to the given bucket.
   * &lt;p&gt;Results are split over multiple csv files with each file name matching
   * the pattern "[operation_id]_[count].csv", for example
   * `3094877188788974909_1.csv`. The `operation_id` matches the
   * identifier for the Operation, and the `count` is a counter used for
   * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
   * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
   * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
   * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
   * &lt;li&gt;start_offset&lt;br/&gt;
   * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
   * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
   */
  public boolean hasOutputConfig() {
    return outputConfig_ != null;
  }
  /**
   * <pre>
   * Optional location to store findings. The bucket must already exist and
   * the Google APIs service account for DLP must have write permission to
   * write to the given bucket.
   * &lt;p&gt;Results are split over multiple csv files with each file name matching
   * the pattern "[operation_id]_[count].csv", for example
   * `3094877188788974909_1.csv`. The `operation_id` matches the
   * identifier for the Operation, and the `count` is a counter used for
   * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
   * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
   * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
   * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
   * &lt;li&gt;start_offset&lt;br/&gt;
   * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
   * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
   */
  public com.google.privacy.dlp.v2beta1.OutputStorageConfig getOutputConfig() {
    return outputConfig_ == null ? com.google.privacy.dlp.v2beta1.OutputStorageConfig.getDefaultInstance() : outputConfig_;
  }
  /**
   * <pre>
   * Optional location to store findings. The bucket must already exist and
   * the Google APIs service account for DLP must have write permission to
   * write to the given bucket.
   * &lt;p&gt;Results are split over multiple csv files with each file name matching
   * the pattern "[operation_id]_[count].csv", for example
   * `3094877188788974909_1.csv`. The `operation_id` matches the
   * identifier for the Operation, and the `count` is a counter used for
   * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
   * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
   * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
   * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
   * &lt;li&gt;start_offset&lt;br/&gt;
   * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
   * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
   */
  public com.google.privacy.dlp.v2beta1.OutputStorageConfigOrBuilder getOutputConfigOrBuilder() {
    return getOutputConfig();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (inspectConfig_ != null) {
      output.writeMessage(1, getInspectConfig());
    }
    if (storageConfig_ != null) {
      output.writeMessage(2, getStorageConfig());
    }
    if (outputConfig_ != null) {
      output.writeMessage(3, getOutputConfig());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (inspectConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInspectConfig());
    }
    if (storageConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getStorageConfig());
    }
    if (outputConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getOutputConfig());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest)) {
      return super.equals(obj);
    }
    com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest other = (com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest) obj;

    boolean result = true;
    result = result && (hasInspectConfig() == other.hasInspectConfig());
    if (hasInspectConfig()) {
      result = result && getInspectConfig()
          .equals(other.getInspectConfig());
    }
    result = result && (hasStorageConfig() == other.hasStorageConfig());
    if (hasStorageConfig()) {
      result = result && getStorageConfig()
          .equals(other.getStorageConfig());
    }
    result = result && (hasOutputConfig() == other.hasOutputConfig());
    if (hasOutputConfig()) {
      result = result && getOutputConfig()
          .equals(other.getOutputConfig());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInspectConfig()) {
      hash = (37 * hash) + INSPECT_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getInspectConfig().hashCode();
    }
    if (hasStorageConfig()) {
      hash = (37 * hash) + STORAGE_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getStorageConfig().hashCode();
    }
    if (hasOutputConfig()) {
      hash = (37 * hash) + OUTPUT_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getOutputConfig().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Request for scheduling a scan of a data subset from a Google Platform data
   * repository.
   * </pre>
   *
   * Protobuf type {@code google.privacy.dlp.v2beta1.CreateInspectOperationRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
      com.google.privacy.dlp.v2beta1.CreateInspectOperationRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_CreateInspectOperationRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_CreateInspectOperationRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest.class, com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest.Builder.class);
    }

    // Construct using com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (inspectConfigBuilder_ == null) {
        inspectConfig_ = null;
      } else {
        inspectConfig_ = null;
        inspectConfigBuilder_ = null;
      }
      if (storageConfigBuilder_ == null) {
        storageConfig_ = null;
      } else {
        storageConfig_ = null;
        storageConfigBuilder_ = null;
      }
      if (outputConfigBuilder_ == null) {
        outputConfig_ = null;
      } else {
        outputConfig_ = null;
        outputConfigBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.privacy.dlp.v2beta1.DlpProto.internal_static_google_privacy_dlp_v2beta1_CreateInspectOperationRequest_descriptor;
    }

    public com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest getDefaultInstanceForType() {
      return com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest.getDefaultInstance();
    }

    public com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest build() {
      com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest buildPartial() {
      com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest result = new com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest(this);
      if (inspectConfigBuilder_ == null) {
        result.inspectConfig_ = inspectConfig_;
      } else {
        result.inspectConfig_ = inspectConfigBuilder_.build();
      }
      if (storageConfigBuilder_ == null) {
        result.storageConfig_ = storageConfig_;
      } else {
        result.storageConfig_ = storageConfigBuilder_.build();
      }
      if (outputConfigBuilder_ == null) {
        result.outputConfig_ = outputConfig_;
      } else {
        result.outputConfig_ = outputConfigBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest) {
        return mergeFrom((com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest other) {
      if (other == com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest.getDefaultInstance()) return this;
      if (other.hasInspectConfig()) {
        mergeInspectConfig(other.getInspectConfig());
      }
      if (other.hasStorageConfig()) {
        mergeStorageConfig(other.getStorageConfig());
      }
      if (other.hasOutputConfig()) {
        mergeOutputConfig(other.getOutputConfig());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.privacy.dlp.v2beta1.InspectConfig inspectConfig_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.InspectConfig, com.google.privacy.dlp.v2beta1.InspectConfig.Builder, com.google.privacy.dlp.v2beta1.InspectConfigOrBuilder> inspectConfigBuilder_;
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public boolean hasInspectConfig() {
      return inspectConfigBuilder_ != null || inspectConfig_ != null;
    }
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InspectConfig getInspectConfig() {
      if (inspectConfigBuilder_ == null) {
        return inspectConfig_ == null ? com.google.privacy.dlp.v2beta1.InspectConfig.getDefaultInstance() : inspectConfig_;
      } else {
        return inspectConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public Builder setInspectConfig(com.google.privacy.dlp.v2beta1.InspectConfig value) {
      if (inspectConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        inspectConfig_ = value;
        onChanged();
      } else {
        inspectConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public Builder setInspectConfig(
        com.google.privacy.dlp.v2beta1.InspectConfig.Builder builderForValue) {
      if (inspectConfigBuilder_ == null) {
        inspectConfig_ = builderForValue.build();
        onChanged();
      } else {
        inspectConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public Builder mergeInspectConfig(com.google.privacy.dlp.v2beta1.InspectConfig value) {
      if (inspectConfigBuilder_ == null) {
        if (inspectConfig_ != null) {
          inspectConfig_ =
            com.google.privacy.dlp.v2beta1.InspectConfig.newBuilder(inspectConfig_).mergeFrom(value).buildPartial();
        } else {
          inspectConfig_ = value;
        }
        onChanged();
      } else {
        inspectConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public Builder clearInspectConfig() {
      if (inspectConfigBuilder_ == null) {
        inspectConfig_ = null;
        onChanged();
      } else {
        inspectConfig_ = null;
        inspectConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InspectConfig.Builder getInspectConfigBuilder() {
      
      onChanged();
      return getInspectConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public com.google.privacy.dlp.v2beta1.InspectConfigOrBuilder getInspectConfigOrBuilder() {
      if (inspectConfigBuilder_ != null) {
        return inspectConfigBuilder_.getMessageOrBuilder();
      } else {
        return inspectConfig_ == null ?
            com.google.privacy.dlp.v2beta1.InspectConfig.getDefaultInstance() : inspectConfig_;
      }
    }
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.InspectConfig, com.google.privacy.dlp.v2beta1.InspectConfig.Builder, com.google.privacy.dlp.v2beta1.InspectConfigOrBuilder> 
        getInspectConfigFieldBuilder() {
      if (inspectConfigBuilder_ == null) {
        inspectConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2beta1.InspectConfig, com.google.privacy.dlp.v2beta1.InspectConfig.Builder, com.google.privacy.dlp.v2beta1.InspectConfigOrBuilder>(
                getInspectConfig(),
                getParentForChildren(),
                isClean());
        inspectConfig_ = null;
      }
      return inspectConfigBuilder_;
    }

    private com.google.privacy.dlp.v2beta1.StorageConfig storageConfig_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.StorageConfig, com.google.privacy.dlp.v2beta1.StorageConfig.Builder, com.google.privacy.dlp.v2beta1.StorageConfigOrBuilder> storageConfigBuilder_;
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public boolean hasStorageConfig() {
      return storageConfigBuilder_ != null || storageConfig_ != null;
    }
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public com.google.privacy.dlp.v2beta1.StorageConfig getStorageConfig() {
      if (storageConfigBuilder_ == null) {
        return storageConfig_ == null ? com.google.privacy.dlp.v2beta1.StorageConfig.getDefaultInstance() : storageConfig_;
      } else {
        return storageConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public Builder setStorageConfig(com.google.privacy.dlp.v2beta1.StorageConfig value) {
      if (storageConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        storageConfig_ = value;
        onChanged();
      } else {
        storageConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public Builder setStorageConfig(
        com.google.privacy.dlp.v2beta1.StorageConfig.Builder builderForValue) {
      if (storageConfigBuilder_ == null) {
        storageConfig_ = builderForValue.build();
        onChanged();
      } else {
        storageConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public Builder mergeStorageConfig(com.google.privacy.dlp.v2beta1.StorageConfig value) {
      if (storageConfigBuilder_ == null) {
        if (storageConfig_ != null) {
          storageConfig_ =
            com.google.privacy.dlp.v2beta1.StorageConfig.newBuilder(storageConfig_).mergeFrom(value).buildPartial();
        } else {
          storageConfig_ = value;
        }
        onChanged();
      } else {
        storageConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public Builder clearStorageConfig() {
      if (storageConfigBuilder_ == null) {
        storageConfig_ = null;
        onChanged();
      } else {
        storageConfig_ = null;
        storageConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public com.google.privacy.dlp.v2beta1.StorageConfig.Builder getStorageConfigBuilder() {
      
      onChanged();
      return getStorageConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public com.google.privacy.dlp.v2beta1.StorageConfigOrBuilder getStorageConfigOrBuilder() {
      if (storageConfigBuilder_ != null) {
        return storageConfigBuilder_.getMessageOrBuilder();
      } else {
        return storageConfig_ == null ?
            com.google.privacy.dlp.v2beta1.StorageConfig.getDefaultInstance() : storageConfig_;
      }
    }
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.StorageConfig, com.google.privacy.dlp.v2beta1.StorageConfig.Builder, com.google.privacy.dlp.v2beta1.StorageConfigOrBuilder> 
        getStorageConfigFieldBuilder() {
      if (storageConfigBuilder_ == null) {
        storageConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2beta1.StorageConfig, com.google.privacy.dlp.v2beta1.StorageConfig.Builder, com.google.privacy.dlp.v2beta1.StorageConfigOrBuilder>(
                getStorageConfig(),
                getParentForChildren(),
                isClean());
        storageConfig_ = null;
      }
      return storageConfigBuilder_;
    }

    private com.google.privacy.dlp.v2beta1.OutputStorageConfig outputConfig_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.OutputStorageConfig, com.google.privacy.dlp.v2beta1.OutputStorageConfig.Builder, com.google.privacy.dlp.v2beta1.OutputStorageConfigOrBuilder> outputConfigBuilder_;
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * &lt;p&gt;Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
     * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
     * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
     * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
     * &lt;li&gt;start_offset&lt;br/&gt;
     * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
     * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public boolean hasOutputConfig() {
      return outputConfigBuilder_ != null || outputConfig_ != null;
    }
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * &lt;p&gt;Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
     * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
     * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
     * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
     * &lt;li&gt;start_offset&lt;br/&gt;
     * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
     * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public com.google.privacy.dlp.v2beta1.OutputStorageConfig getOutputConfig() {
      if (outputConfigBuilder_ == null) {
        return outputConfig_ == null ? com.google.privacy.dlp.v2beta1.OutputStorageConfig.getDefaultInstance() : outputConfig_;
      } else {
        return outputConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * &lt;p&gt;Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
     * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
     * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
     * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
     * &lt;li&gt;start_offset&lt;br/&gt;
     * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
     * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public Builder setOutputConfig(com.google.privacy.dlp.v2beta1.OutputStorageConfig value) {
      if (outputConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outputConfig_ = value;
        onChanged();
      } else {
        outputConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * &lt;p&gt;Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
     * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
     * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
     * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
     * &lt;li&gt;start_offset&lt;br/&gt;
     * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
     * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public Builder setOutputConfig(
        com.google.privacy.dlp.v2beta1.OutputStorageConfig.Builder builderForValue) {
      if (outputConfigBuilder_ == null) {
        outputConfig_ = builderForValue.build();
        onChanged();
      } else {
        outputConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * &lt;p&gt;Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
     * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
     * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
     * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
     * &lt;li&gt;start_offset&lt;br/&gt;
     * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
     * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public Builder mergeOutputConfig(com.google.privacy.dlp.v2beta1.OutputStorageConfig value) {
      if (outputConfigBuilder_ == null) {
        if (outputConfig_ != null) {
          outputConfig_ =
            com.google.privacy.dlp.v2beta1.OutputStorageConfig.newBuilder(outputConfig_).mergeFrom(value).buildPartial();
        } else {
          outputConfig_ = value;
        }
        onChanged();
      } else {
        outputConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * &lt;p&gt;Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
     * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
     * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
     * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
     * &lt;li&gt;start_offset&lt;br/&gt;
     * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
     * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public Builder clearOutputConfig() {
      if (outputConfigBuilder_ == null) {
        outputConfig_ = null;
        onChanged();
      } else {
        outputConfig_ = null;
        outputConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * &lt;p&gt;Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
     * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
     * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
     * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
     * &lt;li&gt;start_offset&lt;br/&gt;
     * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
     * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public com.google.privacy.dlp.v2beta1.OutputStorageConfig.Builder getOutputConfigBuilder() {
      
      onChanged();
      return getOutputConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * &lt;p&gt;Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
     * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
     * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
     * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
     * &lt;li&gt;start_offset&lt;br/&gt;
     * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
     * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public com.google.privacy.dlp.v2beta1.OutputStorageConfigOrBuilder getOutputConfigOrBuilder() {
      if (outputConfigBuilder_ != null) {
        return outputConfigBuilder_.getMessageOrBuilder();
      } else {
        return outputConfig_ == null ?
            com.google.privacy.dlp.v2beta1.OutputStorageConfig.getDefaultInstance() : outputConfig_;
      }
    }
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * &lt;p&gt;Results are split over multiple csv files with each file name matching
     * the pattern "[operation_id]_[count].csv", for example
     * `3094877188788974909_1.csv`. The `operation_id` matches the
     * identifier for the Operation, and the `count` is a counter used for
     * tracking the number of files written. &lt;p&gt;The CSV file(s) contain the
     * following columns regardless of storage type scanned: &lt;li&gt;id &lt;li&gt;info_type
     * &lt;li&gt;likelihood &lt;li&gt;byte size of finding &lt;li&gt;quote &lt;li&gt;time_stamp&lt;br/&gt;
     * &lt;p&gt;For Cloud Storage the next columns are: &lt;li&gt;file_path
     * &lt;li&gt;start_offset&lt;br/&gt;
     * &lt;p&gt;For Cloud Datastore the next columns are: &lt;li&gt;project_id
     * &lt;li&gt;namespace_id &lt;li&gt;path &lt;li&gt;column_name &lt;li&gt;offset
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.privacy.dlp.v2beta1.OutputStorageConfig, com.google.privacy.dlp.v2beta1.OutputStorageConfig.Builder, com.google.privacy.dlp.v2beta1.OutputStorageConfigOrBuilder> 
        getOutputConfigFieldBuilder() {
      if (outputConfigBuilder_ == null) {
        outputConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.privacy.dlp.v2beta1.OutputStorageConfig, com.google.privacy.dlp.v2beta1.OutputStorageConfig.Builder, com.google.privacy.dlp.v2beta1.OutputStorageConfigOrBuilder>(
                getOutputConfig(),
                getParentForChildren(),
                isClean());
        outputConfig_ = null;
      }
      return outputConfigBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  }

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  private static final com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest();
  }

  public static com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CreateInspectOperationRequest>
      PARSER = new com.google.protobuf.AbstractParser<CreateInspectOperationRequest>() {
    public CreateInspectOperationRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CreateInspectOperationRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CreateInspectOperationRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CreateInspectOperationRequest> getParserForType() {
    return PARSER;
  }

  public com.google.privacy.dlp.v2beta1.CreateInspectOperationRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

