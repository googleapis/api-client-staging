// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

package com.google.privacy.dlp.v2beta1;

public interface CryptoReplaceFfxFpeConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The key used by the encryption algorithm. [required]
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;</code>
   */
  boolean hasCryptoKey();
  /**
   * <pre>
   * The key used by the encryption algorithm. [required]
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;</code>
   */
  com.google.privacy.dlp.v2beta1.CryptoKey getCryptoKey();
  /**
   * <pre>
   * The key used by the encryption algorithm. [required]
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;</code>
   */
  com.google.privacy.dlp.v2beta1.CryptoKeyOrBuilder getCryptoKeyOrBuilder();

  /**
   * <pre>
   * A context may be used for higher security since the same
   * identifier in two different contexts likely will be given a distinct
   * surrogate. The principle is that the likeliness is inversely related
   * to the ratio of the number of distinct identifiers per context over the
   * number of possible surrogates: As long as this ratio is small, the
   * likehood is large.
   * If the context is not set, a default tweak will be used.
   * If the context is set but:
   * 1. there is no record present when transforming a given value or
   * 1. the field is not present when transforming a given value,
   * a default tweak will be used.
   * Note that case (1) is expected when an `InfoTypeTransformation` is
   * applied to both structured and non-structured `ContentItem`s.
   * Currently, the referenced field may be of value type integer or string.
   * The tweak is constructed as a sequence of bytes in big endian byte order
   * such that:
   * - a 64 bit integer is encoded followed by a single byte of value 1
   * - a string is encoded in UTF-8 format followed by a single byte of value 2
   * This is also known as the 'tweak', as in tweakable encryption.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.FieldId context = 2;</code>
   */
  boolean hasContext();
  /**
   * <pre>
   * A context may be used for higher security since the same
   * identifier in two different contexts likely will be given a distinct
   * surrogate. The principle is that the likeliness is inversely related
   * to the ratio of the number of distinct identifiers per context over the
   * number of possible surrogates: As long as this ratio is small, the
   * likehood is large.
   * If the context is not set, a default tweak will be used.
   * If the context is set but:
   * 1. there is no record present when transforming a given value or
   * 1. the field is not present when transforming a given value,
   * a default tweak will be used.
   * Note that case (1) is expected when an `InfoTypeTransformation` is
   * applied to both structured and non-structured `ContentItem`s.
   * Currently, the referenced field may be of value type integer or string.
   * The tweak is constructed as a sequence of bytes in big endian byte order
   * such that:
   * - a 64 bit integer is encoded followed by a single byte of value 1
   * - a string is encoded in UTF-8 format followed by a single byte of value 2
   * This is also known as the 'tweak', as in tweakable encryption.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.FieldId context = 2;</code>
   */
  com.google.privacy.dlp.v2beta1.FieldId getContext();
  /**
   * <pre>
   * A context may be used for higher security since the same
   * identifier in two different contexts likely will be given a distinct
   * surrogate. The principle is that the likeliness is inversely related
   * to the ratio of the number of distinct identifiers per context over the
   * number of possible surrogates: As long as this ratio is small, the
   * likehood is large.
   * If the context is not set, a default tweak will be used.
   * If the context is set but:
   * 1. there is no record present when transforming a given value or
   * 1. the field is not present when transforming a given value,
   * a default tweak will be used.
   * Note that case (1) is expected when an `InfoTypeTransformation` is
   * applied to both structured and non-structured `ContentItem`s.
   * Currently, the referenced field may be of value type integer or string.
   * The tweak is constructed as a sequence of bytes in big endian byte order
   * such that:
   * - a 64 bit integer is encoded followed by a single byte of value 1
   * - a string is encoded in UTF-8 format followed by a single byte of value 2
   * This is also known as the 'tweak', as in tweakable encryption.
   * </pre>
   *
   * <code>.google.privacy.dlp.v2beta1.FieldId context = 2;</code>
   */
  com.google.privacy.dlp.v2beta1.FieldIdOrBuilder getContextOrBuilder();

  /**
   * <code>.google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;</code>
   */
  int getCommonAlphabetValue();
  /**
   * <code>.google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;</code>
   */
  com.google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet getCommonAlphabet();

  /**
   * <pre>
   * This is supported by mapping these to the alphanumeric characters
   * that the FFX mode natively supports. This happens before/after
   * encryption/decryption.
   * Each character listed must appear only once.
   * Number of characters must be in the range [2, 62].
   * This must be encoded as ASCII.
   * The order of characters does not matter.
   * </pre>
   *
   * <code>string custom_alphabet = 5;</code>
   */
  java.lang.String getCustomAlphabet();
  /**
   * <pre>
   * This is supported by mapping these to the alphanumeric characters
   * that the FFX mode natively supports. This happens before/after
   * encryption/decryption.
   * Each character listed must appear only once.
   * Number of characters must be in the range [2, 62].
   * This must be encoded as ASCII.
   * The order of characters does not matter.
   * </pre>
   *
   * <code>string custom_alphabet = 5;</code>
   */
  com.google.protobuf.ByteString
      getCustomAlphabetBytes();

  /**
   * <pre>
   * The native way to select the alphabet. Must be in the range [2, 62].
   * </pre>
   *
   * <code>int32 radix = 6;</code>
   */
  int getRadix();

  public com.google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.AlphabetCase getAlphabetCase();
}
