// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/service.proto

package com.google.appengine.v1;

/**
 * <pre>
 * Traffic routing configuration for versions within a single service. Traffic
 * splits define how traffic directed to the service is assigned to versions.
 * </pre>
 *
 * Protobuf type {@code google.appengine.v1.TrafficSplit}
 */
public  final class TrafficSplit extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.appengine.v1.TrafficSplit)
    TrafficSplitOrBuilder {
  // Use TrafficSplit.newBuilder() to construct.
  private TrafficSplit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TrafficSplit() {
    shardBy_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private TrafficSplit(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            int rawValue = input.readEnum();

            shardBy_ = rawValue;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              allocations_ = com.google.protobuf.MapField.newMapField(
                  AllocationsDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.Double>
            allocations__ = input.readMessage(
                AllocationsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            allocations_.getMutableMap().put(
                allocations__.getKey(), allocations__.getValue());
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.appengine.v1.ServiceProto.internal_static_google_appengine_v1_TrafficSplit_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetAllocations();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.appengine.v1.ServiceProto.internal_static_google_appengine_v1_TrafficSplit_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.appengine.v1.TrafficSplit.class, com.google.appengine.v1.TrafficSplit.Builder.class);
  }

  /**
   * <pre>
   * Available sharding mechanisms.
   * </pre>
   *
   * Protobuf enum {@code google.appengine.v1.TrafficSplit.ShardBy}
   */
  public enum ShardBy
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Diversion method unspecified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    UNSPECIFIED(0),
    /**
     * <pre>
     * Diversion based on a specially named cookie, "GOOGAPPUID." The cookie
     * must be set by the application itself or no diversion will occur.
     * </pre>
     *
     * <code>COOKIE = 1;</code>
     */
    COOKIE(1),
    /**
     * <pre>
     * Diversion based on applying the modulus operation to a fingerprint
     * of the IP address.
     * </pre>
     *
     * <code>IP = 2;</code>
     */
    IP(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Diversion method unspecified.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    public static final int UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Diversion based on a specially named cookie, "GOOGAPPUID." The cookie
     * must be set by the application itself or no diversion will occur.
     * </pre>
     *
     * <code>COOKIE = 1;</code>
     */
    public static final int COOKIE_VALUE = 1;
    /**
     * <pre>
     * Diversion based on applying the modulus operation to a fingerprint
     * of the IP address.
     * </pre>
     *
     * <code>IP = 2;</code>
     */
    public static final int IP_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ShardBy valueOf(int value) {
      return forNumber(value);
    }

    public static ShardBy forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED;
        case 1: return COOKIE;
        case 2: return IP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ShardBy>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ShardBy> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ShardBy>() {
            public ShardBy findValueByNumber(int number) {
              return ShardBy.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.appengine.v1.TrafficSplit.getDescriptor().getEnumTypes().get(0);
    }

    private static final ShardBy[] VALUES = values();

    public static ShardBy valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ShardBy(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.appengine.v1.TrafficSplit.ShardBy)
  }

  private int bitField0_;
  public static final int SHARD_BY_FIELD_NUMBER = 1;
  private int shardBy_;
  /**
   * <pre>
   * Mechanism used to determine which version a request is sent to.
   * The traffic selection algorithm will
   * be stable for either type until allocations are changed.
   * </pre>
   *
   * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
   */
  public int getShardByValue() {
    return shardBy_;
  }
  /**
   * <pre>
   * Mechanism used to determine which version a request is sent to.
   * The traffic selection algorithm will
   * be stable for either type until allocations are changed.
   * </pre>
   *
   * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
   */
  public com.google.appengine.v1.TrafficSplit.ShardBy getShardBy() {
    com.google.appengine.v1.TrafficSplit.ShardBy result = com.google.appengine.v1.TrafficSplit.ShardBy.valueOf(shardBy_);
    return result == null ? com.google.appengine.v1.TrafficSplit.ShardBy.UNRECOGNIZED : result;
  }

  public static final int ALLOCATIONS_FIELD_NUMBER = 2;
  private static final class AllocationsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Double> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Double>newDefaultInstance(
                com.google.appengine.v1.ServiceProto.internal_static_google_appengine_v1_TrafficSplit_AllocationsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.DOUBLE,
                0D);
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Double> allocations_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
  internalGetAllocations() {
    if (allocations_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          AllocationsDefaultEntryHolder.defaultEntry);
    }
    return allocations_;
  }

  public int getAllocationsCount() {
    return internalGetAllocations().getMap().size();
  }
  /**
   * <pre>
   * Mapping from version IDs within the service to fractional
   * (0.000, 1] allocations of traffic for that version. Each version can
   * be specified only once, but some versions in the service may not
   * have any traffic allocation. Services that have traffic allocated
   * cannot be deleted until either the service is deleted or
   * their traffic allocation is removed. Allocations must sum to 1.
   * Up to two decimal place precision is supported for IP-based splits and
   * up to three decimal places is supported for cookie-based splits.
   * </pre>
   *
   * <code>map&lt;string, double&gt; allocations = 2;</code>
   */

  public boolean containsAllocations(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetAllocations().getMap().containsKey(key);
  }
  /**
   * Use {@link #getAllocationsMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Double> getAllocations() {
    return getAllocationsMap();
  }
  /**
   * <pre>
   * Mapping from version IDs within the service to fractional
   * (0.000, 1] allocations of traffic for that version. Each version can
   * be specified only once, but some versions in the service may not
   * have any traffic allocation. Services that have traffic allocated
   * cannot be deleted until either the service is deleted or
   * their traffic allocation is removed. Allocations must sum to 1.
   * Up to two decimal place precision is supported for IP-based splits and
   * up to three decimal places is supported for cookie-based splits.
   * </pre>
   *
   * <code>map&lt;string, double&gt; allocations = 2;</code>
   */

  public java.util.Map<java.lang.String, java.lang.Double> getAllocationsMap() {
    return internalGetAllocations().getMap();
  }
  /**
   * <pre>
   * Mapping from version IDs within the service to fractional
   * (0.000, 1] allocations of traffic for that version. Each version can
   * be specified only once, but some versions in the service may not
   * have any traffic allocation. Services that have traffic allocated
   * cannot be deleted until either the service is deleted or
   * their traffic allocation is removed. Allocations must sum to 1.
   * Up to two decimal place precision is supported for IP-based splits and
   * up to three decimal places is supported for cookie-based splits.
   * </pre>
   *
   * <code>map&lt;string, double&gt; allocations = 2;</code>
   */

  public double getAllocationsOrDefault(
      java.lang.String key,
      double defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Double> map =
        internalGetAllocations().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Mapping from version IDs within the service to fractional
   * (0.000, 1] allocations of traffic for that version. Each version can
   * be specified only once, but some versions in the service may not
   * have any traffic allocation. Services that have traffic allocated
   * cannot be deleted until either the service is deleted or
   * their traffic allocation is removed. Allocations must sum to 1.
   * Up to two decimal place precision is supported for IP-based splits and
   * up to three decimal places is supported for cookie-based splits.
   * </pre>
   *
   * <code>map&lt;string, double&gt; allocations = 2;</code>
   */

  public double getAllocationsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Double> map =
        internalGetAllocations().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (shardBy_ != com.google.appengine.v1.TrafficSplit.ShardBy.UNSPECIFIED.getNumber()) {
      output.writeEnum(1, shardBy_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetAllocations(),
        AllocationsDefaultEntryHolder.defaultEntry,
        2);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (shardBy_ != com.google.appengine.v1.TrafficSplit.ShardBy.UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, shardBy_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Double> entry
         : internalGetAllocations().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Double>
      allocations__ = AllocationsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, allocations__);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.appengine.v1.TrafficSplit)) {
      return super.equals(obj);
    }
    com.google.appengine.v1.TrafficSplit other = (com.google.appengine.v1.TrafficSplit) obj;

    boolean result = true;
    result = result && shardBy_ == other.shardBy_;
    result = result && internalGetAllocations().equals(
        other.internalGetAllocations());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SHARD_BY_FIELD_NUMBER;
    hash = (53 * hash) + shardBy_;
    if (!internalGetAllocations().getMap().isEmpty()) {
      hash = (37 * hash) + ALLOCATIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetAllocations().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.appengine.v1.TrafficSplit parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.appengine.v1.TrafficSplit parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.appengine.v1.TrafficSplit parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.appengine.v1.TrafficSplit parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.appengine.v1.TrafficSplit parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.appengine.v1.TrafficSplit parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.appengine.v1.TrafficSplit parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.appengine.v1.TrafficSplit parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.appengine.v1.TrafficSplit parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.appengine.v1.TrafficSplit parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.appengine.v1.TrafficSplit parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.appengine.v1.TrafficSplit parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.appengine.v1.TrafficSplit prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Traffic routing configuration for versions within a single service. Traffic
   * splits define how traffic directed to the service is assigned to versions.
   * </pre>
   *
   * Protobuf type {@code google.appengine.v1.TrafficSplit}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.appengine.v1.TrafficSplit)
      com.google.appengine.v1.TrafficSplitOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.appengine.v1.ServiceProto.internal_static_google_appengine_v1_TrafficSplit_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetAllocations();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableAllocations();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.appengine.v1.ServiceProto.internal_static_google_appengine_v1_TrafficSplit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.appengine.v1.TrafficSplit.class, com.google.appengine.v1.TrafficSplit.Builder.class);
    }

    // Construct using com.google.appengine.v1.TrafficSplit.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      shardBy_ = 0;

      internalGetMutableAllocations().clear();
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.appengine.v1.ServiceProto.internal_static_google_appengine_v1_TrafficSplit_descriptor;
    }

    public com.google.appengine.v1.TrafficSplit getDefaultInstanceForType() {
      return com.google.appengine.v1.TrafficSplit.getDefaultInstance();
    }

    public com.google.appengine.v1.TrafficSplit build() {
      com.google.appengine.v1.TrafficSplit result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.appengine.v1.TrafficSplit buildPartial() {
      com.google.appengine.v1.TrafficSplit result = new com.google.appengine.v1.TrafficSplit(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.shardBy_ = shardBy_;
      result.allocations_ = internalGetAllocations();
      result.allocations_.makeImmutable();
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.appengine.v1.TrafficSplit) {
        return mergeFrom((com.google.appengine.v1.TrafficSplit)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.appengine.v1.TrafficSplit other) {
      if (other == com.google.appengine.v1.TrafficSplit.getDefaultInstance()) return this;
      if (other.shardBy_ != 0) {
        setShardByValue(other.getShardByValue());
      }
      internalGetMutableAllocations().mergeFrom(
          other.internalGetAllocations());
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.appengine.v1.TrafficSplit parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.appengine.v1.TrafficSplit) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int shardBy_ = 0;
    /**
     * <pre>
     * Mechanism used to determine which version a request is sent to.
     * The traffic selection algorithm will
     * be stable for either type until allocations are changed.
     * </pre>
     *
     * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
     */
    public int getShardByValue() {
      return shardBy_;
    }
    /**
     * <pre>
     * Mechanism used to determine which version a request is sent to.
     * The traffic selection algorithm will
     * be stable for either type until allocations are changed.
     * </pre>
     *
     * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
     */
    public Builder setShardByValue(int value) {
      shardBy_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Mechanism used to determine which version a request is sent to.
     * The traffic selection algorithm will
     * be stable for either type until allocations are changed.
     * </pre>
     *
     * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
     */
    public com.google.appengine.v1.TrafficSplit.ShardBy getShardBy() {
      com.google.appengine.v1.TrafficSplit.ShardBy result = com.google.appengine.v1.TrafficSplit.ShardBy.valueOf(shardBy_);
      return result == null ? com.google.appengine.v1.TrafficSplit.ShardBy.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Mechanism used to determine which version a request is sent to.
     * The traffic selection algorithm will
     * be stable for either type until allocations are changed.
     * </pre>
     *
     * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
     */
    public Builder setShardBy(com.google.appengine.v1.TrafficSplit.ShardBy value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      shardBy_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Mechanism used to determine which version a request is sent to.
     * The traffic selection algorithm will
     * be stable for either type until allocations are changed.
     * </pre>
     *
     * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
     */
    public Builder clearShardBy() {
      
      shardBy_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Double> allocations_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
    internalGetAllocations() {
      if (allocations_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AllocationsDefaultEntryHolder.defaultEntry);
      }
      return allocations_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
    internalGetMutableAllocations() {
      onChanged();;
      if (allocations_ == null) {
        allocations_ = com.google.protobuf.MapField.newMapField(
            AllocationsDefaultEntryHolder.defaultEntry);
      }
      if (!allocations_.isMutable()) {
        allocations_ = allocations_.copy();
      }
      return allocations_;
    }

    public int getAllocationsCount() {
      return internalGetAllocations().getMap().size();
    }
    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */

    public boolean containsAllocations(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAllocations().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAllocationsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Double> getAllocations() {
      return getAllocationsMap();
    }
    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Double> getAllocationsMap() {
      return internalGetAllocations().getMap();
    }
    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */

    public double getAllocationsOrDefault(
        java.lang.String key,
        double defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetAllocations().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */

    public double getAllocationsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetAllocations().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearAllocations() {
      internalGetMutableAllocations().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */

    public Builder removeAllocations(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableAllocations().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Double>
    getMutableAllocations() {
      return internalGetMutableAllocations().getMutableMap();
    }
    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */
    public Builder putAllocations(
        java.lang.String key,
        double value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      
      internalGetMutableAllocations().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */

    public Builder putAllAllocations(
        java.util.Map<java.lang.String, java.lang.Double> values) {
      internalGetMutableAllocations().getMutableMap()
          .putAll(values);
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.appengine.v1.TrafficSplit)
  }

  // @@protoc_insertion_point(class_scope:google.appengine.v1.TrafficSplit)
  private static final com.google.appengine.v1.TrafficSplit DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.appengine.v1.TrafficSplit();
  }

  public static com.google.appengine.v1.TrafficSplit getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TrafficSplit>
      PARSER = new com.google.protobuf.AbstractParser<TrafficSplit>() {
    public TrafficSplit parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new TrafficSplit(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TrafficSplit> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TrafficSplit> getParserForType() {
    return PARSER;
  }

  public com.google.appengine.v1.TrafficSplit getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

