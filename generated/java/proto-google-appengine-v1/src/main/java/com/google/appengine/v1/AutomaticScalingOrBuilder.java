// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/version.proto

package com.google.appengine.v1;

public interface AutomaticScalingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.appengine.v1.AutomaticScaling)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Amount of time that the
   * [Autoscaler](https://cloud.google.com/compute/docs/autoscaler/)
   * should wait between changes to the number of virtual machines.
   * Only applicable for VM runtimes.
   * </pre>
   *
   * <code>.google.protobuf.Duration cool_down_period = 1;</code>
   */
  boolean hasCoolDownPeriod();
  /**
   * <pre>
   * Amount of time that the
   * [Autoscaler](https://cloud.google.com/compute/docs/autoscaler/)
   * should wait between changes to the number of virtual machines.
   * Only applicable for VM runtimes.
   * </pre>
   *
   * <code>.google.protobuf.Duration cool_down_period = 1;</code>
   */
  com.google.protobuf.Duration getCoolDownPeriod();
  /**
   * <pre>
   * Amount of time that the
   * [Autoscaler](https://cloud.google.com/compute/docs/autoscaler/)
   * should wait between changes to the number of virtual machines.
   * Only applicable for VM runtimes.
   * </pre>
   *
   * <code>.google.protobuf.Duration cool_down_period = 1;</code>
   */
  com.google.protobuf.DurationOrBuilder getCoolDownPeriodOrBuilder();

  /**
   * <pre>
   * Target scaling by CPU usage.
   * </pre>
   *
   * <code>.google.appengine.v1.CpuUtilization cpu_utilization = 2;</code>
   */
  boolean hasCpuUtilization();
  /**
   * <pre>
   * Target scaling by CPU usage.
   * </pre>
   *
   * <code>.google.appengine.v1.CpuUtilization cpu_utilization = 2;</code>
   */
  com.google.appengine.v1.CpuUtilization getCpuUtilization();
  /**
   * <pre>
   * Target scaling by CPU usage.
   * </pre>
   *
   * <code>.google.appengine.v1.CpuUtilization cpu_utilization = 2;</code>
   */
  com.google.appengine.v1.CpuUtilizationOrBuilder getCpuUtilizationOrBuilder();

  /**
   * <pre>
   * Number of concurrent requests an automatic scaling instance can accept
   * before the scheduler spawns a new instance.
   * Defaults to a runtime-specific value.
   * </pre>
   *
   * <code>int32 max_concurrent_requests = 3;</code>
   */
  int getMaxConcurrentRequests();

  /**
   * <pre>
   * Maximum number of idle instances that should be maintained for this
   * version.
   * </pre>
   *
   * <code>int32 max_idle_instances = 4;</code>
   */
  int getMaxIdleInstances();

  /**
   * <pre>
   * Maximum number of instances that should be started to handle requests.
   * </pre>
   *
   * <code>int32 max_total_instances = 5;</code>
   */
  int getMaxTotalInstances();

  /**
   * <pre>
   * Maximum amount of time that a request should wait in the pending queue
   * before starting a new instance to handle it.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_pending_latency = 6;</code>
   */
  boolean hasMaxPendingLatency();
  /**
   * <pre>
   * Maximum amount of time that a request should wait in the pending queue
   * before starting a new instance to handle it.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_pending_latency = 6;</code>
   */
  com.google.protobuf.Duration getMaxPendingLatency();
  /**
   * <pre>
   * Maximum amount of time that a request should wait in the pending queue
   * before starting a new instance to handle it.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_pending_latency = 6;</code>
   */
  com.google.protobuf.DurationOrBuilder getMaxPendingLatencyOrBuilder();

  /**
   * <pre>
   * Minimum number of idle instances that should be maintained for
   * this version. Only applicable for the default version of a service.
   * </pre>
   *
   * <code>int32 min_idle_instances = 7;</code>
   */
  int getMinIdleInstances();

  /**
   * <pre>
   * Minimum number of instances that should be maintained for this version.
   * </pre>
   *
   * <code>int32 min_total_instances = 8;</code>
   */
  int getMinTotalInstances();

  /**
   * <pre>
   * Minimum amount of time a request should wait in the pending queue before
   * starting a new instance to handle it.
   * </pre>
   *
   * <code>.google.protobuf.Duration min_pending_latency = 9;</code>
   */
  boolean hasMinPendingLatency();
  /**
   * <pre>
   * Minimum amount of time a request should wait in the pending queue before
   * starting a new instance to handle it.
   * </pre>
   *
   * <code>.google.protobuf.Duration min_pending_latency = 9;</code>
   */
  com.google.protobuf.Duration getMinPendingLatency();
  /**
   * <pre>
   * Minimum amount of time a request should wait in the pending queue before
   * starting a new instance to handle it.
   * </pre>
   *
   * <code>.google.protobuf.Duration min_pending_latency = 9;</code>
   */
  com.google.protobuf.DurationOrBuilder getMinPendingLatencyOrBuilder();

  /**
   * <pre>
   * Target scaling by request utilization.
   * </pre>
   *
   * <code>.google.appengine.v1.RequestUtilization request_utilization = 10;</code>
   */
  boolean hasRequestUtilization();
  /**
   * <pre>
   * Target scaling by request utilization.
   * </pre>
   *
   * <code>.google.appengine.v1.RequestUtilization request_utilization = 10;</code>
   */
  com.google.appengine.v1.RequestUtilization getRequestUtilization();
  /**
   * <pre>
   * Target scaling by request utilization.
   * </pre>
   *
   * <code>.google.appengine.v1.RequestUtilization request_utilization = 10;</code>
   */
  com.google.appengine.v1.RequestUtilizationOrBuilder getRequestUtilizationOrBuilder();

  /**
   * <pre>
   * Target scaling by disk usage.
   * </pre>
   *
   * <code>.google.appengine.v1.DiskUtilization disk_utilization = 11;</code>
   */
  boolean hasDiskUtilization();
  /**
   * <pre>
   * Target scaling by disk usage.
   * </pre>
   *
   * <code>.google.appengine.v1.DiskUtilization disk_utilization = 11;</code>
   */
  com.google.appengine.v1.DiskUtilization getDiskUtilization();
  /**
   * <pre>
   * Target scaling by disk usage.
   * </pre>
   *
   * <code>.google.appengine.v1.DiskUtilization disk_utilization = 11;</code>
   */
  com.google.appengine.v1.DiskUtilizationOrBuilder getDiskUtilizationOrBuilder();

  /**
   * <pre>
   * Target scaling by network usage.
   * </pre>
   *
   * <code>.google.appengine.v1.NetworkUtilization network_utilization = 12;</code>
   */
  boolean hasNetworkUtilization();
  /**
   * <pre>
   * Target scaling by network usage.
   * </pre>
   *
   * <code>.google.appengine.v1.NetworkUtilization network_utilization = 12;</code>
   */
  com.google.appengine.v1.NetworkUtilization getNetworkUtilization();
  /**
   * <pre>
   * Target scaling by network usage.
   * </pre>
   *
   * <code>.google.appengine.v1.NetworkUtilization network_utilization = 12;</code>
   */
  com.google.appengine.v1.NetworkUtilizationOrBuilder getNetworkUtilizationOrBuilder();
}
