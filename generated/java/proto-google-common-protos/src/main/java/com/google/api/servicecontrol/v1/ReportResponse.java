// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto

package com.google.api.servicecontrol.v1;

/**
 * <pre>
 * Response message for the Report method.
 * </pre>
 *
 * Protobuf type {@code google.api.servicecontrol.v1.ReportResponse}
 */
public  final class ReportResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.api.servicecontrol.v1.ReportResponse)
    ReportResponseOrBuilder {
  // Use ReportResponse.newBuilder() to construct.
  private ReportResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ReportResponse() {
    reportErrors_ = java.util.Collections.emptyList();
    serviceConfigId_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ReportResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              reportErrors_ = new java.util.ArrayList<com.google.api.servicecontrol.v1.ReportResponse.ReportError>();
              mutable_bitField0_ |= 0x00000001;
            }
            reportErrors_.add(
                input.readMessage(com.google.api.servicecontrol.v1.ReportResponse.ReportError.parser(), extensionRegistry));
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            serviceConfigId_ = s;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        reportErrors_ = java.util.Collections.unmodifiableList(reportErrors_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.api.servicecontrol.v1.ReportResponse.class, com.google.api.servicecontrol.v1.ReportResponse.Builder.class);
  }

  public interface ReportErrorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.api.servicecontrol.v1.ReportResponse.ReportError)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    java.lang.String getOperationId();
    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getOperationIdBytes();

    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    boolean hasStatus();
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    com.google.rpc.Status getStatus();
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    com.google.rpc.StatusOrBuilder getStatusOrBuilder();
  }
  /**
   * <pre>
   * Represents the processing error of one `Operation` in the request.
   * </pre>
   *
   * Protobuf type {@code google.api.servicecontrol.v1.ReportResponse.ReportError}
   */
  public  static final class ReportError extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.api.servicecontrol.v1.ReportResponse.ReportError)
      ReportErrorOrBuilder {
    // Use ReportError.newBuilder() to construct.
    private ReportError(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ReportError() {
      operationId_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private ReportError(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              operationId_ = s;
              break;
            }
            case 18: {
              com.google.rpc.Status.Builder subBuilder = null;
              if (status_ != null) {
                subBuilder = status_.toBuilder();
              }
              status_ = input.readMessage(com.google.rpc.Status.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(status_);
                status_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_ReportError_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_ReportError_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.api.servicecontrol.v1.ReportResponse.ReportError.class, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder.class);
    }

    public static final int OPERATION_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object operationId_;
    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    public java.lang.String getOperationId() {
      java.lang.Object ref = operationId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        operationId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
     * </pre>
     *
     * <code>optional string operation_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getOperationIdBytes() {
      java.lang.Object ref = operationId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        operationId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATUS_FIELD_NUMBER = 2;
    private com.google.rpc.Status status_;
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    public boolean hasStatus() {
      return status_ != null;
    }
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    public com.google.rpc.Status getStatus() {
      return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
    }
    /**
     * <pre>
     * Details of the error when processing the `Operation`.
     * </pre>
     *
     * <code>optional .google.rpc.Status status = 2;</code>
     */
    public com.google.rpc.StatusOrBuilder getStatusOrBuilder() {
      return getStatus();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getOperationIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, operationId_);
      }
      if (status_ != null) {
        output.writeMessage(2, getStatus());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getOperationIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, operationId_);
      }
      if (status_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getStatus());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.api.servicecontrol.v1.ReportResponse.ReportError)) {
        return super.equals(obj);
      }
      com.google.api.servicecontrol.v1.ReportResponse.ReportError other = (com.google.api.servicecontrol.v1.ReportResponse.ReportError) obj;

      boolean result = true;
      result = result && getOperationId()
          .equals(other.getOperationId());
      result = result && (hasStatus() == other.hasStatus());
      if (hasStatus()) {
        result = result && getStatus()
            .equals(other.getStatus());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + OPERATION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getOperationId().hashCode();
      if (hasStatus()) {
        hash = (37 * hash) + STATUS_FIELD_NUMBER;
        hash = (53 * hash) + getStatus().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.api.servicecontrol.v1.ReportResponse.ReportError prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Represents the processing error of one `Operation` in the request.
     * </pre>
     *
     * Protobuf type {@code google.api.servicecontrol.v1.ReportResponse.ReportError}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.api.servicecontrol.v1.ReportResponse.ReportError)
        com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_ReportError_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_ReportError_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.api.servicecontrol.v1.ReportResponse.ReportError.class, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder.class);
      }

      // Construct using com.google.api.servicecontrol.v1.ReportResponse.ReportError.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        operationId_ = "";

        if (statusBuilder_ == null) {
          status_ = null;
        } else {
          status_ = null;
          statusBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_ReportError_descriptor;
      }

      public com.google.api.servicecontrol.v1.ReportResponse.ReportError getDefaultInstanceForType() {
        return com.google.api.servicecontrol.v1.ReportResponse.ReportError.getDefaultInstance();
      }

      public com.google.api.servicecontrol.v1.ReportResponse.ReportError build() {
        com.google.api.servicecontrol.v1.ReportResponse.ReportError result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.api.servicecontrol.v1.ReportResponse.ReportError buildPartial() {
        com.google.api.servicecontrol.v1.ReportResponse.ReportError result = new com.google.api.servicecontrol.v1.ReportResponse.ReportError(this);
        result.operationId_ = operationId_;
        if (statusBuilder_ == null) {
          result.status_ = status_;
        } else {
          result.status_ = statusBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.api.servicecontrol.v1.ReportResponse.ReportError) {
          return mergeFrom((com.google.api.servicecontrol.v1.ReportResponse.ReportError)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.api.servicecontrol.v1.ReportResponse.ReportError other) {
        if (other == com.google.api.servicecontrol.v1.ReportResponse.ReportError.getDefaultInstance()) return this;
        if (!other.getOperationId().isEmpty()) {
          operationId_ = other.operationId_;
          onChanged();
        }
        if (other.hasStatus()) {
          mergeStatus(other.getStatus());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.api.servicecontrol.v1.ReportResponse.ReportError parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.api.servicecontrol.v1.ReportResponse.ReportError) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object operationId_ = "";
      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public java.lang.String getOperationId() {
        java.lang.Object ref = operationId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          operationId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getOperationIdBytes() {
        java.lang.Object ref = operationId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          operationId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public Builder setOperationId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        operationId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public Builder clearOperationId() {
        
        operationId_ = getDefaultInstance().getOperationId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
       * </pre>
       *
       * <code>optional string operation_id = 1;</code>
       */
      public Builder setOperationIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        operationId_ = value;
        onChanged();
        return this;
      }

      private com.google.rpc.Status status_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder> statusBuilder_;
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public boolean hasStatus() {
        return statusBuilder_ != null || status_ != null;
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public com.google.rpc.Status getStatus() {
        if (statusBuilder_ == null) {
          return status_ == null ? com.google.rpc.Status.getDefaultInstance() : status_;
        } else {
          return statusBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public Builder setStatus(com.google.rpc.Status value) {
        if (statusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          status_ = value;
          onChanged();
        } else {
          statusBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public Builder setStatus(
          com.google.rpc.Status.Builder builderForValue) {
        if (statusBuilder_ == null) {
          status_ = builderForValue.build();
          onChanged();
        } else {
          statusBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public Builder mergeStatus(com.google.rpc.Status value) {
        if (statusBuilder_ == null) {
          if (status_ != null) {
            status_ =
              com.google.rpc.Status.newBuilder(status_).mergeFrom(value).buildPartial();
          } else {
            status_ = value;
          }
          onChanged();
        } else {
          statusBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public Builder clearStatus() {
        if (statusBuilder_ == null) {
          status_ = null;
          onChanged();
        } else {
          status_ = null;
          statusBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public com.google.rpc.Status.Builder getStatusBuilder() {
        
        onChanged();
        return getStatusFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      public com.google.rpc.StatusOrBuilder getStatusOrBuilder() {
        if (statusBuilder_ != null) {
          return statusBuilder_.getMessageOrBuilder();
        } else {
          return status_ == null ?
              com.google.rpc.Status.getDefaultInstance() : status_;
        }
      }
      /**
       * <pre>
       * Details of the error when processing the `Operation`.
       * </pre>
       *
       * <code>optional .google.rpc.Status status = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder> 
          getStatusFieldBuilder() {
        if (statusBuilder_ == null) {
          statusBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder>(
                  getStatus(),
                  getParentForChildren(),
                  isClean());
          status_ = null;
        }
        return statusBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:google.api.servicecontrol.v1.ReportResponse.ReportError)
    }

    // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse.ReportError)
    private static final com.google.api.servicecontrol.v1.ReportResponse.ReportError DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.api.servicecontrol.v1.ReportResponse.ReportError();
    }

    public static com.google.api.servicecontrol.v1.ReportResponse.ReportError getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReportError>
        PARSER = new com.google.protobuf.AbstractParser<ReportError>() {
      public ReportError parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ReportError(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ReportError> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ReportError> getParserForType() {
      return PARSER;
    }

    public com.google.api.servicecontrol.v1.ReportResponse.ReportError getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int REPORT_ERRORS_FIELD_NUMBER = 1;
  private java.util.List<com.google.api.servicecontrol.v1.ReportResponse.ReportError> reportErrors_;
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public java.util.List<com.google.api.servicecontrol.v1.ReportResponse.ReportError> getReportErrorsList() {
    return reportErrors_;
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public java.util.List<? extends com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder> 
      getReportErrorsOrBuilderList() {
    return reportErrors_;
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public int getReportErrorsCount() {
    return reportErrors_.size();
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public com.google.api.servicecontrol.v1.ReportResponse.ReportError getReportErrors(int index) {
    return reportErrors_.get(index);
  }
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a complete failure where none of the
   *    `Operations` in the request succeeded.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  public com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder getReportErrorsOrBuilder(
      int index) {
    return reportErrors_.get(index);
  }

  public static final int SERVICE_CONFIG_ID_FIELD_NUMBER = 2;
  private volatile java.lang.Object serviceConfigId_;
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 2;</code>
   */
  public java.lang.String getServiceConfigId() {
    java.lang.Object ref = serviceConfigId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      serviceConfigId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>optional string service_config_id = 2;</code>
   */
  public com.google.protobuf.ByteString
      getServiceConfigIdBytes() {
    java.lang.Object ref = serviceConfigId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      serviceConfigId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < reportErrors_.size(); i++) {
      output.writeMessage(1, reportErrors_.get(i));
    }
    if (!getServiceConfigIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, serviceConfigId_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < reportErrors_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, reportErrors_.get(i));
    }
    if (!getServiceConfigIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, serviceConfigId_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.api.servicecontrol.v1.ReportResponse)) {
      return super.equals(obj);
    }
    com.google.api.servicecontrol.v1.ReportResponse other = (com.google.api.servicecontrol.v1.ReportResponse) obj;

    boolean result = true;
    result = result && getReportErrorsList()
        .equals(other.getReportErrorsList());
    result = result && getServiceConfigId()
        .equals(other.getServiceConfigId());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (getReportErrorsCount() > 0) {
      hash = (37 * hash) + REPORT_ERRORS_FIELD_NUMBER;
      hash = (53 * hash) + getReportErrorsList().hashCode();
    }
    hash = (37 * hash) + SERVICE_CONFIG_ID_FIELD_NUMBER;
    hash = (53 * hash) + getServiceConfigId().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.api.servicecontrol.v1.ReportResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.servicecontrol.v1.ReportResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Response message for the Report method.
   * </pre>
   *
   * Protobuf type {@code google.api.servicecontrol.v1.ReportResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.servicecontrol.v1.ReportResponse)
      com.google.api.servicecontrol.v1.ReportResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.api.servicecontrol.v1.ReportResponse.class, com.google.api.servicecontrol.v1.ReportResponse.Builder.class);
    }

    // Construct using com.google.api.servicecontrol.v1.ReportResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getReportErrorsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (reportErrorsBuilder_ == null) {
        reportErrors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        reportErrorsBuilder_.clear();
      }
      serviceConfigId_ = "";

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.api.servicecontrol.v1.ServiceControllerProto.internal_static_google_api_servicecontrol_v1_ReportResponse_descriptor;
    }

    public com.google.api.servicecontrol.v1.ReportResponse getDefaultInstanceForType() {
      return com.google.api.servicecontrol.v1.ReportResponse.getDefaultInstance();
    }

    public com.google.api.servicecontrol.v1.ReportResponse build() {
      com.google.api.servicecontrol.v1.ReportResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.api.servicecontrol.v1.ReportResponse buildPartial() {
      com.google.api.servicecontrol.v1.ReportResponse result = new com.google.api.servicecontrol.v1.ReportResponse(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (reportErrorsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          reportErrors_ = java.util.Collections.unmodifiableList(reportErrors_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.reportErrors_ = reportErrors_;
      } else {
        result.reportErrors_ = reportErrorsBuilder_.build();
      }
      result.serviceConfigId_ = serviceConfigId_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.api.servicecontrol.v1.ReportResponse) {
        return mergeFrom((com.google.api.servicecontrol.v1.ReportResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.api.servicecontrol.v1.ReportResponse other) {
      if (other == com.google.api.servicecontrol.v1.ReportResponse.getDefaultInstance()) return this;
      if (reportErrorsBuilder_ == null) {
        if (!other.reportErrors_.isEmpty()) {
          if (reportErrors_.isEmpty()) {
            reportErrors_ = other.reportErrors_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureReportErrorsIsMutable();
            reportErrors_.addAll(other.reportErrors_);
          }
          onChanged();
        }
      } else {
        if (!other.reportErrors_.isEmpty()) {
          if (reportErrorsBuilder_.isEmpty()) {
            reportErrorsBuilder_.dispose();
            reportErrorsBuilder_ = null;
            reportErrors_ = other.reportErrors_;
            bitField0_ = (bitField0_ & ~0x00000001);
            reportErrorsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getReportErrorsFieldBuilder() : null;
          } else {
            reportErrorsBuilder_.addAllMessages(other.reportErrors_);
          }
        }
      }
      if (!other.getServiceConfigId().isEmpty()) {
        serviceConfigId_ = other.serviceConfigId_;
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.api.servicecontrol.v1.ReportResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.api.servicecontrol.v1.ReportResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.api.servicecontrol.v1.ReportResponse.ReportError> reportErrors_ =
      java.util.Collections.emptyList();
    private void ensureReportErrorsIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        reportErrors_ = new java.util.ArrayList<com.google.api.servicecontrol.v1.ReportResponse.ReportError>(reportErrors_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.api.servicecontrol.v1.ReportResponse.ReportError, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder, com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder> reportErrorsBuilder_;

    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public java.util.List<com.google.api.servicecontrol.v1.ReportResponse.ReportError> getReportErrorsList() {
      if (reportErrorsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(reportErrors_);
      } else {
        return reportErrorsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public int getReportErrorsCount() {
      if (reportErrorsBuilder_ == null) {
        return reportErrors_.size();
      } else {
        return reportErrorsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public com.google.api.servicecontrol.v1.ReportResponse.ReportError getReportErrors(int index) {
      if (reportErrorsBuilder_ == null) {
        return reportErrors_.get(index);
      } else {
        return reportErrorsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder setReportErrors(
        int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError value) {
      if (reportErrorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReportErrorsIsMutable();
        reportErrors_.set(index, value);
        onChanged();
      } else {
        reportErrorsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder setReportErrors(
        int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder builderForValue) {
      if (reportErrorsBuilder_ == null) {
        ensureReportErrorsIsMutable();
        reportErrors_.set(index, builderForValue.build());
        onChanged();
      } else {
        reportErrorsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addReportErrors(com.google.api.servicecontrol.v1.ReportResponse.ReportError value) {
      if (reportErrorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReportErrorsIsMutable();
        reportErrors_.add(value);
        onChanged();
      } else {
        reportErrorsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addReportErrors(
        int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError value) {
      if (reportErrorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReportErrorsIsMutable();
        reportErrors_.add(index, value);
        onChanged();
      } else {
        reportErrorsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addReportErrors(
        com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder builderForValue) {
      if (reportErrorsBuilder_ == null) {
        ensureReportErrorsIsMutable();
        reportErrors_.add(builderForValue.build());
        onChanged();
      } else {
        reportErrorsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addReportErrors(
        int index, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder builderForValue) {
      if (reportErrorsBuilder_ == null) {
        ensureReportErrorsIsMutable();
        reportErrors_.add(index, builderForValue.build());
        onChanged();
      } else {
        reportErrorsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder addAllReportErrors(
        java.lang.Iterable<? extends com.google.api.servicecontrol.v1.ReportResponse.ReportError> values) {
      if (reportErrorsBuilder_ == null) {
        ensureReportErrorsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, reportErrors_);
        onChanged();
      } else {
        reportErrorsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder clearReportErrors() {
      if (reportErrorsBuilder_ == null) {
        reportErrors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        reportErrorsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public Builder removeReportErrors(int index) {
      if (reportErrorsBuilder_ == null) {
        ensureReportErrorsIsMutable();
        reportErrors_.remove(index);
        onChanged();
      } else {
        reportErrorsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder getReportErrorsBuilder(
        int index) {
      return getReportErrorsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder getReportErrorsOrBuilder(
        int index) {
      if (reportErrorsBuilder_ == null) {
        return reportErrors_.get(index);  } else {
        return reportErrorsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public java.util.List<? extends com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder> 
         getReportErrorsOrBuilderList() {
      if (reportErrorsBuilder_ != null) {
        return reportErrorsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(reportErrors_);
      }
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder addReportErrorsBuilder() {
      return getReportErrorsFieldBuilder().addBuilder(
          com.google.api.servicecontrol.v1.ReportResponse.ReportError.getDefaultInstance());
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder addReportErrorsBuilder(
        int index) {
      return getReportErrorsFieldBuilder().addBuilder(
          index, com.google.api.servicecontrol.v1.ReportResponse.ReportError.getDefaultInstance());
    }
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public java.util.List<com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder> 
         getReportErrorsBuilderList() {
      return getReportErrorsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.api.servicecontrol.v1.ReportResponse.ReportError, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder, com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder> 
        getReportErrorsFieldBuilder() {
      if (reportErrorsBuilder_ == null) {
        reportErrorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.api.servicecontrol.v1.ReportResponse.ReportError, com.google.api.servicecontrol.v1.ReportResponse.ReportError.Builder, com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder>(
                reportErrors_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        reportErrors_ = null;
      }
      return reportErrorsBuilder_;
    }

    private java.lang.Object serviceConfigId_ = "";
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public java.lang.String getServiceConfigId() {
      java.lang.Object ref = serviceConfigId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        serviceConfigId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getServiceConfigIdBytes() {
      java.lang.Object ref = serviceConfigId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        serviceConfigId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public Builder setServiceConfigId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      serviceConfigId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public Builder clearServiceConfigId() {
      
      serviceConfigId_ = getDefaultInstance().getServiceConfigId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>optional string service_config_id = 2;</code>
     */
    public Builder setServiceConfigIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      serviceConfigId_ = value;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.api.servicecontrol.v1.ReportResponse)
  }

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse)
  private static final com.google.api.servicecontrol.v1.ReportResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.api.servicecontrol.v1.ReportResponse();
  }

  public static com.google.api.servicecontrol.v1.ReportResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ReportResponse>
      PARSER = new com.google.protobuf.AbstractParser<ReportResponse>() {
    public ReportResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReportResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ReportResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ReportResponse> getParserForType() {
    return PARSER;
  }

  public com.google.api.servicecontrol.v1.ReportResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

