// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/logging.proto

package com.google.api;

/**
 * <pre>
 * Logging configuration of the service.
 * The following example shows how to configure logs to be sent to the
 * producer and consumer projects. In the example, the `activity_history`
 * log is sent to both the producer and consumer projects, whereas the
 * `purchase_history` log is only sent to the producer project.
 *     monitored_resources:
 *     - type: library.googleapis.com/branch
 *       labels:
 *       - key: /city
 *         description: The city where the library branch is located in.
 *       - key: /name
 *         description: The name of the branch.
 *     logs:
 *     - name: activity_history
 *       labels:
 *       - key: /customer_id
 *     - name: purchase_history
 *     logging:
 *       producer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         logs:
 *         - activity_history
 *         - purchase_history
 *       consumer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         logs:
 *         - activity_history
 * </pre>
 *
 * Protobuf type {@code google.api.Logging}
 */
public  final class Logging extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.api.Logging)
    LoggingOrBuilder {
  // Use Logging.newBuilder() to construct.
  private Logging(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Logging() {
    producerDestinations_ = java.util.Collections.emptyList();
    consumerDestinations_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private Logging(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              producerDestinations_ = new java.util.ArrayList<com.google.api.Logging.LoggingDestination>();
              mutable_bitField0_ |= 0x00000001;
            }
            producerDestinations_.add(
                input.readMessage(com.google.api.Logging.LoggingDestination.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              consumerDestinations_ = new java.util.ArrayList<com.google.api.Logging.LoggingDestination>();
              mutable_bitField0_ |= 0x00000002;
            }
            consumerDestinations_.add(
                input.readMessage(com.google.api.Logging.LoggingDestination.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        producerDestinations_ = java.util.Collections.unmodifiableList(producerDestinations_);
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        consumerDestinations_ = java.util.Collections.unmodifiableList(consumerDestinations_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.api.LoggingProto.internal_static_google_api_Logging_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.api.LoggingProto.internal_static_google_api_Logging_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.api.Logging.class, com.google.api.Logging.Builder.class);
  }

  public interface LoggingDestinationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.api.Logging.LoggingDestination)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The monitored resource type. The type must be defined in the
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>string monitored_resource = 3;</code>
     */
    java.lang.String getMonitoredResource();
    /**
     * <pre>
     * The monitored resource type. The type must be defined in the
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>string monitored_resource = 3;</code>
     */
    com.google.protobuf.ByteString
        getMonitoredResourceBytes();

    /**
     * <pre>
     * Names of the logs to be sent to this destination. Each name must
     * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
     * not a domain scoped name, it will be automatically prefixed with
     * the service name followed by "/".
     * </pre>
     *
     * <code>repeated string logs = 1;</code>
     */
    java.util.List<java.lang.String>
        getLogsList();
    /**
     * <pre>
     * Names of the logs to be sent to this destination. Each name must
     * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
     * not a domain scoped name, it will be automatically prefixed with
     * the service name followed by "/".
     * </pre>
     *
     * <code>repeated string logs = 1;</code>
     */
    int getLogsCount();
    /**
     * <pre>
     * Names of the logs to be sent to this destination. Each name must
     * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
     * not a domain scoped name, it will be automatically prefixed with
     * the service name followed by "/".
     * </pre>
     *
     * <code>repeated string logs = 1;</code>
     */
    java.lang.String getLogs(int index);
    /**
     * <pre>
     * Names of the logs to be sent to this destination. Each name must
     * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
     * not a domain scoped name, it will be automatically prefixed with
     * the service name followed by "/".
     * </pre>
     *
     * <code>repeated string logs = 1;</code>
     */
    com.google.protobuf.ByteString
        getLogsBytes(int index);
  }
  /**
   * <pre>
   * Configuration of a specific logging destination (the producer project
   * or the consumer project).
   * </pre>
   *
   * Protobuf type {@code google.api.Logging.LoggingDestination}
   */
  public  static final class LoggingDestination extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.api.Logging.LoggingDestination)
      LoggingDestinationOrBuilder {
    // Use LoggingDestination.newBuilder() to construct.
    private LoggingDestination(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LoggingDestination() {
      monitoredResource_ = "";
      logs_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private LoggingDestination(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                logs_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              logs_.add(s);
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              monitoredResource_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          logs_ = logs_.getUnmodifiableView();
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.api.LoggingProto.internal_static_google_api_Logging_LoggingDestination_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.api.LoggingProto.internal_static_google_api_Logging_LoggingDestination_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.api.Logging.LoggingDestination.class, com.google.api.Logging.LoggingDestination.Builder.class);
    }

    private int bitField0_;
    public static final int MONITORED_RESOURCE_FIELD_NUMBER = 3;
    private volatile java.lang.Object monitoredResource_;
    /**
     * <pre>
     * The monitored resource type. The type must be defined in the
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>string monitored_resource = 3;</code>
     */
    public java.lang.String getMonitoredResource() {
      java.lang.Object ref = monitoredResource_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        monitoredResource_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The monitored resource type. The type must be defined in the
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     * </pre>
     *
     * <code>string monitored_resource = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMonitoredResourceBytes() {
      java.lang.Object ref = monitoredResource_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        monitoredResource_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOGS_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList logs_;
    /**
     * <pre>
     * Names of the logs to be sent to this destination. Each name must
     * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
     * not a domain scoped name, it will be automatically prefixed with
     * the service name followed by "/".
     * </pre>
     *
     * <code>repeated string logs = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getLogsList() {
      return logs_;
    }
    /**
     * <pre>
     * Names of the logs to be sent to this destination. Each name must
     * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
     * not a domain scoped name, it will be automatically prefixed with
     * the service name followed by "/".
     * </pre>
     *
     * <code>repeated string logs = 1;</code>
     */
    public int getLogsCount() {
      return logs_.size();
    }
    /**
     * <pre>
     * Names of the logs to be sent to this destination. Each name must
     * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
     * not a domain scoped name, it will be automatically prefixed with
     * the service name followed by "/".
     * </pre>
     *
     * <code>repeated string logs = 1;</code>
     */
    public java.lang.String getLogs(int index) {
      return logs_.get(index);
    }
    /**
     * <pre>
     * Names of the logs to be sent to this destination. Each name must
     * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
     * not a domain scoped name, it will be automatically prefixed with
     * the service name followed by "/".
     * </pre>
     *
     * <code>repeated string logs = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLogsBytes(int index) {
      return logs_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < logs_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, logs_.getRaw(i));
      }
      if (!getMonitoredResourceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, monitoredResource_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < logs_.size(); i++) {
          dataSize += computeStringSizeNoTag(logs_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getLogsList().size();
      }
      if (!getMonitoredResourceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, monitoredResource_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.api.Logging.LoggingDestination)) {
        return super.equals(obj);
      }
      com.google.api.Logging.LoggingDestination other = (com.google.api.Logging.LoggingDestination) obj;

      boolean result = true;
      result = result && getMonitoredResource()
          .equals(other.getMonitoredResource());
      result = result && getLogsList()
          .equals(other.getLogsList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MONITORED_RESOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getMonitoredResource().hashCode();
      if (getLogsCount() > 0) {
        hash = (37 * hash) + LOGS_FIELD_NUMBER;
        hash = (53 * hash) + getLogsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.api.Logging.LoggingDestination parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.api.Logging.LoggingDestination parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.api.Logging.LoggingDestination parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.api.Logging.LoggingDestination parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.api.Logging.LoggingDestination parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.api.Logging.LoggingDestination parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.api.Logging.LoggingDestination parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.api.Logging.LoggingDestination parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.api.Logging.LoggingDestination parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.api.Logging.LoggingDestination parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.api.Logging.LoggingDestination parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.api.Logging.LoggingDestination parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.api.Logging.LoggingDestination prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Configuration of a specific logging destination (the producer project
     * or the consumer project).
     * </pre>
     *
     * Protobuf type {@code google.api.Logging.LoggingDestination}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.api.Logging.LoggingDestination)
        com.google.api.Logging.LoggingDestinationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.api.LoggingProto.internal_static_google_api_Logging_LoggingDestination_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.api.LoggingProto.internal_static_google_api_Logging_LoggingDestination_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.api.Logging.LoggingDestination.class, com.google.api.Logging.LoggingDestination.Builder.class);
      }

      // Construct using com.google.api.Logging.LoggingDestination.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        monitoredResource_ = "";

        logs_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.api.LoggingProto.internal_static_google_api_Logging_LoggingDestination_descriptor;
      }

      public com.google.api.Logging.LoggingDestination getDefaultInstanceForType() {
        return com.google.api.Logging.LoggingDestination.getDefaultInstance();
      }

      public com.google.api.Logging.LoggingDestination build() {
        com.google.api.Logging.LoggingDestination result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.api.Logging.LoggingDestination buildPartial() {
        com.google.api.Logging.LoggingDestination result = new com.google.api.Logging.LoggingDestination(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.monitoredResource_ = monitoredResource_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          logs_ = logs_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.logs_ = logs_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.api.Logging.LoggingDestination) {
          return mergeFrom((com.google.api.Logging.LoggingDestination)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.api.Logging.LoggingDestination other) {
        if (other == com.google.api.Logging.LoggingDestination.getDefaultInstance()) return this;
        if (!other.getMonitoredResource().isEmpty()) {
          monitoredResource_ = other.monitoredResource_;
          onChanged();
        }
        if (!other.logs_.isEmpty()) {
          if (logs_.isEmpty()) {
            logs_ = other.logs_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLogsIsMutable();
            logs_.addAll(other.logs_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.api.Logging.LoggingDestination parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.api.Logging.LoggingDestination) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object monitoredResource_ = "";
      /**
       * <pre>
       * The monitored resource type. The type must be defined in the
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>string monitored_resource = 3;</code>
       */
      public java.lang.String getMonitoredResource() {
        java.lang.Object ref = monitoredResource_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          monitoredResource_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The monitored resource type. The type must be defined in the
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>string monitored_resource = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMonitoredResourceBytes() {
        java.lang.Object ref = monitoredResource_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          monitoredResource_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The monitored resource type. The type must be defined in the
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>string monitored_resource = 3;</code>
       */
      public Builder setMonitoredResource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        monitoredResource_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The monitored resource type. The type must be defined in the
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>string monitored_resource = 3;</code>
       */
      public Builder clearMonitoredResource() {
        
        monitoredResource_ = getDefaultInstance().getMonitoredResource();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The monitored resource type. The type must be defined in the
       * [Service.monitored_resources][google.api.Service.monitored_resources] section.
       * </pre>
       *
       * <code>string monitored_resource = 3;</code>
       */
      public Builder setMonitoredResourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        monitoredResource_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList logs_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureLogsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          logs_ = new com.google.protobuf.LazyStringArrayList(logs_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Names of the logs to be sent to this destination. Each name must
       * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
       * not a domain scoped name, it will be automatically prefixed with
       * the service name followed by "/".
       * </pre>
       *
       * <code>repeated string logs = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getLogsList() {
        return logs_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Names of the logs to be sent to this destination. Each name must
       * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
       * not a domain scoped name, it will be automatically prefixed with
       * the service name followed by "/".
       * </pre>
       *
       * <code>repeated string logs = 1;</code>
       */
      public int getLogsCount() {
        return logs_.size();
      }
      /**
       * <pre>
       * Names of the logs to be sent to this destination. Each name must
       * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
       * not a domain scoped name, it will be automatically prefixed with
       * the service name followed by "/".
       * </pre>
       *
       * <code>repeated string logs = 1;</code>
       */
      public java.lang.String getLogs(int index) {
        return logs_.get(index);
      }
      /**
       * <pre>
       * Names of the logs to be sent to this destination. Each name must
       * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
       * not a domain scoped name, it will be automatically prefixed with
       * the service name followed by "/".
       * </pre>
       *
       * <code>repeated string logs = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLogsBytes(int index) {
        return logs_.getByteString(index);
      }
      /**
       * <pre>
       * Names of the logs to be sent to this destination. Each name must
       * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
       * not a domain scoped name, it will be automatically prefixed with
       * the service name followed by "/".
       * </pre>
       *
       * <code>repeated string logs = 1;</code>
       */
      public Builder setLogs(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLogsIsMutable();
        logs_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of the logs to be sent to this destination. Each name must
       * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
       * not a domain scoped name, it will be automatically prefixed with
       * the service name followed by "/".
       * </pre>
       *
       * <code>repeated string logs = 1;</code>
       */
      public Builder addLogs(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLogsIsMutable();
        logs_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of the logs to be sent to this destination. Each name must
       * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
       * not a domain scoped name, it will be automatically prefixed with
       * the service name followed by "/".
       * </pre>
       *
       * <code>repeated string logs = 1;</code>
       */
      public Builder addAllLogs(
          java.lang.Iterable<java.lang.String> values) {
        ensureLogsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, logs_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of the logs to be sent to this destination. Each name must
       * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
       * not a domain scoped name, it will be automatically prefixed with
       * the service name followed by "/".
       * </pre>
       *
       * <code>repeated string logs = 1;</code>
       */
      public Builder clearLogs() {
        logs_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Names of the logs to be sent to this destination. Each name must
       * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
       * not a domain scoped name, it will be automatically prefixed with
       * the service name followed by "/".
       * </pre>
       *
       * <code>repeated string logs = 1;</code>
       */
      public Builder addLogsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureLogsIsMutable();
        logs_.add(value);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:google.api.Logging.LoggingDestination)
    }

    // @@protoc_insertion_point(class_scope:google.api.Logging.LoggingDestination)
    private static final com.google.api.Logging.LoggingDestination DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.api.Logging.LoggingDestination();
    }

    public static com.google.api.Logging.LoggingDestination getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LoggingDestination>
        PARSER = new com.google.protobuf.AbstractParser<LoggingDestination>() {
      public LoggingDestination parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new LoggingDestination(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LoggingDestination> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LoggingDestination> getParserForType() {
      return PARSER;
    }

    public com.google.api.Logging.LoggingDestination getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int PRODUCER_DESTINATIONS_FIELD_NUMBER = 1;
  private java.util.List<com.google.api.Logging.LoggingDestination> producerDestinations_;
  /**
   * <pre>
   * Logging configurations for sending logs to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
   */
  public java.util.List<com.google.api.Logging.LoggingDestination> getProducerDestinationsList() {
    return producerDestinations_;
  }
  /**
   * <pre>
   * Logging configurations for sending logs to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
   */
  public java.util.List<? extends com.google.api.Logging.LoggingDestinationOrBuilder> 
      getProducerDestinationsOrBuilderList() {
    return producerDestinations_;
  }
  /**
   * <pre>
   * Logging configurations for sending logs to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
   */
  public int getProducerDestinationsCount() {
    return producerDestinations_.size();
  }
  /**
   * <pre>
   * Logging configurations for sending logs to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
   */
  public com.google.api.Logging.LoggingDestination getProducerDestinations(int index) {
    return producerDestinations_.get(index);
  }
  /**
   * <pre>
   * Logging configurations for sending logs to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one producer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
   */
  public com.google.api.Logging.LoggingDestinationOrBuilder getProducerDestinationsOrBuilder(
      int index) {
    return producerDestinations_.get(index);
  }

  public static final int CONSUMER_DESTINATIONS_FIELD_NUMBER = 2;
  private java.util.List<com.google.api.Logging.LoggingDestination> consumerDestinations_;
  /**
   * <pre>
   * Logging configurations for sending logs to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
   */
  public java.util.List<com.google.api.Logging.LoggingDestination> getConsumerDestinationsList() {
    return consumerDestinations_;
  }
  /**
   * <pre>
   * Logging configurations for sending logs to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
   */
  public java.util.List<? extends com.google.api.Logging.LoggingDestinationOrBuilder> 
      getConsumerDestinationsOrBuilderList() {
    return consumerDestinations_;
  }
  /**
   * <pre>
   * Logging configurations for sending logs to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
   */
  public int getConsumerDestinationsCount() {
    return consumerDestinations_.size();
  }
  /**
   * <pre>
   * Logging configurations for sending logs to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
   */
  public com.google.api.Logging.LoggingDestination getConsumerDestinations(int index) {
    return consumerDestinations_.get(index);
  }
  /**
   * <pre>
   * Logging configurations for sending logs to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A log can be used in at most
   * one consumer destination.
   * </pre>
   *
   * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
   */
  public com.google.api.Logging.LoggingDestinationOrBuilder getConsumerDestinationsOrBuilder(
      int index) {
    return consumerDestinations_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < producerDestinations_.size(); i++) {
      output.writeMessage(1, producerDestinations_.get(i));
    }
    for (int i = 0; i < consumerDestinations_.size(); i++) {
      output.writeMessage(2, consumerDestinations_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < producerDestinations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, producerDestinations_.get(i));
    }
    for (int i = 0; i < consumerDestinations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, consumerDestinations_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.api.Logging)) {
      return super.equals(obj);
    }
    com.google.api.Logging other = (com.google.api.Logging) obj;

    boolean result = true;
    result = result && getProducerDestinationsList()
        .equals(other.getProducerDestinationsList());
    result = result && getConsumerDestinationsList()
        .equals(other.getConsumerDestinationsList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getProducerDestinationsCount() > 0) {
      hash = (37 * hash) + PRODUCER_DESTINATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getProducerDestinationsList().hashCode();
    }
    if (getConsumerDestinationsCount() > 0) {
      hash = (37 * hash) + CONSUMER_DESTINATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getConsumerDestinationsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.api.Logging parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.Logging parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.Logging parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.Logging parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.Logging parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.Logging parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.Logging parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.api.Logging parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.api.Logging parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.api.Logging parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.api.Logging parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.api.Logging parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.Logging prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Logging configuration of the service.
   * The following example shows how to configure logs to be sent to the
   * producer and consumer projects. In the example, the `activity_history`
   * log is sent to both the producer and consumer projects, whereas the
   * `purchase_history` log is only sent to the producer project.
   *     monitored_resources:
   *     - type: library.googleapis.com/branch
   *       labels:
   *       - key: /city
   *         description: The city where the library branch is located in.
   *       - key: /name
   *         description: The name of the branch.
   *     logs:
   *     - name: activity_history
   *       labels:
   *       - key: /customer_id
   *     - name: purchase_history
   *     logging:
   *       producer_destinations:
   *       - monitored_resource: library.googleapis.com/branch
   *         logs:
   *         - activity_history
   *         - purchase_history
   *       consumer_destinations:
   *       - monitored_resource: library.googleapis.com/branch
   *         logs:
   *         - activity_history
   * </pre>
   *
   * Protobuf type {@code google.api.Logging}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.Logging)
      com.google.api.LoggingOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.api.LoggingProto.internal_static_google_api_Logging_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.api.LoggingProto.internal_static_google_api_Logging_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.api.Logging.class, com.google.api.Logging.Builder.class);
    }

    // Construct using com.google.api.Logging.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getProducerDestinationsFieldBuilder();
        getConsumerDestinationsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (producerDestinationsBuilder_ == null) {
        producerDestinations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        producerDestinationsBuilder_.clear();
      }
      if (consumerDestinationsBuilder_ == null) {
        consumerDestinations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        consumerDestinationsBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.api.LoggingProto.internal_static_google_api_Logging_descriptor;
    }

    public com.google.api.Logging getDefaultInstanceForType() {
      return com.google.api.Logging.getDefaultInstance();
    }

    public com.google.api.Logging build() {
      com.google.api.Logging result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.api.Logging buildPartial() {
      com.google.api.Logging result = new com.google.api.Logging(this);
      int from_bitField0_ = bitField0_;
      if (producerDestinationsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          producerDestinations_ = java.util.Collections.unmodifiableList(producerDestinations_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.producerDestinations_ = producerDestinations_;
      } else {
        result.producerDestinations_ = producerDestinationsBuilder_.build();
      }
      if (consumerDestinationsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          consumerDestinations_ = java.util.Collections.unmodifiableList(consumerDestinations_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.consumerDestinations_ = consumerDestinations_;
      } else {
        result.consumerDestinations_ = consumerDestinationsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.api.Logging) {
        return mergeFrom((com.google.api.Logging)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.api.Logging other) {
      if (other == com.google.api.Logging.getDefaultInstance()) return this;
      if (producerDestinationsBuilder_ == null) {
        if (!other.producerDestinations_.isEmpty()) {
          if (producerDestinations_.isEmpty()) {
            producerDestinations_ = other.producerDestinations_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureProducerDestinationsIsMutable();
            producerDestinations_.addAll(other.producerDestinations_);
          }
          onChanged();
        }
      } else {
        if (!other.producerDestinations_.isEmpty()) {
          if (producerDestinationsBuilder_.isEmpty()) {
            producerDestinationsBuilder_.dispose();
            producerDestinationsBuilder_ = null;
            producerDestinations_ = other.producerDestinations_;
            bitField0_ = (bitField0_ & ~0x00000001);
            producerDestinationsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getProducerDestinationsFieldBuilder() : null;
          } else {
            producerDestinationsBuilder_.addAllMessages(other.producerDestinations_);
          }
        }
      }
      if (consumerDestinationsBuilder_ == null) {
        if (!other.consumerDestinations_.isEmpty()) {
          if (consumerDestinations_.isEmpty()) {
            consumerDestinations_ = other.consumerDestinations_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureConsumerDestinationsIsMutable();
            consumerDestinations_.addAll(other.consumerDestinations_);
          }
          onChanged();
        }
      } else {
        if (!other.consumerDestinations_.isEmpty()) {
          if (consumerDestinationsBuilder_.isEmpty()) {
            consumerDestinationsBuilder_.dispose();
            consumerDestinationsBuilder_ = null;
            consumerDestinations_ = other.consumerDestinations_;
            bitField0_ = (bitField0_ & ~0x00000002);
            consumerDestinationsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getConsumerDestinationsFieldBuilder() : null;
          } else {
            consumerDestinationsBuilder_.addAllMessages(other.consumerDestinations_);
          }
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.api.Logging parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.api.Logging) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.api.Logging.LoggingDestination> producerDestinations_ =
      java.util.Collections.emptyList();
    private void ensureProducerDestinationsIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        producerDestinations_ = new java.util.ArrayList<com.google.api.Logging.LoggingDestination>(producerDestinations_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.api.Logging.LoggingDestination, com.google.api.Logging.LoggingDestination.Builder, com.google.api.Logging.LoggingDestinationOrBuilder> producerDestinationsBuilder_;

    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public java.util.List<com.google.api.Logging.LoggingDestination> getProducerDestinationsList() {
      if (producerDestinationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(producerDestinations_);
      } else {
        return producerDestinationsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public int getProducerDestinationsCount() {
      if (producerDestinationsBuilder_ == null) {
        return producerDestinations_.size();
      } else {
        return producerDestinationsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public com.google.api.Logging.LoggingDestination getProducerDestinations(int index) {
      if (producerDestinationsBuilder_ == null) {
        return producerDestinations_.get(index);
      } else {
        return producerDestinationsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public Builder setProducerDestinations(
        int index, com.google.api.Logging.LoggingDestination value) {
      if (producerDestinationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProducerDestinationsIsMutable();
        producerDestinations_.set(index, value);
        onChanged();
      } else {
        producerDestinationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public Builder setProducerDestinations(
        int index, com.google.api.Logging.LoggingDestination.Builder builderForValue) {
      if (producerDestinationsBuilder_ == null) {
        ensureProducerDestinationsIsMutable();
        producerDestinations_.set(index, builderForValue.build());
        onChanged();
      } else {
        producerDestinationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public Builder addProducerDestinations(com.google.api.Logging.LoggingDestination value) {
      if (producerDestinationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProducerDestinationsIsMutable();
        producerDestinations_.add(value);
        onChanged();
      } else {
        producerDestinationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public Builder addProducerDestinations(
        int index, com.google.api.Logging.LoggingDestination value) {
      if (producerDestinationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProducerDestinationsIsMutable();
        producerDestinations_.add(index, value);
        onChanged();
      } else {
        producerDestinationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public Builder addProducerDestinations(
        com.google.api.Logging.LoggingDestination.Builder builderForValue) {
      if (producerDestinationsBuilder_ == null) {
        ensureProducerDestinationsIsMutable();
        producerDestinations_.add(builderForValue.build());
        onChanged();
      } else {
        producerDestinationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public Builder addProducerDestinations(
        int index, com.google.api.Logging.LoggingDestination.Builder builderForValue) {
      if (producerDestinationsBuilder_ == null) {
        ensureProducerDestinationsIsMutable();
        producerDestinations_.add(index, builderForValue.build());
        onChanged();
      } else {
        producerDestinationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public Builder addAllProducerDestinations(
        java.lang.Iterable<? extends com.google.api.Logging.LoggingDestination> values) {
      if (producerDestinationsBuilder_ == null) {
        ensureProducerDestinationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, producerDestinations_);
        onChanged();
      } else {
        producerDestinationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public Builder clearProducerDestinations() {
      if (producerDestinationsBuilder_ == null) {
        producerDestinations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        producerDestinationsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public Builder removeProducerDestinations(int index) {
      if (producerDestinationsBuilder_ == null) {
        ensureProducerDestinationsIsMutable();
        producerDestinations_.remove(index);
        onChanged();
      } else {
        producerDestinationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public com.google.api.Logging.LoggingDestination.Builder getProducerDestinationsBuilder(
        int index) {
      return getProducerDestinationsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public com.google.api.Logging.LoggingDestinationOrBuilder getProducerDestinationsOrBuilder(
        int index) {
      if (producerDestinationsBuilder_ == null) {
        return producerDestinations_.get(index);  } else {
        return producerDestinationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public java.util.List<? extends com.google.api.Logging.LoggingDestinationOrBuilder> 
         getProducerDestinationsOrBuilderList() {
      if (producerDestinationsBuilder_ != null) {
        return producerDestinationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(producerDestinations_);
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public com.google.api.Logging.LoggingDestination.Builder addProducerDestinationsBuilder() {
      return getProducerDestinationsFieldBuilder().addBuilder(
          com.google.api.Logging.LoggingDestination.getDefaultInstance());
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public com.google.api.Logging.LoggingDestination.Builder addProducerDestinationsBuilder(
        int index) {
      return getProducerDestinationsFieldBuilder().addBuilder(
          index, com.google.api.Logging.LoggingDestination.getDefaultInstance());
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination producer_destinations = 1;</code>
     */
    public java.util.List<com.google.api.Logging.LoggingDestination.Builder> 
         getProducerDestinationsBuilderList() {
      return getProducerDestinationsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.api.Logging.LoggingDestination, com.google.api.Logging.LoggingDestination.Builder, com.google.api.Logging.LoggingDestinationOrBuilder> 
        getProducerDestinationsFieldBuilder() {
      if (producerDestinationsBuilder_ == null) {
        producerDestinationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.api.Logging.LoggingDestination, com.google.api.Logging.LoggingDestination.Builder, com.google.api.Logging.LoggingDestinationOrBuilder>(
                producerDestinations_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        producerDestinations_ = null;
      }
      return producerDestinationsBuilder_;
    }

    private java.util.List<com.google.api.Logging.LoggingDestination> consumerDestinations_ =
      java.util.Collections.emptyList();
    private void ensureConsumerDestinationsIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        consumerDestinations_ = new java.util.ArrayList<com.google.api.Logging.LoggingDestination>(consumerDestinations_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.api.Logging.LoggingDestination, com.google.api.Logging.LoggingDestination.Builder, com.google.api.Logging.LoggingDestinationOrBuilder> consumerDestinationsBuilder_;

    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public java.util.List<com.google.api.Logging.LoggingDestination> getConsumerDestinationsList() {
      if (consumerDestinationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(consumerDestinations_);
      } else {
        return consumerDestinationsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public int getConsumerDestinationsCount() {
      if (consumerDestinationsBuilder_ == null) {
        return consumerDestinations_.size();
      } else {
        return consumerDestinationsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public com.google.api.Logging.LoggingDestination getConsumerDestinations(int index) {
      if (consumerDestinationsBuilder_ == null) {
        return consumerDestinations_.get(index);
      } else {
        return consumerDestinationsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public Builder setConsumerDestinations(
        int index, com.google.api.Logging.LoggingDestination value) {
      if (consumerDestinationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConsumerDestinationsIsMutable();
        consumerDestinations_.set(index, value);
        onChanged();
      } else {
        consumerDestinationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public Builder setConsumerDestinations(
        int index, com.google.api.Logging.LoggingDestination.Builder builderForValue) {
      if (consumerDestinationsBuilder_ == null) {
        ensureConsumerDestinationsIsMutable();
        consumerDestinations_.set(index, builderForValue.build());
        onChanged();
      } else {
        consumerDestinationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public Builder addConsumerDestinations(com.google.api.Logging.LoggingDestination value) {
      if (consumerDestinationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConsumerDestinationsIsMutable();
        consumerDestinations_.add(value);
        onChanged();
      } else {
        consumerDestinationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public Builder addConsumerDestinations(
        int index, com.google.api.Logging.LoggingDestination value) {
      if (consumerDestinationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConsumerDestinationsIsMutable();
        consumerDestinations_.add(index, value);
        onChanged();
      } else {
        consumerDestinationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public Builder addConsumerDestinations(
        com.google.api.Logging.LoggingDestination.Builder builderForValue) {
      if (consumerDestinationsBuilder_ == null) {
        ensureConsumerDestinationsIsMutable();
        consumerDestinations_.add(builderForValue.build());
        onChanged();
      } else {
        consumerDestinationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public Builder addConsumerDestinations(
        int index, com.google.api.Logging.LoggingDestination.Builder builderForValue) {
      if (consumerDestinationsBuilder_ == null) {
        ensureConsumerDestinationsIsMutable();
        consumerDestinations_.add(index, builderForValue.build());
        onChanged();
      } else {
        consumerDestinationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public Builder addAllConsumerDestinations(
        java.lang.Iterable<? extends com.google.api.Logging.LoggingDestination> values) {
      if (consumerDestinationsBuilder_ == null) {
        ensureConsumerDestinationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, consumerDestinations_);
        onChanged();
      } else {
        consumerDestinationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public Builder clearConsumerDestinations() {
      if (consumerDestinationsBuilder_ == null) {
        consumerDestinations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        consumerDestinationsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public Builder removeConsumerDestinations(int index) {
      if (consumerDestinationsBuilder_ == null) {
        ensureConsumerDestinationsIsMutable();
        consumerDestinations_.remove(index);
        onChanged();
      } else {
        consumerDestinationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public com.google.api.Logging.LoggingDestination.Builder getConsumerDestinationsBuilder(
        int index) {
      return getConsumerDestinationsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public com.google.api.Logging.LoggingDestinationOrBuilder getConsumerDestinationsOrBuilder(
        int index) {
      if (consumerDestinationsBuilder_ == null) {
        return consumerDestinations_.get(index);  } else {
        return consumerDestinationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public java.util.List<? extends com.google.api.Logging.LoggingDestinationOrBuilder> 
         getConsumerDestinationsOrBuilderList() {
      if (consumerDestinationsBuilder_ != null) {
        return consumerDestinationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(consumerDestinations_);
      }
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public com.google.api.Logging.LoggingDestination.Builder addConsumerDestinationsBuilder() {
      return getConsumerDestinationsFieldBuilder().addBuilder(
          com.google.api.Logging.LoggingDestination.getDefaultInstance());
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public com.google.api.Logging.LoggingDestination.Builder addConsumerDestinationsBuilder(
        int index) {
      return getConsumerDestinationsFieldBuilder().addBuilder(
          index, com.google.api.Logging.LoggingDestination.getDefaultInstance());
    }
    /**
     * <pre>
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     * </pre>
     *
     * <code>repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;</code>
     */
    public java.util.List<com.google.api.Logging.LoggingDestination.Builder> 
         getConsumerDestinationsBuilderList() {
      return getConsumerDestinationsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.api.Logging.LoggingDestination, com.google.api.Logging.LoggingDestination.Builder, com.google.api.Logging.LoggingDestinationOrBuilder> 
        getConsumerDestinationsFieldBuilder() {
      if (consumerDestinationsBuilder_ == null) {
        consumerDestinationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.api.Logging.LoggingDestination, com.google.api.Logging.LoggingDestination.Builder, com.google.api.Logging.LoggingDestinationOrBuilder>(
                consumerDestinations_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        consumerDestinations_ = null;
      }
      return consumerDestinationsBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.api.Logging)
  }

  // @@protoc_insertion_point(class_scope:google.api.Logging)
  private static final com.google.api.Logging DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.api.Logging();
  }

  public static com.google.api.Logging getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Logging>
      PARSER = new com.google.protobuf.AbstractParser<Logging>() {
    public Logging parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new Logging(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Logging> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Logging> getParserForType() {
    return PARSER;
  }

  public com.google.api.Logging getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

