// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/table.proto

package com.google.bigtable.admin.v2;

/**
 * <pre>
 * A collection of user data indexed by row, column, and timestamp.
 * Each table is served using the resources of its parent cluster.
 * </pre>
 *
 * Protobuf type {@code google.bigtable.admin.v2.Table}
 */
public  final class Table extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.bigtable.admin.v2.Table)
    TableOrBuilder {
  // Use Table.newBuilder() to construct.
  private Table(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Table() {
    name_ = "";
    granularity_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private Table(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              columnFamilies_ = com.google.protobuf.MapField.newMapField(
                  ColumnFamiliesDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
            columnFamilies__ = input.readMessage(
                ColumnFamiliesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            columnFamilies_.getMutableMap().put(
                columnFamilies__.getKey(), columnFamilies__.getValue());
            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            granularity_ = rawValue;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 3:
        return internalGetColumnFamilies();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.bigtable.admin.v2.Table.class, com.google.bigtable.admin.v2.Table.Builder.class);
  }

  /**
   * <pre>
   * Possible timestamp granularities to use when keeping multiple versions
   * of data in a table.
   * </pre>
   *
   * Protobuf enum {@code google.bigtable.admin.v2.Table.TimestampGranularity}
   */
  public enum TimestampGranularity
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * The user did not specify a granularity. Should not be returned.
     * When specified during table creation, MILLIS will be used.
     * </pre>
     *
     * <code>TIMESTAMP_GRANULARITY_UNSPECIFIED = 0;</code>
     */
    TIMESTAMP_GRANULARITY_UNSPECIFIED(0),
    /**
     * <pre>
     * The table keeps data versioned at a granularity of 1ms.
     * </pre>
     *
     * <code>MILLIS = 1;</code>
     */
    MILLIS(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * The user did not specify a granularity. Should not be returned.
     * When specified during table creation, MILLIS will be used.
     * </pre>
     *
     * <code>TIMESTAMP_GRANULARITY_UNSPECIFIED = 0;</code>
     */
    public static final int TIMESTAMP_GRANULARITY_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * The table keeps data versioned at a granularity of 1ms.
     * </pre>
     *
     * <code>MILLIS = 1;</code>
     */
    public static final int MILLIS_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TimestampGranularity valueOf(int value) {
      return forNumber(value);
    }

    public static TimestampGranularity forNumber(int value) {
      switch (value) {
        case 0: return TIMESTAMP_GRANULARITY_UNSPECIFIED;
        case 1: return MILLIS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TimestampGranularity>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TimestampGranularity> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TimestampGranularity>() {
            public TimestampGranularity findValueByNumber(int number) {
              return TimestampGranularity.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.Table.getDescriptor().getEnumTypes().get(0);
    }

    private static final TimestampGranularity[] VALUES = values();

    public static TimestampGranularity valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TimestampGranularity(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.bigtable.admin.v2.Table.TimestampGranularity)
  }

  /**
   * <pre>
   * Defines a view over a table's fields.
   * </pre>
   *
   * Protobuf enum {@code google.bigtable.admin.v2.Table.View}
   */
  public enum View
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Uses the default view for each method as documented in its request.
     * </pre>
     *
     * <code>VIEW_UNSPECIFIED = 0;</code>
     */
    VIEW_UNSPECIFIED(0),
    /**
     * <pre>
     * Only populates `name`.
     * </pre>
     *
     * <code>NAME_ONLY = 1;</code>
     */
    NAME_ONLY(1),
    /**
     * <pre>
     * Only populates `name` and fields related to the table's schema.
     * </pre>
     *
     * <code>SCHEMA_VIEW = 2;</code>
     */
    SCHEMA_VIEW(2),
    /**
     * <pre>
     * Populates all fields.
     * </pre>
     *
     * <code>FULL = 4;</code>
     */
    FULL(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Uses the default view for each method as documented in its request.
     * </pre>
     *
     * <code>VIEW_UNSPECIFIED = 0;</code>
     */
    public static final int VIEW_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Only populates `name`.
     * </pre>
     *
     * <code>NAME_ONLY = 1;</code>
     */
    public static final int NAME_ONLY_VALUE = 1;
    /**
     * <pre>
     * Only populates `name` and fields related to the table's schema.
     * </pre>
     *
     * <code>SCHEMA_VIEW = 2;</code>
     */
    public static final int SCHEMA_VIEW_VALUE = 2;
    /**
     * <pre>
     * Populates all fields.
     * </pre>
     *
     * <code>FULL = 4;</code>
     */
    public static final int FULL_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static View valueOf(int value) {
      return forNumber(value);
    }

    public static View forNumber(int value) {
      switch (value) {
        case 0: return VIEW_UNSPECIFIED;
        case 1: return NAME_ONLY;
        case 2: return SCHEMA_VIEW;
        case 4: return FULL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<View>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        View> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<View>() {
            public View findValueByNumber(int number) {
              return View.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.Table.getDescriptor().getEnumTypes().get(1);
    }

    private static final View[] VALUES = values();

    public static View valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private View(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.bigtable.admin.v2.Table.View)
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * (`OutputOnly`)
   * The unique name of the table. Values are of the form
   * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
   * Views: `NAME_ONLY`, `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * (`OutputOnly`)
   * The unique name of the table. Values are of the form
   * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
   * Views: `NAME_ONLY`, `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int COLUMN_FAMILIES_FIELD_NUMBER = 3;
  private static final class ColumnFamiliesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>newDefaultInstance(
                com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_ColumnFamiliesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.google.bigtable.admin.v2.ColumnFamily.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> columnFamilies_;
  private com.google.protobuf.MapField<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
  internalGetColumnFamilies() {
    if (columnFamilies_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ColumnFamiliesDefaultEntryHolder.defaultEntry);
    }
    return columnFamilies_;
  }

  public int getColumnFamiliesCount() {
    return internalGetColumnFamilies().getMap().size();
  }
  /**
   * <pre>
   * (`CreationOnly`)
   * The column families configured for this table, mapped by column family ID.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   */

  public boolean containsColumnFamilies(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetColumnFamilies().getMap().containsKey(key);
  }
  /**
   * Use {@link #getColumnFamiliesMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> getColumnFamilies() {
    return getColumnFamiliesMap();
  }
  /**
   * <pre>
   * (`CreationOnly`)
   * The column families configured for this table, mapped by column family ID.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   */

  public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> getColumnFamiliesMap() {
    return internalGetColumnFamilies().getMap();
  }
  /**
   * <pre>
   * (`CreationOnly`)
   * The column families configured for this table, mapped by column family ID.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   */

  public com.google.bigtable.admin.v2.ColumnFamily getColumnFamiliesOrDefault(
      java.lang.String key,
      com.google.bigtable.admin.v2.ColumnFamily defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> map =
        internalGetColumnFamilies().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * (`CreationOnly`)
   * The column families configured for this table, mapped by column family ID.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   */

  public com.google.bigtable.admin.v2.ColumnFamily getColumnFamiliesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> map =
        internalGetColumnFamilies().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int GRANULARITY_FIELD_NUMBER = 4;
  private int granularity_;
  /**
   * <pre>
   * (`CreationOnly`)
   * The granularity (e.g. `MILLIS`, `MICROS`) at which timestamps are stored in
   * this table. Timestamps not matching the granularity will be rejected.
   * If unspecified at creation time, the value will be set to `MILLIS`.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>.google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
   */
  public int getGranularityValue() {
    return granularity_;
  }
  /**
   * <pre>
   * (`CreationOnly`)
   * The granularity (e.g. `MILLIS`, `MICROS`) at which timestamps are stored in
   * this table. Timestamps not matching the granularity will be rejected.
   * If unspecified at creation time, the value will be set to `MILLIS`.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>.google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
   */
  public com.google.bigtable.admin.v2.Table.TimestampGranularity getGranularity() {
    com.google.bigtable.admin.v2.Table.TimestampGranularity result = com.google.bigtable.admin.v2.Table.TimestampGranularity.valueOf(granularity_);
    return result == null ? com.google.bigtable.admin.v2.Table.TimestampGranularity.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetColumnFamilies(),
        ColumnFamiliesDefaultEntryHolder.defaultEntry,
        3);
    if (granularity_ != com.google.bigtable.admin.v2.Table.TimestampGranularity.TIMESTAMP_GRANULARITY_UNSPECIFIED.getNumber()) {
      output.writeEnum(4, granularity_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    for (java.util.Map.Entry<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> entry
         : internalGetColumnFamilies().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
      columnFamilies__ = ColumnFamiliesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, columnFamilies__);
    }
    if (granularity_ != com.google.bigtable.admin.v2.Table.TimestampGranularity.TIMESTAMP_GRANULARITY_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, granularity_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.bigtable.admin.v2.Table)) {
      return super.equals(obj);
    }
    com.google.bigtable.admin.v2.Table other = (com.google.bigtable.admin.v2.Table) obj;

    boolean result = true;
    result = result && getName()
        .equals(other.getName());
    result = result && internalGetColumnFamilies().equals(
        other.internalGetColumnFamilies());
    result = result && granularity_ == other.granularity_;
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (!internalGetColumnFamilies().getMap().isEmpty()) {
      hash = (37 * hash) + COLUMN_FAMILIES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetColumnFamilies().hashCode();
    }
    hash = (37 * hash) + GRANULARITY_FIELD_NUMBER;
    hash = (53 * hash) + granularity_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.bigtable.admin.v2.Table parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.Table parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.v2.Table parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.bigtable.admin.v2.Table parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.bigtable.admin.v2.Table prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A collection of user data indexed by row, column, and timestamp.
   * Each table is served using the resources of its parent cluster.
   * </pre>
   *
   * Protobuf type {@code google.bigtable.admin.v2.Table}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.bigtable.admin.v2.Table)
      com.google.bigtable.admin.v2.TableOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetColumnFamilies();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableColumnFamilies();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.bigtable.admin.v2.Table.class, com.google.bigtable.admin.v2.Table.Builder.class);
    }

    // Construct using com.google.bigtable.admin.v2.Table.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      name_ = "";

      internalGetMutableColumnFamilies().clear();
      granularity_ = 0;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.bigtable.admin.v2.TableProto.internal_static_google_bigtable_admin_v2_Table_descriptor;
    }

    public com.google.bigtable.admin.v2.Table getDefaultInstanceForType() {
      return com.google.bigtable.admin.v2.Table.getDefaultInstance();
    }

    public com.google.bigtable.admin.v2.Table build() {
      com.google.bigtable.admin.v2.Table result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.bigtable.admin.v2.Table buildPartial() {
      com.google.bigtable.admin.v2.Table result = new com.google.bigtable.admin.v2.Table(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      result.columnFamilies_ = internalGetColumnFamilies();
      result.columnFamilies_.makeImmutable();
      result.granularity_ = granularity_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.bigtable.admin.v2.Table) {
        return mergeFrom((com.google.bigtable.admin.v2.Table)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.bigtable.admin.v2.Table other) {
      if (other == com.google.bigtable.admin.v2.Table.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      internalGetMutableColumnFamilies().mergeFrom(
          other.internalGetColumnFamilies());
      if (other.granularity_ != 0) {
        setGranularityValue(other.getGranularityValue());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.bigtable.admin.v2.Table parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.bigtable.admin.v2.Table) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * (`OutputOnly`)
     * The unique name of the table. Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * Views: `NAME_ONLY`, `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * (`OutputOnly`)
     * The unique name of the table. Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * Views: `NAME_ONLY`, `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * (`OutputOnly`)
     * The unique name of the table. Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * Views: `NAME_ONLY`, `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (`OutputOnly`)
     * The unique name of the table. Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * Views: `NAME_ONLY`, `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (`OutputOnly`)
     * The unique name of the table. Values are of the form
     * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * Views: `NAME_ONLY`, `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> columnFamilies_;
    private com.google.protobuf.MapField<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
    internalGetColumnFamilies() {
      if (columnFamilies_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ColumnFamiliesDefaultEntryHolder.defaultEntry);
      }
      return columnFamilies_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
    internalGetMutableColumnFamilies() {
      onChanged();;
      if (columnFamilies_ == null) {
        columnFamilies_ = com.google.protobuf.MapField.newMapField(
            ColumnFamiliesDefaultEntryHolder.defaultEntry);
      }
      if (!columnFamilies_.isMutable()) {
        columnFamilies_ = columnFamilies_.copy();
      }
      return columnFamilies_;
    }

    public int getColumnFamiliesCount() {
      return internalGetColumnFamilies().getMap().size();
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The column families configured for this table, mapped by column family ID.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     */

    public boolean containsColumnFamilies(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetColumnFamilies().getMap().containsKey(key);
    }
    /**
     * Use {@link #getColumnFamiliesMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> getColumnFamilies() {
      return getColumnFamiliesMap();
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The column families configured for this table, mapped by column family ID.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     */

    public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> getColumnFamiliesMap() {
      return internalGetColumnFamilies().getMap();
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The column families configured for this table, mapped by column family ID.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     */

    public com.google.bigtable.admin.v2.ColumnFamily getColumnFamiliesOrDefault(
        java.lang.String key,
        com.google.bigtable.admin.v2.ColumnFamily defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> map =
          internalGetColumnFamilies().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The column families configured for this table, mapped by column family ID.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     */

    public com.google.bigtable.admin.v2.ColumnFamily getColumnFamiliesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> map =
          internalGetColumnFamilies().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearColumnFamilies() {
      internalGetMutableColumnFamilies().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The column families configured for this table, mapped by column family ID.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     */

    public Builder removeColumnFamilies(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableColumnFamilies().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
    getMutableColumnFamilies() {
      return internalGetMutableColumnFamilies().getMutableMap();
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The column families configured for this table, mapped by column family ID.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     */
    public Builder putColumnFamilies(
        java.lang.String key,
        com.google.bigtable.admin.v2.ColumnFamily value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableColumnFamilies().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The column families configured for this table, mapped by column family ID.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
     */

    public Builder putAllColumnFamilies(
        java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily> values) {
      internalGetMutableColumnFamilies().getMutableMap()
          .putAll(values);
      return this;
    }

    private int granularity_ = 0;
    /**
     * <pre>
     * (`CreationOnly`)
     * The granularity (e.g. `MILLIS`, `MICROS`) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to `MILLIS`.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     */
    public int getGranularityValue() {
      return granularity_;
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The granularity (e.g. `MILLIS`, `MICROS`) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to `MILLIS`.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     */
    public Builder setGranularityValue(int value) {
      granularity_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The granularity (e.g. `MILLIS`, `MICROS`) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to `MILLIS`.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     */
    public com.google.bigtable.admin.v2.Table.TimestampGranularity getGranularity() {
      com.google.bigtable.admin.v2.Table.TimestampGranularity result = com.google.bigtable.admin.v2.Table.TimestampGranularity.valueOf(granularity_);
      return result == null ? com.google.bigtable.admin.v2.Table.TimestampGranularity.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The granularity (e.g. `MILLIS`, `MICROS`) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to `MILLIS`.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     */
    public Builder setGranularity(com.google.bigtable.admin.v2.Table.TimestampGranularity value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      granularity_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * (`CreationOnly`)
     * The granularity (e.g. `MILLIS`, `MICROS`) at which timestamps are stored in
     * this table. Timestamps not matching the granularity will be rejected.
     * If unspecified at creation time, the value will be set to `MILLIS`.
     * Views: `SCHEMA_VIEW`, `FULL`
     * </pre>
     *
     * <code>.google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
     */
    public Builder clearGranularity() {
      
      granularity_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    public final Builder setNameWithTableName(com.google.bigtable.admin.v2.TableName value) {
      if (value == null) {
        return setName("");
      }
      return setName(value.toString());
    }
    
    public final com.google.bigtable.admin.v2.TableName getNameAsTableName() {
      java.lang.String str = getName();
      if (str.isEmpty()) {
        return null;
      }
      return com.google.bigtable.admin.v2.TableName.parse(str);
    }
    // @@protoc_insertion_point(builder_scope:google.bigtable.admin.v2.Table)
  }

  public final com.google.bigtable.admin.v2.TableName getNameAsTableName() {
    java.lang.String str = getName();
    if (str.isEmpty()) {
      return null;
    }
    return com.google.bigtable.admin.v2.TableName.parse(str);
  }
  // @@protoc_insertion_point(class_scope:google.bigtable.admin.v2.Table)
  private static final com.google.bigtable.admin.v2.Table DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.bigtable.admin.v2.Table();
  }

  public static com.google.bigtable.admin.v2.Table getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Table>
      PARSER = new com.google.protobuf.AbstractParser<Table>() {
    public Table parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new Table(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Table> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Table> getParserForType() {
    return PARSER;
  }

  public com.google.bigtable.admin.v2.Table getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

