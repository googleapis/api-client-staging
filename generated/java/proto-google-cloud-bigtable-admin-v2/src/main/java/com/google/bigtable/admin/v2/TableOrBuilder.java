// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/table.proto

package com.google.bigtable.admin.v2;

public interface TableOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.bigtable.admin.v2.Table)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * (`OutputOnly`)
   * The unique name of the table. Values are of the form
   * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
   * Views: `NAME_ONLY`, `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * (`OutputOnly`)
   * The unique name of the table. Values are of the form
   * `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
   * Views: `NAME_ONLY`, `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * (`CreationOnly`)
   * The column families configured for this table, mapped by column family ID.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   */
  int getColumnFamiliesCount();
  /**
   * <pre>
   * (`CreationOnly`)
   * The column families configured for this table, mapped by column family ID.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   */
  boolean containsColumnFamilies(
      java.lang.String key);
  /**
   * Use {@link #getColumnFamiliesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
  getColumnFamilies();
  /**
   * <pre>
   * (`CreationOnly`)
   * The column families configured for this table, mapped by column family ID.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   */
  java.util.Map<java.lang.String, com.google.bigtable.admin.v2.ColumnFamily>
  getColumnFamiliesMap();
  /**
   * <pre>
   * (`CreationOnly`)
   * The column families configured for this table, mapped by column family ID.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   */

  com.google.bigtable.admin.v2.ColumnFamily getColumnFamiliesOrDefault(
      java.lang.String key,
      com.google.bigtable.admin.v2.ColumnFamily defaultValue);
  /**
   * <pre>
   * (`CreationOnly`)
   * The column families configured for this table, mapped by column family ID.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>map&lt;string, .google.bigtable.admin.v2.ColumnFamily&gt; column_families = 3;</code>
   */

  com.google.bigtable.admin.v2.ColumnFamily getColumnFamiliesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * (`CreationOnly`)
   * The granularity (e.g. `MILLIS`, `MICROS`) at which timestamps are stored in
   * this table. Timestamps not matching the granularity will be rejected.
   * If unspecified at creation time, the value will be set to `MILLIS`.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>.google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
   */
  int getGranularityValue();
  /**
   * <pre>
   * (`CreationOnly`)
   * The granularity (e.g. `MILLIS`, `MICROS`) at which timestamps are stored in
   * this table. Timestamps not matching the granularity will be rejected.
   * If unspecified at creation time, the value will be set to `MILLIS`.
   * Views: `SCHEMA_VIEW`, `FULL`
   * </pre>
   *
   * <code>.google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;</code>
   */
  com.google.bigtable.admin.v2.Table.TimestampGranularity getGranularity();
}
