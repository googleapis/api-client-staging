// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.dialogflow.v2beta1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/dialogflow/v2beta1;dialogflow";
option java_multiple_files = true;
option java_outer_classname = "VersionProto";
option java_package = "com.google.cloud.dialogflow.v2beta1";


// Manages agent versions.
//
//
// Standard methods.
service Versions {
  // Returns the list of all versions of the specified agent.
  rpc ListVersions(ListVersionsRequest) returns (ListVersionsResponse) {
    option (google.api.http) = { get: "/v2beta1/{parent=projects/*/agent}/versions" };
  }

  // Retrieves the specified agent version.
  rpc GetVersion(GetVersionRequest) returns (Version) {
    option (google.api.http) = { get: "/v2beta1/{name=projects/*/agent/versions/*}" };
  }

  // Creates an agent version.
  //
  // The new version points to the agent instance in the "default" runtime.
  rpc CreateVersion(CreateVersionRequest) returns (Version) {
    option (google.api.http) = { post: "/v2beta1/{parent=projects/*/agent}/versions" body: "version" };
  }

  // Updates the specified agent version.
  //
  // Note that this method does not allow you to update the state of the agent
  // the given version points to. It allows you to update only mutable
  // properties of the version resource.
  rpc UpdateVersion(UpdateVersionRequest) returns (Version) {
    option (google.api.http) = { patch: "/v2beta1/{version.name=projects/*/agent/versions/*}" body: "version" };
  }

  // Deletes the specified agent version.
  rpc DeleteVersion(DeleteVersionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v2beta1/{name=projects/*/agent/versions/*}" };
  }
}

// Represents an agent version.
message Version {
  // Required. The unique identifier of this agent version.
  // Format: `projects/<Project ID>/agent/versions/<Version ID>`.
  string name = 1;

  // Optional. The developer-provided description of this version.
  string description = 2;

  // The sequential number of this version. This field is read-only, i.e., it
  // cannot be set by create and update methods.
  int32 version_number = 3;

  // The creation time of this version. This field is read-only, i.e., it
  // cannot be set by create and update methods.
  google.protobuf.Timestamp create_time = 4;
}

// The request message for [Versions.ListVersions].
message ListVersionsRequest {
  // Required. The agent to list all versions from.
  // Format: `projects/<Project ID>/agent`.
  string parent = 1;

  // Optional. The maximum number of items to return in a single page. By
  // default 100 and at most 1000.
  int32 page_size = 2;

  // Optional. The next_page_token value returned from a previous list request.
  string page_token = 3;
}

// The response message for [Versions.ListVersions].
message ListVersionsResponse {
  // The list of agent versions. There will be a maximum number of items
  // returned based on the page_size field in the request.
  repeated Version versions = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// The request message for [Versions.GetVersion].
message GetVersionRequest {
  // Required. The name of the version.
  // Format: `projects/<Project ID>/agent/versions/<Version ID>`.
  string name = 1;
}

// The request message for [Versions.CreateVersion].
message CreateVersionRequest {
  // Required. The agent to create a version for.
  // Format: `projects/<Project ID>/agent`.
  string parent = 1;

  // Required. The version to create.
  Version version = 2;
}

// The request message for [Versions.UpdateVersion].
message UpdateVersionRequest {
  // Required. The version to update.
  // Format: `projects/<Project ID>/agent/versions/<Version ID>`.
  Version version = 1;

  // Optional. The mask to control which fields get updated.
  google.protobuf.FieldMask update_mask = 2;
}

// The request message for [Versions.DeleteVersion].
message DeleteVersionRequest {
  // Required. The name of the version to delete.
  // Format: `projects/<Project ID>/agent/versions/<Version ID>`.
  string name = 1;
}
