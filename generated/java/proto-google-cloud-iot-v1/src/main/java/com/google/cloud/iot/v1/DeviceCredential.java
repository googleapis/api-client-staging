// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/iot/v1/resources.proto

package com.google.cloud.iot.v1;

/**
 * <pre>
 * A server-stored device credential used for authentication.
 * </pre>
 *
 * Protobuf type {@code google.cloud.iot.v1.DeviceCredential}
 */
public  final class DeviceCredential extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.cloud.iot.v1.DeviceCredential)
    DeviceCredentialOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DeviceCredential.newBuilder() to construct.
  private DeviceCredential(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DeviceCredential() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DeviceCredential(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 18: {
            com.google.cloud.iot.v1.PublicKeyCredential.Builder subBuilder = null;
            if (credentialCase_ == 2) {
              subBuilder = ((com.google.cloud.iot.v1.PublicKeyCredential) credential_).toBuilder();
            }
            credential_ =
                input.readMessage(com.google.cloud.iot.v1.PublicKeyCredential.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.google.cloud.iot.v1.PublicKeyCredential) credential_);
              credential_ = subBuilder.buildPartial();
            }
            credentialCase_ = 2;
            break;
          }
          case 50: {
            com.google.protobuf.Timestamp.Builder subBuilder = null;
            if (expirationTime_ != null) {
              subBuilder = expirationTime_.toBuilder();
            }
            expirationTime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(expirationTime_);
              expirationTime_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.iot.v1.ResourcesProto.internal_static_google_cloud_iot_v1_DeviceCredential_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.iot.v1.ResourcesProto.internal_static_google_cloud_iot_v1_DeviceCredential_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.iot.v1.DeviceCredential.class, com.google.cloud.iot.v1.DeviceCredential.Builder.class);
  }

  private int credentialCase_ = 0;
  private java.lang.Object credential_;
  public enum CredentialCase
      implements com.google.protobuf.Internal.EnumLite {
    PUBLIC_KEY(2),
    CREDENTIAL_NOT_SET(0);
    private final int value;
    private CredentialCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CredentialCase valueOf(int value) {
      return forNumber(value);
    }

    public static CredentialCase forNumber(int value) {
      switch (value) {
        case 2: return PUBLIC_KEY;
        case 0: return CREDENTIAL_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public CredentialCase
  getCredentialCase() {
    return CredentialCase.forNumber(
        credentialCase_);
  }

  public static final int PUBLIC_KEY_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A public key used to verify the signature of JSON Web Tokens (JWTs).
   * When adding a new device credential, either via device creation or via
   * modifications, this public key credential may be required to be signed by
   * one of the registry level certificates. More specifically, if the
   * registry contains at least one certificate, any new device credential
   * must be signed by one of the registry certificates. As a result,
   * when the registry contains certificates, only X.509 certificates are
   * accepted as device credentials. However, if the registry does
   * not contain a certificate, self-signed certificates and public keys will
   * be accepted. New device credentials must be different from every
   * registry-level certificate.
   * </pre>
   *
   * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
   */
  public boolean hasPublicKey() {
    return credentialCase_ == 2;
  }
  /**
   * <pre>
   * A public key used to verify the signature of JSON Web Tokens (JWTs).
   * When adding a new device credential, either via device creation or via
   * modifications, this public key credential may be required to be signed by
   * one of the registry level certificates. More specifically, if the
   * registry contains at least one certificate, any new device credential
   * must be signed by one of the registry certificates. As a result,
   * when the registry contains certificates, only X.509 certificates are
   * accepted as device credentials. However, if the registry does
   * not contain a certificate, self-signed certificates and public keys will
   * be accepted. New device credentials must be different from every
   * registry-level certificate.
   * </pre>
   *
   * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
   */
  public com.google.cloud.iot.v1.PublicKeyCredential getPublicKey() {
    if (credentialCase_ == 2) {
       return (com.google.cloud.iot.v1.PublicKeyCredential) credential_;
    }
    return com.google.cloud.iot.v1.PublicKeyCredential.getDefaultInstance();
  }
  /**
   * <pre>
   * A public key used to verify the signature of JSON Web Tokens (JWTs).
   * When adding a new device credential, either via device creation or via
   * modifications, this public key credential may be required to be signed by
   * one of the registry level certificates. More specifically, if the
   * registry contains at least one certificate, any new device credential
   * must be signed by one of the registry certificates. As a result,
   * when the registry contains certificates, only X.509 certificates are
   * accepted as device credentials. However, if the registry does
   * not contain a certificate, self-signed certificates and public keys will
   * be accepted. New device credentials must be different from every
   * registry-level certificate.
   * </pre>
   *
   * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
   */
  public com.google.cloud.iot.v1.PublicKeyCredentialOrBuilder getPublicKeyOrBuilder() {
    if (credentialCase_ == 2) {
       return (com.google.cloud.iot.v1.PublicKeyCredential) credential_;
    }
    return com.google.cloud.iot.v1.PublicKeyCredential.getDefaultInstance();
  }

  public static final int EXPIRATION_TIME_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp expirationTime_;
  /**
   * <pre>
   * [Optional] The time at which this credential becomes invalid. This
   * credential will be ignored for new client authentication requests after
   * this timestamp; however, it will not be automatically deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
   */
  public boolean hasExpirationTime() {
    return expirationTime_ != null;
  }
  /**
   * <pre>
   * [Optional] The time at which this credential becomes invalid. This
   * credential will be ignored for new client authentication requests after
   * this timestamp; however, it will not be automatically deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
   */
  public com.google.protobuf.Timestamp getExpirationTime() {
    return expirationTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expirationTime_;
  }
  /**
   * <pre>
   * [Optional] The time at which this credential becomes invalid. This
   * credential will be ignored for new client authentication requests after
   * this timestamp; however, it will not be automatically deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
   */
  public com.google.protobuf.TimestampOrBuilder getExpirationTimeOrBuilder() {
    return getExpirationTime();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (credentialCase_ == 2) {
      output.writeMessage(2, (com.google.cloud.iot.v1.PublicKeyCredential) credential_);
    }
    if (expirationTime_ != null) {
      output.writeMessage(6, getExpirationTime());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (credentialCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.google.cloud.iot.v1.PublicKeyCredential) credential_);
    }
    if (expirationTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getExpirationTime());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.iot.v1.DeviceCredential)) {
      return super.equals(obj);
    }
    com.google.cloud.iot.v1.DeviceCredential other = (com.google.cloud.iot.v1.DeviceCredential) obj;

    boolean result = true;
    result = result && (hasExpirationTime() == other.hasExpirationTime());
    if (hasExpirationTime()) {
      result = result && getExpirationTime()
          .equals(other.getExpirationTime());
    }
    result = result && getCredentialCase().equals(
        other.getCredentialCase());
    if (!result) return false;
    switch (credentialCase_) {
      case 2:
        result = result && getPublicKey()
            .equals(other.getPublicKey());
        break;
      case 0:
      default:
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasExpirationTime()) {
      hash = (37 * hash) + EXPIRATION_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getExpirationTime().hashCode();
    }
    switch (credentialCase_) {
      case 2:
        hash = (37 * hash) + PUBLIC_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getPublicKey().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.iot.v1.DeviceCredential parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.iot.v1.DeviceCredential prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A server-stored device credential used for authentication.
   * </pre>
   *
   * Protobuf type {@code google.cloud.iot.v1.DeviceCredential}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.iot.v1.DeviceCredential)
      com.google.cloud.iot.v1.DeviceCredentialOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.iot.v1.ResourcesProto.internal_static_google_cloud_iot_v1_DeviceCredential_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.iot.v1.ResourcesProto.internal_static_google_cloud_iot_v1_DeviceCredential_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.iot.v1.DeviceCredential.class, com.google.cloud.iot.v1.DeviceCredential.Builder.class);
    }

    // Construct using com.google.cloud.iot.v1.DeviceCredential.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (expirationTimeBuilder_ == null) {
        expirationTime_ = null;
      } else {
        expirationTime_ = null;
        expirationTimeBuilder_ = null;
      }
      credentialCase_ = 0;
      credential_ = null;
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.iot.v1.ResourcesProto.internal_static_google_cloud_iot_v1_DeviceCredential_descriptor;
    }

    public com.google.cloud.iot.v1.DeviceCredential getDefaultInstanceForType() {
      return com.google.cloud.iot.v1.DeviceCredential.getDefaultInstance();
    }

    public com.google.cloud.iot.v1.DeviceCredential build() {
      com.google.cloud.iot.v1.DeviceCredential result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.cloud.iot.v1.DeviceCredential buildPartial() {
      com.google.cloud.iot.v1.DeviceCredential result = new com.google.cloud.iot.v1.DeviceCredential(this);
      if (credentialCase_ == 2) {
        if (publicKeyBuilder_ == null) {
          result.credential_ = credential_;
        } else {
          result.credential_ = publicKeyBuilder_.build();
        }
      }
      if (expirationTimeBuilder_ == null) {
        result.expirationTime_ = expirationTime_;
      } else {
        result.expirationTime_ = expirationTimeBuilder_.build();
      }
      result.credentialCase_ = credentialCase_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.iot.v1.DeviceCredential) {
        return mergeFrom((com.google.cloud.iot.v1.DeviceCredential)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.iot.v1.DeviceCredential other) {
      if (other == com.google.cloud.iot.v1.DeviceCredential.getDefaultInstance()) return this;
      if (other.hasExpirationTime()) {
        mergeExpirationTime(other.getExpirationTime());
      }
      switch (other.getCredentialCase()) {
        case PUBLIC_KEY: {
          mergePublicKey(other.getPublicKey());
          break;
        }
        case CREDENTIAL_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.iot.v1.DeviceCredential parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloud.iot.v1.DeviceCredential) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int credentialCase_ = 0;
    private java.lang.Object credential_;
    public CredentialCase
        getCredentialCase() {
      return CredentialCase.forNumber(
          credentialCase_);
    }

    public Builder clearCredential() {
      credentialCase_ = 0;
      credential_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.iot.v1.PublicKeyCredential, com.google.cloud.iot.v1.PublicKeyCredential.Builder, com.google.cloud.iot.v1.PublicKeyCredentialOrBuilder> publicKeyBuilder_;
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public boolean hasPublicKey() {
      return credentialCase_ == 2;
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public com.google.cloud.iot.v1.PublicKeyCredential getPublicKey() {
      if (publicKeyBuilder_ == null) {
        if (credentialCase_ == 2) {
          return (com.google.cloud.iot.v1.PublicKeyCredential) credential_;
        }
        return com.google.cloud.iot.v1.PublicKeyCredential.getDefaultInstance();
      } else {
        if (credentialCase_ == 2) {
          return publicKeyBuilder_.getMessage();
        }
        return com.google.cloud.iot.v1.PublicKeyCredential.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public Builder setPublicKey(com.google.cloud.iot.v1.PublicKeyCredential value) {
      if (publicKeyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        credential_ = value;
        onChanged();
      } else {
        publicKeyBuilder_.setMessage(value);
      }
      credentialCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public Builder setPublicKey(
        com.google.cloud.iot.v1.PublicKeyCredential.Builder builderForValue) {
      if (publicKeyBuilder_ == null) {
        credential_ = builderForValue.build();
        onChanged();
      } else {
        publicKeyBuilder_.setMessage(builderForValue.build());
      }
      credentialCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public Builder mergePublicKey(com.google.cloud.iot.v1.PublicKeyCredential value) {
      if (publicKeyBuilder_ == null) {
        if (credentialCase_ == 2 &&
            credential_ != com.google.cloud.iot.v1.PublicKeyCredential.getDefaultInstance()) {
          credential_ = com.google.cloud.iot.v1.PublicKeyCredential.newBuilder((com.google.cloud.iot.v1.PublicKeyCredential) credential_)
              .mergeFrom(value).buildPartial();
        } else {
          credential_ = value;
        }
        onChanged();
      } else {
        if (credentialCase_ == 2) {
          publicKeyBuilder_.mergeFrom(value);
        }
        publicKeyBuilder_.setMessage(value);
      }
      credentialCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public Builder clearPublicKey() {
      if (publicKeyBuilder_ == null) {
        if (credentialCase_ == 2) {
          credentialCase_ = 0;
          credential_ = null;
          onChanged();
        }
      } else {
        if (credentialCase_ == 2) {
          credentialCase_ = 0;
          credential_ = null;
        }
        publicKeyBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public com.google.cloud.iot.v1.PublicKeyCredential.Builder getPublicKeyBuilder() {
      return getPublicKeyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public com.google.cloud.iot.v1.PublicKeyCredentialOrBuilder getPublicKeyOrBuilder() {
      if ((credentialCase_ == 2) && (publicKeyBuilder_ != null)) {
        return publicKeyBuilder_.getMessageOrBuilder();
      } else {
        if (credentialCase_ == 2) {
          return (com.google.cloud.iot.v1.PublicKeyCredential) credential_;
        }
        return com.google.cloud.iot.v1.PublicKeyCredential.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.iot.v1.PublicKeyCredential, com.google.cloud.iot.v1.PublicKeyCredential.Builder, com.google.cloud.iot.v1.PublicKeyCredentialOrBuilder> 
        getPublicKeyFieldBuilder() {
      if (publicKeyBuilder_ == null) {
        if (!(credentialCase_ == 2)) {
          credential_ = com.google.cloud.iot.v1.PublicKeyCredential.getDefaultInstance();
        }
        publicKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.iot.v1.PublicKeyCredential, com.google.cloud.iot.v1.PublicKeyCredential.Builder, com.google.cloud.iot.v1.PublicKeyCredentialOrBuilder>(
                (com.google.cloud.iot.v1.PublicKeyCredential) credential_,
                getParentForChildren(),
                isClean());
        credential_ = null;
      }
      credentialCase_ = 2;
      onChanged();;
      return publicKeyBuilder_;
    }

    private com.google.protobuf.Timestamp expirationTime_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> expirationTimeBuilder_;
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public boolean hasExpirationTime() {
      return expirationTimeBuilder_ != null || expirationTime_ != null;
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public com.google.protobuf.Timestamp getExpirationTime() {
      if (expirationTimeBuilder_ == null) {
        return expirationTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expirationTime_;
      } else {
        return expirationTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public Builder setExpirationTime(com.google.protobuf.Timestamp value) {
      if (expirationTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        expirationTime_ = value;
        onChanged();
      } else {
        expirationTimeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public Builder setExpirationTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (expirationTimeBuilder_ == null) {
        expirationTime_ = builderForValue.build();
        onChanged();
      } else {
        expirationTimeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public Builder mergeExpirationTime(com.google.protobuf.Timestamp value) {
      if (expirationTimeBuilder_ == null) {
        if (expirationTime_ != null) {
          expirationTime_ =
            com.google.protobuf.Timestamp.newBuilder(expirationTime_).mergeFrom(value).buildPartial();
        } else {
          expirationTime_ = value;
        }
        onChanged();
      } else {
        expirationTimeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public Builder clearExpirationTime() {
      if (expirationTimeBuilder_ == null) {
        expirationTime_ = null;
        onChanged();
      } else {
        expirationTime_ = null;
        expirationTimeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public com.google.protobuf.Timestamp.Builder getExpirationTimeBuilder() {
      
      onChanged();
      return getExpirationTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getExpirationTimeOrBuilder() {
      if (expirationTimeBuilder_ != null) {
        return expirationTimeBuilder_.getMessageOrBuilder();
      } else {
        return expirationTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : expirationTime_;
      }
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getExpirationTimeFieldBuilder() {
      if (expirationTimeBuilder_ == null) {
        expirationTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getExpirationTime(),
                getParentForChildren(),
                isClean());
        expirationTime_ = null;
      }
      return expirationTimeBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.cloud.iot.v1.DeviceCredential)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.iot.v1.DeviceCredential)
  private static final com.google.cloud.iot.v1.DeviceCredential DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.iot.v1.DeviceCredential();
  }

  public static com.google.cloud.iot.v1.DeviceCredential getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DeviceCredential>
      PARSER = new com.google.protobuf.AbstractParser<DeviceCredential>() {
    public DeviceCredential parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DeviceCredential(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DeviceCredential> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DeviceCredential> getParserForType() {
    return PARSER;
  }

  public com.google.cloud.iot.v1.DeviceCredential getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

