// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/spanner.proto

package com.google.spanner.v1;

/**
 * <pre>
 * The request for [Read][google.spanner.v1.Spanner.Read] and
 * [StreamingRead][google.spanner.v1.Spanner.StreamingRead].
 * </pre>
 *
 * Protobuf type {@code google.spanner.v1.ReadRequest}
 */
public  final class ReadRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.spanner.v1.ReadRequest)
    ReadRequestOrBuilder {
  // Use ReadRequest.newBuilder() to construct.
  private ReadRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ReadRequest() {
    session_ = "";
    table_ = "";
    index_ = "";
    columns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    limit_ = 0L;
    resumeToken_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ReadRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            session_ = s;
            break;
          }
          case 18: {
            com.google.spanner.v1.TransactionSelector.Builder subBuilder = null;
            if (transaction_ != null) {
              subBuilder = transaction_.toBuilder();
            }
            transaction_ = input.readMessage(com.google.spanner.v1.TransactionSelector.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(transaction_);
              transaction_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            table_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            index_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              columns_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000010;
            }
            columns_.add(s);
            break;
          }
          case 50: {
            com.google.spanner.v1.KeySet.Builder subBuilder = null;
            if (keySet_ != null) {
              subBuilder = keySet_.toBuilder();
            }
            keySet_ = input.readMessage(com.google.spanner.v1.KeySet.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(keySet_);
              keySet_ = subBuilder.buildPartial();
            }

            break;
          }
          case 64: {

            limit_ = input.readInt64();
            break;
          }
          case 74: {

            resumeToken_ = input.readBytes();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        columns_ = columns_.getUnmodifiableView();
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ReadRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ReadRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.spanner.v1.ReadRequest.class, com.google.spanner.v1.ReadRequest.Builder.class);
  }

  private int bitField0_;
  public static final int SESSION_FIELD_NUMBER = 1;
  private volatile java.lang.Object session_;
  /**
   * <pre>
   * Required. The session in which the read should be performed.
   * </pre>
   *
   * <code>optional string session = 1;</code>
   */
  public java.lang.String getSession() {
    java.lang.Object ref = session_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      session_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The session in which the read should be performed.
   * </pre>
   *
   * <code>optional string session = 1;</code>
   */
  public com.google.protobuf.ByteString
      getSessionBytes() {
    java.lang.Object ref = session_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      session_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TRANSACTION_FIELD_NUMBER = 2;
  private com.google.spanner.v1.TransactionSelector transaction_;
  /**
   * <pre>
   * The transaction to use. If none is provided, the default is a
   * temporary read-only transaction with strong concurrency.
   * </pre>
   *
   * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
   */
  public boolean hasTransaction() {
    return transaction_ != null;
  }
  /**
   * <pre>
   * The transaction to use. If none is provided, the default is a
   * temporary read-only transaction with strong concurrency.
   * </pre>
   *
   * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
   */
  public com.google.spanner.v1.TransactionSelector getTransaction() {
    return transaction_ == null ? com.google.spanner.v1.TransactionSelector.getDefaultInstance() : transaction_;
  }
  /**
   * <pre>
   * The transaction to use. If none is provided, the default is a
   * temporary read-only transaction with strong concurrency.
   * </pre>
   *
   * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
   */
  public com.google.spanner.v1.TransactionSelectorOrBuilder getTransactionOrBuilder() {
    return getTransaction();
  }

  public static final int TABLE_FIELD_NUMBER = 3;
  private volatile java.lang.Object table_;
  /**
   * <pre>
   * Required. The name of the table in the database to be read.
   * </pre>
   *
   * <code>optional string table = 3;</code>
   */
  public java.lang.String getTable() {
    java.lang.Object ref = table_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      table_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The name of the table in the database to be read.
   * </pre>
   *
   * <code>optional string table = 3;</code>
   */
  public com.google.protobuf.ByteString
      getTableBytes() {
    java.lang.Object ref = table_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      table_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INDEX_FIELD_NUMBER = 4;
  private volatile java.lang.Object index_;
  /**
   * <pre>
   * If non-empty, the name of an index on [table][google.spanner.v1.ReadRequest.table]. This index is
   * used instead of the table primary key when interpreting [key_set][google.spanner.v1.ReadRequest.key_set]
   * and sorting result rows. See [key_set][google.spanner.v1.ReadRequest.key_set] for further information.
   * </pre>
   *
   * <code>optional string index = 4;</code>
   */
  public java.lang.String getIndex() {
    java.lang.Object ref = index_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      index_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * If non-empty, the name of an index on [table][google.spanner.v1.ReadRequest.table]. This index is
   * used instead of the table primary key when interpreting [key_set][google.spanner.v1.ReadRequest.key_set]
   * and sorting result rows. See [key_set][google.spanner.v1.ReadRequest.key_set] for further information.
   * </pre>
   *
   * <code>optional string index = 4;</code>
   */
  public com.google.protobuf.ByteString
      getIndexBytes() {
    java.lang.Object ref = index_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      index_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int COLUMNS_FIELD_NUMBER = 5;
  private com.google.protobuf.LazyStringList columns_;
  /**
   * <pre>
   * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
   * this request.
   * </pre>
   *
   * <code>repeated string columns = 5;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getColumnsList() {
    return columns_;
  }
  /**
   * <pre>
   * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
   * this request.
   * </pre>
   *
   * <code>repeated string columns = 5;</code>
   */
  public int getColumnsCount() {
    return columns_.size();
  }
  /**
   * <pre>
   * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
   * this request.
   * </pre>
   *
   * <code>repeated string columns = 5;</code>
   */
  public java.lang.String getColumns(int index) {
    return columns_.get(index);
  }
  /**
   * <pre>
   * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
   * this request.
   * </pre>
   *
   * <code>repeated string columns = 5;</code>
   */
  public com.google.protobuf.ByteString
      getColumnsBytes(int index) {
    return columns_.getByteString(index);
  }

  public static final int KEY_SET_FIELD_NUMBER = 6;
  private com.google.spanner.v1.KeySet keySet_;
  /**
   * <pre>
   * Required. `key_set` identifies the rows to be yielded. `key_set` names the
   * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
   * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
   * index keys in [index][google.spanner.v1.ReadRequest.index].
   * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
   * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
   * It is not an error for the `key_set` to name rows that do not
   * exist in the database. Read yields nothing for nonexistent rows.
   * </pre>
   *
   * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
   */
  public boolean hasKeySet() {
    return keySet_ != null;
  }
  /**
   * <pre>
   * Required. `key_set` identifies the rows to be yielded. `key_set` names the
   * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
   * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
   * index keys in [index][google.spanner.v1.ReadRequest.index].
   * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
   * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
   * It is not an error for the `key_set` to name rows that do not
   * exist in the database. Read yields nothing for nonexistent rows.
   * </pre>
   *
   * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
   */
  public com.google.spanner.v1.KeySet getKeySet() {
    return keySet_ == null ? com.google.spanner.v1.KeySet.getDefaultInstance() : keySet_;
  }
  /**
   * <pre>
   * Required. `key_set` identifies the rows to be yielded. `key_set` names the
   * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
   * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
   * index keys in [index][google.spanner.v1.ReadRequest.index].
   * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
   * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
   * It is not an error for the `key_set` to name rows that do not
   * exist in the database. Read yields nothing for nonexistent rows.
   * </pre>
   *
   * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
   */
  public com.google.spanner.v1.KeySetOrBuilder getKeySetOrBuilder() {
    return getKeySet();
  }

  public static final int LIMIT_FIELD_NUMBER = 8;
  private long limit_;
  /**
   * <pre>
   * If greater than zero, only the first `limit` rows are yielded. If `limit`
   * is zero, the default is no limit.
   * </pre>
   *
   * <code>optional int64 limit = 8;</code>
   */
  public long getLimit() {
    return limit_;
  }

  public static final int RESUME_TOKEN_FIELD_NUMBER = 9;
  private com.google.protobuf.ByteString resumeToken_;
  /**
   * <pre>
   * If this request is resuming a previously interrupted read,
   * `resume_token` should be copied from the last
   * [PartialResultSet][google.spanner.v1.PartialResultSet] yielded before the interruption. Doing this
   * enables the new read to resume where the last read left off. The
   * rest of the request parameters must exactly match the request
   * that yielded this token.
   * </pre>
   *
   * <code>optional bytes resume_token = 9;</code>
   */
  public com.google.protobuf.ByteString getResumeToken() {
    return resumeToken_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getSessionBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, session_);
    }
    if (transaction_ != null) {
      output.writeMessage(2, getTransaction());
    }
    if (!getTableBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, table_);
    }
    if (!getIndexBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, index_);
    }
    for (int i = 0; i < columns_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, columns_.getRaw(i));
    }
    if (keySet_ != null) {
      output.writeMessage(6, getKeySet());
    }
    if (limit_ != 0L) {
      output.writeInt64(8, limit_);
    }
    if (!resumeToken_.isEmpty()) {
      output.writeBytes(9, resumeToken_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getSessionBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, session_);
    }
    if (transaction_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getTransaction());
    }
    if (!getTableBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, table_);
    }
    if (!getIndexBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, index_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < columns_.size(); i++) {
        dataSize += computeStringSizeNoTag(columns_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getColumnsList().size();
    }
    if (keySet_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getKeySet());
    }
    if (limit_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, limit_);
    }
    if (!resumeToken_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(9, resumeToken_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.spanner.v1.ReadRequest)) {
      return super.equals(obj);
    }
    com.google.spanner.v1.ReadRequest other = (com.google.spanner.v1.ReadRequest) obj;

    boolean result = true;
    result = result && getSession()
        .equals(other.getSession());
    result = result && (hasTransaction() == other.hasTransaction());
    if (hasTransaction()) {
      result = result && getTransaction()
          .equals(other.getTransaction());
    }
    result = result && getTable()
        .equals(other.getTable());
    result = result && getIndex()
        .equals(other.getIndex());
    result = result && getColumnsList()
        .equals(other.getColumnsList());
    result = result && (hasKeySet() == other.hasKeySet());
    if (hasKeySet()) {
      result = result && getKeySet()
          .equals(other.getKeySet());
    }
    result = result && (getLimit()
        == other.getLimit());
    result = result && getResumeToken()
        .equals(other.getResumeToken());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    hash = (37 * hash) + SESSION_FIELD_NUMBER;
    hash = (53 * hash) + getSession().hashCode();
    if (hasTransaction()) {
      hash = (37 * hash) + TRANSACTION_FIELD_NUMBER;
      hash = (53 * hash) + getTransaction().hashCode();
    }
    hash = (37 * hash) + TABLE_FIELD_NUMBER;
    hash = (53 * hash) + getTable().hashCode();
    hash = (37 * hash) + INDEX_FIELD_NUMBER;
    hash = (53 * hash) + getIndex().hashCode();
    if (getColumnsCount() > 0) {
      hash = (37 * hash) + COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + getColumnsList().hashCode();
    }
    if (hasKeySet()) {
      hash = (37 * hash) + KEY_SET_FIELD_NUMBER;
      hash = (53 * hash) + getKeySet().hashCode();
    }
    hash = (37 * hash) + LIMIT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getLimit());
    hash = (37 * hash) + RESUME_TOKEN_FIELD_NUMBER;
    hash = (53 * hash) + getResumeToken().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.spanner.v1.ReadRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.spanner.v1.ReadRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.spanner.v1.ReadRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.spanner.v1.ReadRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.spanner.v1.ReadRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.spanner.v1.ReadRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.spanner.v1.ReadRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.spanner.v1.ReadRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.spanner.v1.ReadRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.spanner.v1.ReadRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.spanner.v1.ReadRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The request for [Read][google.spanner.v1.Spanner.Read] and
   * [StreamingRead][google.spanner.v1.Spanner.StreamingRead].
   * </pre>
   *
   * Protobuf type {@code google.spanner.v1.ReadRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.spanner.v1.ReadRequest)
      com.google.spanner.v1.ReadRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ReadRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ReadRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.spanner.v1.ReadRequest.class, com.google.spanner.v1.ReadRequest.Builder.class);
    }

    // Construct using com.google.spanner.v1.ReadRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      session_ = "";

      if (transactionBuilder_ == null) {
        transaction_ = null;
      } else {
        transaction_ = null;
        transactionBuilder_ = null;
      }
      table_ = "";

      index_ = "";

      columns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000010);
      if (keySetBuilder_ == null) {
        keySet_ = null;
      } else {
        keySet_ = null;
        keySetBuilder_ = null;
      }
      limit_ = 0L;

      resumeToken_ = com.google.protobuf.ByteString.EMPTY;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ReadRequest_descriptor;
    }

    public com.google.spanner.v1.ReadRequest getDefaultInstanceForType() {
      return com.google.spanner.v1.ReadRequest.getDefaultInstance();
    }

    public com.google.spanner.v1.ReadRequest build() {
      com.google.spanner.v1.ReadRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.spanner.v1.ReadRequest buildPartial() {
      com.google.spanner.v1.ReadRequest result = new com.google.spanner.v1.ReadRequest(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.session_ = session_;
      if (transactionBuilder_ == null) {
        result.transaction_ = transaction_;
      } else {
        result.transaction_ = transactionBuilder_.build();
      }
      result.table_ = table_;
      result.index_ = index_;
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        columns_ = columns_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.columns_ = columns_;
      if (keySetBuilder_ == null) {
        result.keySet_ = keySet_;
      } else {
        result.keySet_ = keySetBuilder_.build();
      }
      result.limit_ = limit_;
      result.resumeToken_ = resumeToken_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.spanner.v1.ReadRequest) {
        return mergeFrom((com.google.spanner.v1.ReadRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.spanner.v1.ReadRequest other) {
      if (other == com.google.spanner.v1.ReadRequest.getDefaultInstance()) return this;
      if (!other.getSession().isEmpty()) {
        session_ = other.session_;
        onChanged();
      }
      if (other.hasTransaction()) {
        mergeTransaction(other.getTransaction());
      }
      if (!other.getTable().isEmpty()) {
        table_ = other.table_;
        onChanged();
      }
      if (!other.getIndex().isEmpty()) {
        index_ = other.index_;
        onChanged();
      }
      if (!other.columns_.isEmpty()) {
        if (columns_.isEmpty()) {
          columns_ = other.columns_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureColumnsIsMutable();
          columns_.addAll(other.columns_);
        }
        onChanged();
      }
      if (other.hasKeySet()) {
        mergeKeySet(other.getKeySet());
      }
      if (other.getLimit() != 0L) {
        setLimit(other.getLimit());
      }
      if (other.getResumeToken() != com.google.protobuf.ByteString.EMPTY) {
        setResumeToken(other.getResumeToken());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.spanner.v1.ReadRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.spanner.v1.ReadRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object session_ = "";
    /**
     * <pre>
     * Required. The session in which the read should be performed.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public java.lang.String getSession() {
      java.lang.Object ref = session_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        session_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The session in which the read should be performed.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSessionBytes() {
      java.lang.Object ref = session_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        session_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The session in which the read should be performed.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public Builder setSession(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      session_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The session in which the read should be performed.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public Builder clearSession() {
      
      session_ = getDefaultInstance().getSession();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The session in which the read should be performed.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public Builder setSessionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      session_ = value;
      onChanged();
      return this;
    }

    private com.google.spanner.v1.TransactionSelector transaction_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.TransactionSelector, com.google.spanner.v1.TransactionSelector.Builder, com.google.spanner.v1.TransactionSelectorOrBuilder> transactionBuilder_;
    /**
     * <pre>
     * The transaction to use. If none is provided, the default is a
     * temporary read-only transaction with strong concurrency.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
     */
    public boolean hasTransaction() {
      return transactionBuilder_ != null || transaction_ != null;
    }
    /**
     * <pre>
     * The transaction to use. If none is provided, the default is a
     * temporary read-only transaction with strong concurrency.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
     */
    public com.google.spanner.v1.TransactionSelector getTransaction() {
      if (transactionBuilder_ == null) {
        return transaction_ == null ? com.google.spanner.v1.TransactionSelector.getDefaultInstance() : transaction_;
      } else {
        return transactionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The transaction to use. If none is provided, the default is a
     * temporary read-only transaction with strong concurrency.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
     */
    public Builder setTransaction(com.google.spanner.v1.TransactionSelector value) {
      if (transactionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transaction_ = value;
        onChanged();
      } else {
        transactionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The transaction to use. If none is provided, the default is a
     * temporary read-only transaction with strong concurrency.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
     */
    public Builder setTransaction(
        com.google.spanner.v1.TransactionSelector.Builder builderForValue) {
      if (transactionBuilder_ == null) {
        transaction_ = builderForValue.build();
        onChanged();
      } else {
        transactionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The transaction to use. If none is provided, the default is a
     * temporary read-only transaction with strong concurrency.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
     */
    public Builder mergeTransaction(com.google.spanner.v1.TransactionSelector value) {
      if (transactionBuilder_ == null) {
        if (transaction_ != null) {
          transaction_ =
            com.google.spanner.v1.TransactionSelector.newBuilder(transaction_).mergeFrom(value).buildPartial();
        } else {
          transaction_ = value;
        }
        onChanged();
      } else {
        transactionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The transaction to use. If none is provided, the default is a
     * temporary read-only transaction with strong concurrency.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
     */
    public Builder clearTransaction() {
      if (transactionBuilder_ == null) {
        transaction_ = null;
        onChanged();
      } else {
        transaction_ = null;
        transactionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The transaction to use. If none is provided, the default is a
     * temporary read-only transaction with strong concurrency.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
     */
    public com.google.spanner.v1.TransactionSelector.Builder getTransactionBuilder() {
      
      onChanged();
      return getTransactionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The transaction to use. If none is provided, the default is a
     * temporary read-only transaction with strong concurrency.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
     */
    public com.google.spanner.v1.TransactionSelectorOrBuilder getTransactionOrBuilder() {
      if (transactionBuilder_ != null) {
        return transactionBuilder_.getMessageOrBuilder();
      } else {
        return transaction_ == null ?
            com.google.spanner.v1.TransactionSelector.getDefaultInstance() : transaction_;
      }
    }
    /**
     * <pre>
     * The transaction to use. If none is provided, the default is a
     * temporary read-only transaction with strong concurrency.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionSelector transaction = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.TransactionSelector, com.google.spanner.v1.TransactionSelector.Builder, com.google.spanner.v1.TransactionSelectorOrBuilder> 
        getTransactionFieldBuilder() {
      if (transactionBuilder_ == null) {
        transactionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.spanner.v1.TransactionSelector, com.google.spanner.v1.TransactionSelector.Builder, com.google.spanner.v1.TransactionSelectorOrBuilder>(
                getTransaction(),
                getParentForChildren(),
                isClean());
        transaction_ = null;
      }
      return transactionBuilder_;
    }

    private java.lang.Object table_ = "";
    /**
     * <pre>
     * Required. The name of the table in the database to be read.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     */
    public java.lang.String getTable() {
      java.lang.Object ref = table_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        table_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The name of the table in the database to be read.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     */
    public com.google.protobuf.ByteString
        getTableBytes() {
      java.lang.Object ref = table_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        table_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The name of the table in the database to be read.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     */
    public Builder setTable(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      table_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The name of the table in the database to be read.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     */
    public Builder clearTable() {
      
      table_ = getDefaultInstance().getTable();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The name of the table in the database to be read.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     */
    public Builder setTableBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      table_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object index_ = "";
    /**
     * <pre>
     * If non-empty, the name of an index on [table][google.spanner.v1.ReadRequest.table]. This index is
     * used instead of the table primary key when interpreting [key_set][google.spanner.v1.ReadRequest.key_set]
     * and sorting result rows. See [key_set][google.spanner.v1.ReadRequest.key_set] for further information.
     * </pre>
     *
     * <code>optional string index = 4;</code>
     */
    public java.lang.String getIndex() {
      java.lang.Object ref = index_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        index_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * If non-empty, the name of an index on [table][google.spanner.v1.ReadRequest.table]. This index is
     * used instead of the table primary key when interpreting [key_set][google.spanner.v1.ReadRequest.key_set]
     * and sorting result rows. See [key_set][google.spanner.v1.ReadRequest.key_set] for further information.
     * </pre>
     *
     * <code>optional string index = 4;</code>
     */
    public com.google.protobuf.ByteString
        getIndexBytes() {
      java.lang.Object ref = index_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        index_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * If non-empty, the name of an index on [table][google.spanner.v1.ReadRequest.table]. This index is
     * used instead of the table primary key when interpreting [key_set][google.spanner.v1.ReadRequest.key_set]
     * and sorting result rows. See [key_set][google.spanner.v1.ReadRequest.key_set] for further information.
     * </pre>
     *
     * <code>optional string index = 4;</code>
     */
    public Builder setIndex(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      index_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If non-empty, the name of an index on [table][google.spanner.v1.ReadRequest.table]. This index is
     * used instead of the table primary key when interpreting [key_set][google.spanner.v1.ReadRequest.key_set]
     * and sorting result rows. See [key_set][google.spanner.v1.ReadRequest.key_set] for further information.
     * </pre>
     *
     * <code>optional string index = 4;</code>
     */
    public Builder clearIndex() {
      
      index_ = getDefaultInstance().getIndex();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If non-empty, the name of an index on [table][google.spanner.v1.ReadRequest.table]. This index is
     * used instead of the table primary key when interpreting [key_set][google.spanner.v1.ReadRequest.key_set]
     * and sorting result rows. See [key_set][google.spanner.v1.ReadRequest.key_set] for further information.
     * </pre>
     *
     * <code>optional string index = 4;</code>
     */
    public Builder setIndexBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      index_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList columns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureColumnsIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        columns_ = new com.google.protobuf.LazyStringArrayList(columns_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <pre>
     * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
     * this request.
     * </pre>
     *
     * <code>repeated string columns = 5;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getColumnsList() {
      return columns_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
     * this request.
     * </pre>
     *
     * <code>repeated string columns = 5;</code>
     */
    public int getColumnsCount() {
      return columns_.size();
    }
    /**
     * <pre>
     * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
     * this request.
     * </pre>
     *
     * <code>repeated string columns = 5;</code>
     */
    public java.lang.String getColumns(int index) {
      return columns_.get(index);
    }
    /**
     * <pre>
     * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
     * this request.
     * </pre>
     *
     * <code>repeated string columns = 5;</code>
     */
    public com.google.protobuf.ByteString
        getColumnsBytes(int index) {
      return columns_.getByteString(index);
    }
    /**
     * <pre>
     * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
     * this request.
     * </pre>
     *
     * <code>repeated string columns = 5;</code>
     */
    public Builder setColumns(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureColumnsIsMutable();
      columns_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
     * this request.
     * </pre>
     *
     * <code>repeated string columns = 5;</code>
     */
    public Builder addColumns(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureColumnsIsMutable();
      columns_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
     * this request.
     * </pre>
     *
     * <code>repeated string columns = 5;</code>
     */
    public Builder addAllColumns(
        java.lang.Iterable<java.lang.String> values) {
      ensureColumnsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, columns_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
     * this request.
     * </pre>
     *
     * <code>repeated string columns = 5;</code>
     */
    public Builder clearColumns() {
      columns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The columns of [table][google.spanner.v1.ReadRequest.table] to be returned for each row matching
     * this request.
     * </pre>
     *
     * <code>repeated string columns = 5;</code>
     */
    public Builder addColumnsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureColumnsIsMutable();
      columns_.add(value);
      onChanged();
      return this;
    }

    private com.google.spanner.v1.KeySet keySet_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.KeySet, com.google.spanner.v1.KeySet.Builder, com.google.spanner.v1.KeySetOrBuilder> keySetBuilder_;
    /**
     * <pre>
     * Required. `key_set` identifies the rows to be yielded. `key_set` names the
     * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
     * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
     * index keys in [index][google.spanner.v1.ReadRequest.index].
     * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
     * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
     * It is not an error for the `key_set` to name rows that do not
     * exist in the database. Read yields nothing for nonexistent rows.
     * </pre>
     *
     * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
     */
    public boolean hasKeySet() {
      return keySetBuilder_ != null || keySet_ != null;
    }
    /**
     * <pre>
     * Required. `key_set` identifies the rows to be yielded. `key_set` names the
     * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
     * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
     * index keys in [index][google.spanner.v1.ReadRequest.index].
     * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
     * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
     * It is not an error for the `key_set` to name rows that do not
     * exist in the database. Read yields nothing for nonexistent rows.
     * </pre>
     *
     * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
     */
    public com.google.spanner.v1.KeySet getKeySet() {
      if (keySetBuilder_ == null) {
        return keySet_ == null ? com.google.spanner.v1.KeySet.getDefaultInstance() : keySet_;
      } else {
        return keySetBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. `key_set` identifies the rows to be yielded. `key_set` names the
     * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
     * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
     * index keys in [index][google.spanner.v1.ReadRequest.index].
     * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
     * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
     * It is not an error for the `key_set` to name rows that do not
     * exist in the database. Read yields nothing for nonexistent rows.
     * </pre>
     *
     * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
     */
    public Builder setKeySet(com.google.spanner.v1.KeySet value) {
      if (keySetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        keySet_ = value;
        onChanged();
      } else {
        keySetBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. `key_set` identifies the rows to be yielded. `key_set` names the
     * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
     * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
     * index keys in [index][google.spanner.v1.ReadRequest.index].
     * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
     * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
     * It is not an error for the `key_set` to name rows that do not
     * exist in the database. Read yields nothing for nonexistent rows.
     * </pre>
     *
     * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
     */
    public Builder setKeySet(
        com.google.spanner.v1.KeySet.Builder builderForValue) {
      if (keySetBuilder_ == null) {
        keySet_ = builderForValue.build();
        onChanged();
      } else {
        keySetBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Required. `key_set` identifies the rows to be yielded. `key_set` names the
     * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
     * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
     * index keys in [index][google.spanner.v1.ReadRequest.index].
     * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
     * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
     * It is not an error for the `key_set` to name rows that do not
     * exist in the database. Read yields nothing for nonexistent rows.
     * </pre>
     *
     * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
     */
    public Builder mergeKeySet(com.google.spanner.v1.KeySet value) {
      if (keySetBuilder_ == null) {
        if (keySet_ != null) {
          keySet_ =
            com.google.spanner.v1.KeySet.newBuilder(keySet_).mergeFrom(value).buildPartial();
        } else {
          keySet_ = value;
        }
        onChanged();
      } else {
        keySetBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. `key_set` identifies the rows to be yielded. `key_set` names the
     * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
     * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
     * index keys in [index][google.spanner.v1.ReadRequest.index].
     * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
     * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
     * It is not an error for the `key_set` to name rows that do not
     * exist in the database. Read yields nothing for nonexistent rows.
     * </pre>
     *
     * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
     */
    public Builder clearKeySet() {
      if (keySetBuilder_ == null) {
        keySet_ = null;
        onChanged();
      } else {
        keySet_ = null;
        keySetBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Required. `key_set` identifies the rows to be yielded. `key_set` names the
     * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
     * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
     * index keys in [index][google.spanner.v1.ReadRequest.index].
     * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
     * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
     * It is not an error for the `key_set` to name rows that do not
     * exist in the database. Read yields nothing for nonexistent rows.
     * </pre>
     *
     * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
     */
    public com.google.spanner.v1.KeySet.Builder getKeySetBuilder() {
      
      onChanged();
      return getKeySetFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. `key_set` identifies the rows to be yielded. `key_set` names the
     * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
     * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
     * index keys in [index][google.spanner.v1.ReadRequest.index].
     * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
     * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
     * It is not an error for the `key_set` to name rows that do not
     * exist in the database. Read yields nothing for nonexistent rows.
     * </pre>
     *
     * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
     */
    public com.google.spanner.v1.KeySetOrBuilder getKeySetOrBuilder() {
      if (keySetBuilder_ != null) {
        return keySetBuilder_.getMessageOrBuilder();
      } else {
        return keySet_ == null ?
            com.google.spanner.v1.KeySet.getDefaultInstance() : keySet_;
      }
    }
    /**
     * <pre>
     * Required. `key_set` identifies the rows to be yielded. `key_set` names the
     * primary keys of the rows in [table][google.spanner.v1.ReadRequest.table] to be yielded, unless [index][google.spanner.v1.ReadRequest.index]
     * is present. If [index][google.spanner.v1.ReadRequest.index] is present, then [key_set][google.spanner.v1.ReadRequest.key_set] instead names
     * index keys in [index][google.spanner.v1.ReadRequest.index].
     * Rows are yielded in table primary key order (if [index][google.spanner.v1.ReadRequest.index] is empty)
     * or index key order (if [index][google.spanner.v1.ReadRequest.index] is non-empty).
     * It is not an error for the `key_set` to name rows that do not
     * exist in the database. Read yields nothing for nonexistent rows.
     * </pre>
     *
     * <code>optional .google.spanner.v1.KeySet key_set = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.KeySet, com.google.spanner.v1.KeySet.Builder, com.google.spanner.v1.KeySetOrBuilder> 
        getKeySetFieldBuilder() {
      if (keySetBuilder_ == null) {
        keySetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.spanner.v1.KeySet, com.google.spanner.v1.KeySet.Builder, com.google.spanner.v1.KeySetOrBuilder>(
                getKeySet(),
                getParentForChildren(),
                isClean());
        keySet_ = null;
      }
      return keySetBuilder_;
    }

    private long limit_ ;
    /**
     * <pre>
     * If greater than zero, only the first `limit` rows are yielded. If `limit`
     * is zero, the default is no limit.
     * </pre>
     *
     * <code>optional int64 limit = 8;</code>
     */
    public long getLimit() {
      return limit_;
    }
    /**
     * <pre>
     * If greater than zero, only the first `limit` rows are yielded. If `limit`
     * is zero, the default is no limit.
     * </pre>
     *
     * <code>optional int64 limit = 8;</code>
     */
    public Builder setLimit(long value) {
      
      limit_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If greater than zero, only the first `limit` rows are yielded. If `limit`
     * is zero, the default is no limit.
     * </pre>
     *
     * <code>optional int64 limit = 8;</code>
     */
    public Builder clearLimit() {
      
      limit_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString resumeToken_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * If this request is resuming a previously interrupted read,
     * `resume_token` should be copied from the last
     * [PartialResultSet][google.spanner.v1.PartialResultSet] yielded before the interruption. Doing this
     * enables the new read to resume where the last read left off. The
     * rest of the request parameters must exactly match the request
     * that yielded this token.
     * </pre>
     *
     * <code>optional bytes resume_token = 9;</code>
     */
    public com.google.protobuf.ByteString getResumeToken() {
      return resumeToken_;
    }
    /**
     * <pre>
     * If this request is resuming a previously interrupted read,
     * `resume_token` should be copied from the last
     * [PartialResultSet][google.spanner.v1.PartialResultSet] yielded before the interruption. Doing this
     * enables the new read to resume where the last read left off. The
     * rest of the request parameters must exactly match the request
     * that yielded this token.
     * </pre>
     *
     * <code>optional bytes resume_token = 9;</code>
     */
    public Builder setResumeToken(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      resumeToken_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this request is resuming a previously interrupted read,
     * `resume_token` should be copied from the last
     * [PartialResultSet][google.spanner.v1.PartialResultSet] yielded before the interruption. Doing this
     * enables the new read to resume where the last read left off. The
     * rest of the request parameters must exactly match the request
     * that yielded this token.
     * </pre>
     *
     * <code>optional bytes resume_token = 9;</code>
     */
    public Builder clearResumeToken() {
      
      resumeToken_ = getDefaultInstance().getResumeToken();
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    public final Builder setSessionWithSessionName(com.google.spanner.v1.SessionName value) {
      if (value == null) {
        return setSession("");
      }
      return setSession(value.toString());
    }
    
    public final com.google.spanner.v1.SessionName getSessionAsSessionName() {
      java.lang.String str = getSession();
      if (str.isEmpty()) {
        return null;
      }
      return com.google.spanner.v1.SessionName.parse(str);
    }
    // @@protoc_insertion_point(builder_scope:google.spanner.v1.ReadRequest)
  }

  public final com.google.spanner.v1.SessionName getSessionAsSessionName() {
    java.lang.String str = getSession();
    if (str.isEmpty()) {
      return null;
    }
    return com.google.spanner.v1.SessionName.parse(str);
  }
  // @@protoc_insertion_point(class_scope:google.spanner.v1.ReadRequest)
  private static final com.google.spanner.v1.ReadRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.spanner.v1.ReadRequest();
  }

  public static com.google.spanner.v1.ReadRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ReadRequest>
      PARSER = new com.google.protobuf.AbstractParser<ReadRequest>() {
    public ReadRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReadRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ReadRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ReadRequest> getParserForType() {
    return PARSER;
  }

  public com.google.spanner.v1.ReadRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

