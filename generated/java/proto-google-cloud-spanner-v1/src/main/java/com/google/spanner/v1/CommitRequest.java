// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/spanner.proto

package com.google.spanner.v1;

/**
 * <pre>
 * The request for [Commit][google.spanner.v1.Spanner.Commit].
 * </pre>
 *
 * Protobuf type {@code google.spanner.v1.CommitRequest}
 */
public  final class CommitRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.spanner.v1.CommitRequest)
    CommitRequestOrBuilder {
  // Use CommitRequest.newBuilder() to construct.
  private CommitRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CommitRequest() {
    session_ = "";
    mutations_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private CommitRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            session_ = s;
            break;
          }
          case 18: {
            transactionCase_ = 2;
            transaction_ = input.readBytes();
            break;
          }
          case 26: {
            com.google.spanner.v1.TransactionOptions.Builder subBuilder = null;
            if (transactionCase_ == 3) {
              subBuilder = ((com.google.spanner.v1.TransactionOptions) transaction_).toBuilder();
            }
            transaction_ =
                input.readMessage(com.google.spanner.v1.TransactionOptions.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.google.spanner.v1.TransactionOptions) transaction_);
              transaction_ = subBuilder.buildPartial();
            }
            transactionCase_ = 3;
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              mutations_ = new java.util.ArrayList<com.google.spanner.v1.Mutation>();
              mutable_bitField0_ |= 0x00000008;
            }
            mutations_.add(
                input.readMessage(com.google.spanner.v1.Mutation.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        mutations_ = java.util.Collections.unmodifiableList(mutations_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_CommitRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_CommitRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.spanner.v1.CommitRequest.class, com.google.spanner.v1.CommitRequest.Builder.class);
  }

  private int bitField0_;
  private int transactionCase_ = 0;
  private java.lang.Object transaction_;
  public enum TransactionCase
      implements com.google.protobuf.Internal.EnumLite {
    TRANSACTION_ID(2),
    SINGLE_USE_TRANSACTION(3),
    TRANSACTION_NOT_SET(0);
    private final int value;
    private TransactionCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransactionCase valueOf(int value) {
      return forNumber(value);
    }

    public static TransactionCase forNumber(int value) {
      switch (value) {
        case 2: return TRANSACTION_ID;
        case 3: return SINGLE_USE_TRANSACTION;
        case 0: return TRANSACTION_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public TransactionCase
  getTransactionCase() {
    return TransactionCase.forNumber(
        transactionCase_);
  }

  public static final int SESSION_FIELD_NUMBER = 1;
  private volatile java.lang.Object session_;
  /**
   * <pre>
   * Required. The session in which the transaction to be committed is running.
   * </pre>
   *
   * <code>optional string session = 1;</code>
   */
  public java.lang.String getSession() {
    java.lang.Object ref = session_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      session_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The session in which the transaction to be committed is running.
   * </pre>
   *
   * <code>optional string session = 1;</code>
   */
  public com.google.protobuf.ByteString
      getSessionBytes() {
    java.lang.Object ref = session_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      session_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TRANSACTION_ID_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Commit a previously-started transaction.
   * </pre>
   *
   * <code>optional bytes transaction_id = 2;</code>
   */
  public com.google.protobuf.ByteString getTransactionId() {
    if (transactionCase_ == 2) {
      return (com.google.protobuf.ByteString) transaction_;
    }
    return com.google.protobuf.ByteString.EMPTY;
  }

  public static final int SINGLE_USE_TRANSACTION_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Execute mutations in a temporary transaction. Note that unlike
   * commit of a previously-started transaction, commit with a
   * temporary transaction is non-idempotent. That is, if the
   * `CommitRequest` is sent to Cloud Spanner more than once (for
   * instance, due to retries in the application, or in the
   * transport library), it is possible that the mutations are
   * executed more than once. If this is undesirable, use
   * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
   * [Commit][google.spanner.v1.Spanner.Commit] instead.
   * </pre>
   *
   * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
   */
  public com.google.spanner.v1.TransactionOptions getSingleUseTransaction() {
    if (transactionCase_ == 3) {
       return (com.google.spanner.v1.TransactionOptions) transaction_;
    }
    return com.google.spanner.v1.TransactionOptions.getDefaultInstance();
  }
  /**
   * <pre>
   * Execute mutations in a temporary transaction. Note that unlike
   * commit of a previously-started transaction, commit with a
   * temporary transaction is non-idempotent. That is, if the
   * `CommitRequest` is sent to Cloud Spanner more than once (for
   * instance, due to retries in the application, or in the
   * transport library), it is possible that the mutations are
   * executed more than once. If this is undesirable, use
   * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
   * [Commit][google.spanner.v1.Spanner.Commit] instead.
   * </pre>
   *
   * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
   */
  public com.google.spanner.v1.TransactionOptionsOrBuilder getSingleUseTransactionOrBuilder() {
    if (transactionCase_ == 3) {
       return (com.google.spanner.v1.TransactionOptions) transaction_;
    }
    return com.google.spanner.v1.TransactionOptions.getDefaultInstance();
  }

  public static final int MUTATIONS_FIELD_NUMBER = 4;
  private java.util.List<com.google.spanner.v1.Mutation> mutations_;
  /**
   * <pre>
   * The mutations to be executed when this transaction commits. All
   * mutations are applied atomically, in the order they appear in
   * this list.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
   */
  public java.util.List<com.google.spanner.v1.Mutation> getMutationsList() {
    return mutations_;
  }
  /**
   * <pre>
   * The mutations to be executed when this transaction commits. All
   * mutations are applied atomically, in the order they appear in
   * this list.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
   */
  public java.util.List<? extends com.google.spanner.v1.MutationOrBuilder> 
      getMutationsOrBuilderList() {
    return mutations_;
  }
  /**
   * <pre>
   * The mutations to be executed when this transaction commits. All
   * mutations are applied atomically, in the order they appear in
   * this list.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
   */
  public int getMutationsCount() {
    return mutations_.size();
  }
  /**
   * <pre>
   * The mutations to be executed when this transaction commits. All
   * mutations are applied atomically, in the order they appear in
   * this list.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
   */
  public com.google.spanner.v1.Mutation getMutations(int index) {
    return mutations_.get(index);
  }
  /**
   * <pre>
   * The mutations to be executed when this transaction commits. All
   * mutations are applied atomically, in the order they appear in
   * this list.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
   */
  public com.google.spanner.v1.MutationOrBuilder getMutationsOrBuilder(
      int index) {
    return mutations_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getSessionBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, session_);
    }
    if (transactionCase_ == 2) {
      output.writeBytes(
          2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) transaction_));
    }
    if (transactionCase_ == 3) {
      output.writeMessage(3, (com.google.spanner.v1.TransactionOptions) transaction_);
    }
    for (int i = 0; i < mutations_.size(); i++) {
      output.writeMessage(4, mutations_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getSessionBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, session_);
    }
    if (transactionCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(
            2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) transaction_));
    }
    if (transactionCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.google.spanner.v1.TransactionOptions) transaction_);
    }
    for (int i = 0; i < mutations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, mutations_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.spanner.v1.CommitRequest)) {
      return super.equals(obj);
    }
    com.google.spanner.v1.CommitRequest other = (com.google.spanner.v1.CommitRequest) obj;

    boolean result = true;
    result = result && getSession()
        .equals(other.getSession());
    result = result && getMutationsList()
        .equals(other.getMutationsList());
    result = result && getTransactionCase().equals(
        other.getTransactionCase());
    if (!result) return false;
    switch (transactionCase_) {
      case 2:
        result = result && getTransactionId()
            .equals(other.getTransactionId());
        break;
      case 3:
        result = result && getSingleUseTransaction()
            .equals(other.getSingleUseTransaction());
        break;
      case 0:
      default:
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    hash = (37 * hash) + SESSION_FIELD_NUMBER;
    hash = (53 * hash) + getSession().hashCode();
    if (getMutationsCount() > 0) {
      hash = (37 * hash) + MUTATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getMutationsList().hashCode();
    }
    switch (transactionCase_) {
      case 2:
        hash = (37 * hash) + TRANSACTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTransactionId().hashCode();
        break;
      case 3:
        hash = (37 * hash) + SINGLE_USE_TRANSACTION_FIELD_NUMBER;
        hash = (53 * hash) + getSingleUseTransaction().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.spanner.v1.CommitRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.spanner.v1.CommitRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.spanner.v1.CommitRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.spanner.v1.CommitRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.spanner.v1.CommitRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.spanner.v1.CommitRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.spanner.v1.CommitRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.spanner.v1.CommitRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.spanner.v1.CommitRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.spanner.v1.CommitRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.spanner.v1.CommitRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The request for [Commit][google.spanner.v1.Spanner.Commit].
   * </pre>
   *
   * Protobuf type {@code google.spanner.v1.CommitRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.spanner.v1.CommitRequest)
      com.google.spanner.v1.CommitRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_CommitRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_CommitRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.spanner.v1.CommitRequest.class, com.google.spanner.v1.CommitRequest.Builder.class);
    }

    // Construct using com.google.spanner.v1.CommitRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getMutationsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      session_ = "";

      if (mutationsBuilder_ == null) {
        mutations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        mutationsBuilder_.clear();
      }
      transactionCase_ = 0;
      transaction_ = null;
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_CommitRequest_descriptor;
    }

    public com.google.spanner.v1.CommitRequest getDefaultInstanceForType() {
      return com.google.spanner.v1.CommitRequest.getDefaultInstance();
    }

    public com.google.spanner.v1.CommitRequest build() {
      com.google.spanner.v1.CommitRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.spanner.v1.CommitRequest buildPartial() {
      com.google.spanner.v1.CommitRequest result = new com.google.spanner.v1.CommitRequest(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.session_ = session_;
      if (transactionCase_ == 2) {
        result.transaction_ = transaction_;
      }
      if (transactionCase_ == 3) {
        if (singleUseTransactionBuilder_ == null) {
          result.transaction_ = transaction_;
        } else {
          result.transaction_ = singleUseTransactionBuilder_.build();
        }
      }
      if (mutationsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          mutations_ = java.util.Collections.unmodifiableList(mutations_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.mutations_ = mutations_;
      } else {
        result.mutations_ = mutationsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      result.transactionCase_ = transactionCase_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.spanner.v1.CommitRequest) {
        return mergeFrom((com.google.spanner.v1.CommitRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.spanner.v1.CommitRequest other) {
      if (other == com.google.spanner.v1.CommitRequest.getDefaultInstance()) return this;
      if (!other.getSession().isEmpty()) {
        session_ = other.session_;
        onChanged();
      }
      if (mutationsBuilder_ == null) {
        if (!other.mutations_.isEmpty()) {
          if (mutations_.isEmpty()) {
            mutations_ = other.mutations_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureMutationsIsMutable();
            mutations_.addAll(other.mutations_);
          }
          onChanged();
        }
      } else {
        if (!other.mutations_.isEmpty()) {
          if (mutationsBuilder_.isEmpty()) {
            mutationsBuilder_.dispose();
            mutationsBuilder_ = null;
            mutations_ = other.mutations_;
            bitField0_ = (bitField0_ & ~0x00000008);
            mutationsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getMutationsFieldBuilder() : null;
          } else {
            mutationsBuilder_.addAllMessages(other.mutations_);
          }
        }
      }
      switch (other.getTransactionCase()) {
        case TRANSACTION_ID: {
          setTransactionId(other.getTransactionId());
          break;
        }
        case SINGLE_USE_TRANSACTION: {
          mergeSingleUseTransaction(other.getSingleUseTransaction());
          break;
        }
        case TRANSACTION_NOT_SET: {
          break;
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.spanner.v1.CommitRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.spanner.v1.CommitRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int transactionCase_ = 0;
    private java.lang.Object transaction_;
    public TransactionCase
        getTransactionCase() {
      return TransactionCase.forNumber(
          transactionCase_);
    }

    public Builder clearTransaction() {
      transactionCase_ = 0;
      transaction_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private java.lang.Object session_ = "";
    /**
     * <pre>
     * Required. The session in which the transaction to be committed is running.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public java.lang.String getSession() {
      java.lang.Object ref = session_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        session_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The session in which the transaction to be committed is running.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSessionBytes() {
      java.lang.Object ref = session_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        session_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The session in which the transaction to be committed is running.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public Builder setSession(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      session_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The session in which the transaction to be committed is running.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public Builder clearSession() {
      
      session_ = getDefaultInstance().getSession();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The session in which the transaction to be committed is running.
     * </pre>
     *
     * <code>optional string session = 1;</code>
     */
    public Builder setSessionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      session_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Commit a previously-started transaction.
     * </pre>
     *
     * <code>optional bytes transaction_id = 2;</code>
     */
    public com.google.protobuf.ByteString getTransactionId() {
      if (transactionCase_ == 2) {
        return (com.google.protobuf.ByteString) transaction_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <pre>
     * Commit a previously-started transaction.
     * </pre>
     *
     * <code>optional bytes transaction_id = 2;</code>
     */
    public Builder setTransactionId(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  transactionCase_ = 2;
      transaction_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Commit a previously-started transaction.
     * </pre>
     *
     * <code>optional bytes transaction_id = 2;</code>
     */
    public Builder clearTransactionId() {
      if (transactionCase_ == 2) {
        transactionCase_ = 0;
        transaction_ = null;
        onChanged();
      }
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.TransactionOptions, com.google.spanner.v1.TransactionOptions.Builder, com.google.spanner.v1.TransactionOptionsOrBuilder> singleUseTransactionBuilder_;
    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    public com.google.spanner.v1.TransactionOptions getSingleUseTransaction() {
      if (singleUseTransactionBuilder_ == null) {
        if (transactionCase_ == 3) {
          return (com.google.spanner.v1.TransactionOptions) transaction_;
        }
        return com.google.spanner.v1.TransactionOptions.getDefaultInstance();
      } else {
        if (transactionCase_ == 3) {
          return singleUseTransactionBuilder_.getMessage();
        }
        return com.google.spanner.v1.TransactionOptions.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    public Builder setSingleUseTransaction(com.google.spanner.v1.TransactionOptions value) {
      if (singleUseTransactionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transaction_ = value;
        onChanged();
      } else {
        singleUseTransactionBuilder_.setMessage(value);
      }
      transactionCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    public Builder setSingleUseTransaction(
        com.google.spanner.v1.TransactionOptions.Builder builderForValue) {
      if (singleUseTransactionBuilder_ == null) {
        transaction_ = builderForValue.build();
        onChanged();
      } else {
        singleUseTransactionBuilder_.setMessage(builderForValue.build());
      }
      transactionCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    public Builder mergeSingleUseTransaction(com.google.spanner.v1.TransactionOptions value) {
      if (singleUseTransactionBuilder_ == null) {
        if (transactionCase_ == 3 &&
            transaction_ != com.google.spanner.v1.TransactionOptions.getDefaultInstance()) {
          transaction_ = com.google.spanner.v1.TransactionOptions.newBuilder((com.google.spanner.v1.TransactionOptions) transaction_)
              .mergeFrom(value).buildPartial();
        } else {
          transaction_ = value;
        }
        onChanged();
      } else {
        if (transactionCase_ == 3) {
          singleUseTransactionBuilder_.mergeFrom(value);
        }
        singleUseTransactionBuilder_.setMessage(value);
      }
      transactionCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    public Builder clearSingleUseTransaction() {
      if (singleUseTransactionBuilder_ == null) {
        if (transactionCase_ == 3) {
          transactionCase_ = 0;
          transaction_ = null;
          onChanged();
        }
      } else {
        if (transactionCase_ == 3) {
          transactionCase_ = 0;
          transaction_ = null;
        }
        singleUseTransactionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    public com.google.spanner.v1.TransactionOptions.Builder getSingleUseTransactionBuilder() {
      return getSingleUseTransactionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    public com.google.spanner.v1.TransactionOptionsOrBuilder getSingleUseTransactionOrBuilder() {
      if ((transactionCase_ == 3) && (singleUseTransactionBuilder_ != null)) {
        return singleUseTransactionBuilder_.getMessageOrBuilder();
      } else {
        if (transactionCase_ == 3) {
          return (com.google.spanner.v1.TransactionOptions) transaction_;
        }
        return com.google.spanner.v1.TransactionOptions.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>optional .google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.TransactionOptions, com.google.spanner.v1.TransactionOptions.Builder, com.google.spanner.v1.TransactionOptionsOrBuilder> 
        getSingleUseTransactionFieldBuilder() {
      if (singleUseTransactionBuilder_ == null) {
        if (!(transactionCase_ == 3)) {
          transaction_ = com.google.spanner.v1.TransactionOptions.getDefaultInstance();
        }
        singleUseTransactionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.spanner.v1.TransactionOptions, com.google.spanner.v1.TransactionOptions.Builder, com.google.spanner.v1.TransactionOptionsOrBuilder>(
                (com.google.spanner.v1.TransactionOptions) transaction_,
                getParentForChildren(),
                isClean());
        transaction_ = null;
      }
      transactionCase_ = 3;
      onChanged();;
      return singleUseTransactionBuilder_;
    }

    private java.util.List<com.google.spanner.v1.Mutation> mutations_ =
      java.util.Collections.emptyList();
    private void ensureMutationsIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        mutations_ = new java.util.ArrayList<com.google.spanner.v1.Mutation>(mutations_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.spanner.v1.Mutation, com.google.spanner.v1.Mutation.Builder, com.google.spanner.v1.MutationOrBuilder> mutationsBuilder_;

    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public java.util.List<com.google.spanner.v1.Mutation> getMutationsList() {
      if (mutationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(mutations_);
      } else {
        return mutationsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public int getMutationsCount() {
      if (mutationsBuilder_ == null) {
        return mutations_.size();
      } else {
        return mutationsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public com.google.spanner.v1.Mutation getMutations(int index) {
      if (mutationsBuilder_ == null) {
        return mutations_.get(index);
      } else {
        return mutationsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public Builder setMutations(
        int index, com.google.spanner.v1.Mutation value) {
      if (mutationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMutationsIsMutable();
        mutations_.set(index, value);
        onChanged();
      } else {
        mutationsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public Builder setMutations(
        int index, com.google.spanner.v1.Mutation.Builder builderForValue) {
      if (mutationsBuilder_ == null) {
        ensureMutationsIsMutable();
        mutations_.set(index, builderForValue.build());
        onChanged();
      } else {
        mutationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public Builder addMutations(com.google.spanner.v1.Mutation value) {
      if (mutationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMutationsIsMutable();
        mutations_.add(value);
        onChanged();
      } else {
        mutationsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public Builder addMutations(
        int index, com.google.spanner.v1.Mutation value) {
      if (mutationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMutationsIsMutable();
        mutations_.add(index, value);
        onChanged();
      } else {
        mutationsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public Builder addMutations(
        com.google.spanner.v1.Mutation.Builder builderForValue) {
      if (mutationsBuilder_ == null) {
        ensureMutationsIsMutable();
        mutations_.add(builderForValue.build());
        onChanged();
      } else {
        mutationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public Builder addMutations(
        int index, com.google.spanner.v1.Mutation.Builder builderForValue) {
      if (mutationsBuilder_ == null) {
        ensureMutationsIsMutable();
        mutations_.add(index, builderForValue.build());
        onChanged();
      } else {
        mutationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public Builder addAllMutations(
        java.lang.Iterable<? extends com.google.spanner.v1.Mutation> values) {
      if (mutationsBuilder_ == null) {
        ensureMutationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, mutations_);
        onChanged();
      } else {
        mutationsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public Builder clearMutations() {
      if (mutationsBuilder_ == null) {
        mutations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        mutationsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public Builder removeMutations(int index) {
      if (mutationsBuilder_ == null) {
        ensureMutationsIsMutable();
        mutations_.remove(index);
        onChanged();
      } else {
        mutationsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public com.google.spanner.v1.Mutation.Builder getMutationsBuilder(
        int index) {
      return getMutationsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public com.google.spanner.v1.MutationOrBuilder getMutationsOrBuilder(
        int index) {
      if (mutationsBuilder_ == null) {
        return mutations_.get(index);  } else {
        return mutationsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public java.util.List<? extends com.google.spanner.v1.MutationOrBuilder> 
         getMutationsOrBuilderList() {
      if (mutationsBuilder_ != null) {
        return mutationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(mutations_);
      }
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public com.google.spanner.v1.Mutation.Builder addMutationsBuilder() {
      return getMutationsFieldBuilder().addBuilder(
          com.google.spanner.v1.Mutation.getDefaultInstance());
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public com.google.spanner.v1.Mutation.Builder addMutationsBuilder(
        int index) {
      return getMutationsFieldBuilder().addBuilder(
          index, com.google.spanner.v1.Mutation.getDefaultInstance());
    }
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public java.util.List<com.google.spanner.v1.Mutation.Builder> 
         getMutationsBuilderList() {
      return getMutationsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.spanner.v1.Mutation, com.google.spanner.v1.Mutation.Builder, com.google.spanner.v1.MutationOrBuilder> 
        getMutationsFieldBuilder() {
      if (mutationsBuilder_ == null) {
        mutationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.spanner.v1.Mutation, com.google.spanner.v1.Mutation.Builder, com.google.spanner.v1.MutationOrBuilder>(
                mutations_,
                ((bitField0_ & 0x00000008) == 0x00000008),
                getParentForChildren(),
                isClean());
        mutations_ = null;
      }
      return mutationsBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    public final Builder setSessionWithSessionName(com.google.spanner.v1.SessionName value) {
      if (value == null) {
        return setSession("");
      }
      return setSession(value.toString());
    }
    
    public final com.google.spanner.v1.SessionName getSessionAsSessionName() {
      java.lang.String str = getSession();
      if (str.isEmpty()) {
        return null;
      }
      return com.google.spanner.v1.SessionName.parse(str);
    }
    // @@protoc_insertion_point(builder_scope:google.spanner.v1.CommitRequest)
  }

  public final com.google.spanner.v1.SessionName getSessionAsSessionName() {
    java.lang.String str = getSession();
    if (str.isEmpty()) {
      return null;
    }
    return com.google.spanner.v1.SessionName.parse(str);
  }
  // @@protoc_insertion_point(class_scope:google.spanner.v1.CommitRequest)
  private static final com.google.spanner.v1.CommitRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.spanner.v1.CommitRequest();
  }

  public static com.google.spanner.v1.CommitRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CommitRequest>
      PARSER = new com.google.protobuf.AbstractParser<CommitRequest>() {
    public CommitRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CommitRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CommitRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CommitRequest> getParserForType() {
    return PARSER;
  }

  public com.google.spanner.v1.CommitRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

