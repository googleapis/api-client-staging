import groovy.io.FileType

buildscript {
  repositories {
    mavenLocal()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.2"
  }
}

subprojects {

  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'com.github.sherter.google-java-format'

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  // Dependencies
  // ------------

  ext {
    // Shortcuts for libraries we are using
    libraries = [
        gax: 'com.google.api:gax:1.16.0',
        gaxGrpc: 'com.google.api:gax-grpc:1.16.0',

        // Testing
        junit: 'junit:junit:4.11',
        mockito: 'org.mockito:mockito-core:1.10.19',
        truth: 'com.google.truth:truth:0.27',
        lang: 'commons-lang:commons-lang:2.6',
        cli: 'commons-cli:commons-cli:1.3',
        gaxGrpcTestlib: 'com.google.api:gax-grpc:1.16.0:testlib',

        // Formatter
        javaFomatter: 'com.google.googlejavaformat:google-java-format:0.1-alpha'
    ]
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }

  dependencies {
    testCompile libraries.junit,
      libraries.mockito,
      libraries.truth,
      libraries.lang,
      libraries.cli,
      libraries.gaxGrpcTestlib
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      html.enabled true
    }
  }

  check.dependsOn jacocoTestReport

  // Test Logging
  // ------------

  test {
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat = 'full'
    }
  }

  // Formatting tasks
  // ================


  googleJavaFormat {
    toolVersion '1.0'
  }
  tasks.googleJavaFormat {
    exclude '.apt_generated/**'
    exclude 'bin/**'
    exclude 'build/**'
  }
}

apply plugin: 'java'

task allDocs(type: Javadoc) {
  def subProjects = subprojects.findAll {it.name.startsWith("proto-") || it.name.startsWith("grpc-")}

  source subProjects.collect {it.sourceSets.main.allJava}
  classpath = files(subProjects.collect {it.sourceSets.main.compileClasspath})
  destinationDir = file("${buildDir}/javadoc/all/latest/apidocs")

  options.links += ["https://developers.google.com/protocol-buffers/docs/reference/java/"]
}

task checkOutGhPages {
  doLast {
    exec {
      commandLine "git", "clone", "--branch", "gh-pages", "--single-branch", "git@github.com:googleapis/googleapis.git", "tmp_gh-pages"
    }
  }
}

task copyFilesToGhPages {
  dependsOn 'allDocs'
  dependsOn 'checkOutGhPages'

  doLast {
    def newSiteDirPath = "tmp_gh-pages/java/"
    new File(newSiteDirPath).mkdirs()
    copy {
      from "${buildDir}/javadoc"
      into newSiteDirPath
    }
  }
}

task commitDocs {
  dependsOn 'copyFilesToGhPages'

  doLast {
    def gitHashOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "rev-parse", "HEAD"
        standardOutput = gitHashOut
    }
    def gitHash = gitHashOut.toString().trim()

    exec {
      workingDir "tmp_gh-pages"
      commandLine 'git', 'add', '.'
    }

    exec {
      workingDir "tmp_gh-pages"
      commandLine 'git', 'commit', '-m', "regenerate javadocs\n\napi-client-staging: ${gitHash}"
    }
  }
}

task pushDocs {
  dependsOn 'commitDocs'
  doLast {
    exec {
      workingDir "tmp_gh-pages"
      commandLine 'git', 'push'
    }
  }
}
