import groovy.io.FileType

def generated_grpc_version = "0.1.5"

buildscript {
  repositories {
    mavenLocal()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.2"
  }
}

subprojects {

  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'com.github.sherter.google-java-format'

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  // Dependencies
  // ------------

  ext {
    // Shortcuts for libraries we are using
    libraries = [
        gax: 'com.google.api:gax:0.0.25',

        // Testing
        junit: 'junit:junit:4.11',
        mockito: 'org.mockito:mockito-core:1.10.19',
        truth: 'com.google.truth:truth:0.27',
        commons: 'org.apache.commons:commons-lang3:3.4',
        lang: 'commons-lang:commons-lang:2.6',
        cli: 'commons-cli:commons-cli:1.3',

        // Formatter
        javaFomatter: 'com.google.googlejavaformat:google-java-format:0.1-alpha'
    ]
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }

  dependencies {
    compile libraries.gax

    testCompile libraries.junit,
      libraries.mockito,
      libraries.truth,
      libraries.commons,
      libraries.lang,
      libraries.cli
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      html.enabled true
    }
  }

  check.dependsOn jacocoTestReport

  // Source jar
  // ----------

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  // JavaDoc
  // -------

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  javadoc.options {
    encoding = 'UTF-8'
    links 'https://docs.oracle.com/javase/7/docs/api/'
  }

  // Test Logging
  // ------------

  test {
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat = 'full'
    }
  }

  // Formatting tasks
  // ================


  googleJavaFormat {
    toolVersion '1.0'
  }
  tasks.googleJavaFormat {
    exclude '.apt_generated/**'
    exclude 'bin/**'
    exclude 'build/**'
  }
}

project(':generated:java:google-cloud-logging-v2') {
  dependencies {
    compile 'com.google.api.grpc:grpc-google-cloud-logging-v2:' + generated_grpc_version
  }
}

project(':generated:java:google-cloud-pubsub-v1') {
  dependencies {
    compile 'com.google.api.grpc:grpc-google-cloud-pubsub-v1:' + generated_grpc_version
  }
}

project(':generated:java:google-cloud-language-v1') {
  dependencies {
    compile 'com.google.api.grpc:grpc-google-cloud-language-v1:' + generated_grpc_version
  }
}

project(':generated:java:google-cloud-speech-v1beta1') {
  dependencies {
    compile 'com.google.api.grpc:grpc-google-cloud-speech-v1beta1:' + generated_grpc_version
  }
}

project(':generated:java:google-cloud-vision-v1') {
  dependencies {
    compile 'com.google.api.grpc:grpc-google-cloud-vision-v1:' + generated_grpc_version
  }
}

project(':generated:java:google-cloud-error-reporting-v1beta1') {
  dependencies {
    compile 'com.google.api.grpc:grpc-google-cloud-error-reporting-v1beta1:' + generated_grpc_version
  }
}

project(':generated:java:google-cloud-trace-v1') {
  dependencies {
    compile 'com.google.api.grpc:grpc-google-cloud-trace-v1:' + generated_grpc_version
  }
}

project(':generated:java:google-cloud-monitoring-v3') {
  dependencies {
    compile 'com.google.api.grpc:grpc-google-cloud-monitoring-v3:' + generated_grpc_version
  }
}

project(':generated:java:google-longrunning-v1') {
  dependencies {
    compile 'com.google.api.grpc:grpc-google-common-protos:' + generated_grpc_version
  }
}
