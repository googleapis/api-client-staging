// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v2/trace.proto

package com.google.devtools.cloudtrace.v2;

/**
 * <pre>
 * A call stack appearing in a trace.
 * </pre>
 *
 * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace}
 */
public  final class StackTrace extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.cloudtrace.v2.StackTrace)
    StackTraceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StackTrace.newBuilder() to construct.
  private StackTrace(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StackTrace() {
    stackTraceHashId_ = 0L;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private StackTrace(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder subBuilder = null;
            if (stackFrames_ != null) {
              subBuilder = stackFrames_.toBuilder();
            }
            stackFrames_ = input.readMessage(com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(stackFrames_);
              stackFrames_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {

            stackTraceHashId_ = input.readInt64();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.cloudtrace.v2.StackTrace.class, com.google.devtools.cloudtrace.v2.StackTrace.Builder.class);
  }

  public interface StackFrameOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     */
    boolean hasFunctionName();
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableString getFunctionName();
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFunctionNameOrBuilder();

    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     */
    boolean hasOriginalFunctionName();
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableString getOriginalFunctionName();
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getOriginalFunctionNameOrBuilder();

    /**
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     */
    boolean hasFileName();
    /**
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableString getFileName();
    /**
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFileNameOrBuilder();

    /**
     * <pre>
     * The line number in `file_name` where the function call appears.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     */
    long getLineNumber();

    /**
     * <pre>
     * The column number where the function call appears, if available.
     * This is important in JavaScript because of its anonymous functions.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     */
    long getColumnNumber();

    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     */
    boolean hasLoadModule();
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     */
    com.google.devtools.cloudtrace.v2.Module getLoadModule();
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     */
    com.google.devtools.cloudtrace.v2.ModuleOrBuilder getLoadModuleOrBuilder();

    /**
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     */
    boolean hasSourceVersion();
    /**
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableString getSourceVersion();
    /**
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     */
    com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getSourceVersionOrBuilder();
  }
  /**
   * <pre>
   * Represents a single stack frame in a stack trace.
   * </pre>
   *
   * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace.StackFrame}
   */
  public  static final class StackFrame extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
      StackFrameOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StackFrame.newBuilder() to construct.
    private StackFrame(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StackFrame() {
      lineNumber_ = 0L;
      columnNumber_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StackFrame(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder subBuilder = null;
              if (functionName_ != null) {
                subBuilder = functionName_.toBuilder();
              }
              functionName_ = input.readMessage(com.google.devtools.cloudtrace.v2.TruncatableString.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(functionName_);
                functionName_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder subBuilder = null;
              if (originalFunctionName_ != null) {
                subBuilder = originalFunctionName_.toBuilder();
              }
              originalFunctionName_ = input.readMessage(com.google.devtools.cloudtrace.v2.TruncatableString.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(originalFunctionName_);
                originalFunctionName_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder subBuilder = null;
              if (fileName_ != null) {
                subBuilder = fileName_.toBuilder();
              }
              fileName_ = input.readMessage(com.google.devtools.cloudtrace.v2.TruncatableString.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fileName_);
                fileName_ = subBuilder.buildPartial();
              }

              break;
            }
            case 32: {

              lineNumber_ = input.readInt64();
              break;
            }
            case 40: {

              columnNumber_ = input.readInt64();
              break;
            }
            case 50: {
              com.google.devtools.cloudtrace.v2.Module.Builder subBuilder = null;
              if (loadModule_ != null) {
                subBuilder = loadModule_.toBuilder();
              }
              loadModule_ = input.readMessage(com.google.devtools.cloudtrace.v2.Module.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(loadModule_);
                loadModule_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              com.google.devtools.cloudtrace.v2.TruncatableString.Builder subBuilder = null;
              if (sourceVersion_ != null) {
                subBuilder = sourceVersion_.toBuilder();
              }
              sourceVersion_ = input.readMessage(com.google.devtools.cloudtrace.v2.TruncatableString.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sourceVersion_);
                sourceVersion_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.class, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder.class);
    }

    public static final int FUNCTION_NAME_FIELD_NUMBER = 1;
    private com.google.devtools.cloudtrace.v2.TruncatableString functionName_;
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     */
    public boolean hasFunctionName() {
      return functionName_ != null;
    }
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     */
    public com.google.devtools.cloudtrace.v2.TruncatableString getFunctionName() {
      return functionName_ == null ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : functionName_;
    }
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
     */
    public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFunctionNameOrBuilder() {
      return getFunctionName();
    }

    public static final int ORIGINAL_FUNCTION_NAME_FIELD_NUMBER = 2;
    private com.google.devtools.cloudtrace.v2.TruncatableString originalFunctionName_;
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     */
    public boolean hasOriginalFunctionName() {
      return originalFunctionName_ != null;
    }
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     */
    public com.google.devtools.cloudtrace.v2.TruncatableString getOriginalFunctionName() {
      return originalFunctionName_ == null ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : originalFunctionName_;
    }
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully-qualified (up to 1024 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
     */
    public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getOriginalFunctionNameOrBuilder() {
      return getOriginalFunctionName();
    }

    public static final int FILE_NAME_FIELD_NUMBER = 3;
    private com.google.devtools.cloudtrace.v2.TruncatableString fileName_;
    /**
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     */
    public boolean hasFileName() {
      return fileName_ != null;
    }
    /**
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     */
    public com.google.devtools.cloudtrace.v2.TruncatableString getFileName() {
      return fileName_ == null ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : fileName_;
    }
    /**
     * <pre>
     * The name of the source file where the function call appears (up to 256
     * bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
     */
    public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFileNameOrBuilder() {
      return getFileName();
    }

    public static final int LINE_NUMBER_FIELD_NUMBER = 4;
    private long lineNumber_;
    /**
     * <pre>
     * The line number in `file_name` where the function call appears.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     */
    public long getLineNumber() {
      return lineNumber_;
    }

    public static final int COLUMN_NUMBER_FIELD_NUMBER = 5;
    private long columnNumber_;
    /**
     * <pre>
     * The column number where the function call appears, if available.
     * This is important in JavaScript because of its anonymous functions.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     */
    public long getColumnNumber() {
      return columnNumber_;
    }

    public static final int LOAD_MODULE_FIELD_NUMBER = 6;
    private com.google.devtools.cloudtrace.v2.Module loadModule_;
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     */
    public boolean hasLoadModule() {
      return loadModule_ != null;
    }
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     */
    public com.google.devtools.cloudtrace.v2.Module getLoadModule() {
      return loadModule_ == null ? com.google.devtools.cloudtrace.v2.Module.getDefaultInstance() : loadModule_;
    }
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
     */
    public com.google.devtools.cloudtrace.v2.ModuleOrBuilder getLoadModuleOrBuilder() {
      return getLoadModule();
    }

    public static final int SOURCE_VERSION_FIELD_NUMBER = 7;
    private com.google.devtools.cloudtrace.v2.TruncatableString sourceVersion_;
    /**
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     */
    public boolean hasSourceVersion() {
      return sourceVersion_ != null;
    }
    /**
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     */
    public com.google.devtools.cloudtrace.v2.TruncatableString getSourceVersion() {
      return sourceVersion_ == null ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : sourceVersion_;
    }
    /**
     * <pre>
     * The version of the deployed source code (up to 128 bytes).
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
     */
    public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getSourceVersionOrBuilder() {
      return getSourceVersion();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (functionName_ != null) {
        output.writeMessage(1, getFunctionName());
      }
      if (originalFunctionName_ != null) {
        output.writeMessage(2, getOriginalFunctionName());
      }
      if (fileName_ != null) {
        output.writeMessage(3, getFileName());
      }
      if (lineNumber_ != 0L) {
        output.writeInt64(4, lineNumber_);
      }
      if (columnNumber_ != 0L) {
        output.writeInt64(5, columnNumber_);
      }
      if (loadModule_ != null) {
        output.writeMessage(6, getLoadModule());
      }
      if (sourceVersion_ != null) {
        output.writeMessage(7, getSourceVersion());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (functionName_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getFunctionName());
      }
      if (originalFunctionName_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOriginalFunctionName());
      }
      if (fileName_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getFileName());
      }
      if (lineNumber_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, lineNumber_);
      }
      if (columnNumber_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, columnNumber_);
      }
      if (loadModule_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getLoadModule());
      }
      if (sourceVersion_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getSourceVersion());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.cloudtrace.v2.StackTrace.StackFrame)) {
        return super.equals(obj);
      }
      com.google.devtools.cloudtrace.v2.StackTrace.StackFrame other = (com.google.devtools.cloudtrace.v2.StackTrace.StackFrame) obj;

      boolean result = true;
      result = result && (hasFunctionName() == other.hasFunctionName());
      if (hasFunctionName()) {
        result = result && getFunctionName()
            .equals(other.getFunctionName());
      }
      result = result && (hasOriginalFunctionName() == other.hasOriginalFunctionName());
      if (hasOriginalFunctionName()) {
        result = result && getOriginalFunctionName()
            .equals(other.getOriginalFunctionName());
      }
      result = result && (hasFileName() == other.hasFileName());
      if (hasFileName()) {
        result = result && getFileName()
            .equals(other.getFileName());
      }
      result = result && (getLineNumber()
          == other.getLineNumber());
      result = result && (getColumnNumber()
          == other.getColumnNumber());
      result = result && (hasLoadModule() == other.hasLoadModule());
      if (hasLoadModule()) {
        result = result && getLoadModule()
            .equals(other.getLoadModule());
      }
      result = result && (hasSourceVersion() == other.hasSourceVersion());
      if (hasSourceVersion()) {
        result = result && getSourceVersion()
            .equals(other.getSourceVersion());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFunctionName()) {
        hash = (37 * hash) + FUNCTION_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getFunctionName().hashCode();
      }
      if (hasOriginalFunctionName()) {
        hash = (37 * hash) + ORIGINAL_FUNCTION_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getOriginalFunctionName().hashCode();
      }
      if (hasFileName()) {
        hash = (37 * hash) + FILE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getFileName().hashCode();
      }
      hash = (37 * hash) + LINE_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLineNumber());
      hash = (37 * hash) + COLUMN_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getColumnNumber());
      if (hasLoadModule()) {
        hash = (37 * hash) + LOAD_MODULE_FIELD_NUMBER;
        hash = (53 * hash) + getLoadModule().hashCode();
      }
      if (hasSourceVersion()) {
        hash = (37 * hash) + SOURCE_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getSourceVersion().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.cloudtrace.v2.StackTrace.StackFrame prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Represents a single stack frame in a stack trace.
     * </pre>
     *
     * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace.StackFrame}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.class, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder.class);
      }

      // Construct using com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (functionNameBuilder_ == null) {
          functionName_ = null;
        } else {
          functionName_ = null;
          functionNameBuilder_ = null;
        }
        if (originalFunctionNameBuilder_ == null) {
          originalFunctionName_ = null;
        } else {
          originalFunctionName_ = null;
          originalFunctionNameBuilder_ = null;
        }
        if (fileNameBuilder_ == null) {
          fileName_ = null;
        } else {
          fileName_ = null;
          fileNameBuilder_ = null;
        }
        lineNumber_ = 0L;

        columnNumber_ = 0L;

        if (loadModuleBuilder_ == null) {
          loadModule_ = null;
        } else {
          loadModule_ = null;
          loadModuleBuilder_ = null;
        }
        if (sourceVersionBuilder_ == null) {
          sourceVersion_ = null;
        } else {
          sourceVersion_ = null;
          sourceVersionBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrame_descriptor;
      }

      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getDefaultInstanceForType() {
        return com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.getDefaultInstance();
      }

      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame build() {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrame result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame buildPartial() {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrame result = new com.google.devtools.cloudtrace.v2.StackTrace.StackFrame(this);
        if (functionNameBuilder_ == null) {
          result.functionName_ = functionName_;
        } else {
          result.functionName_ = functionNameBuilder_.build();
        }
        if (originalFunctionNameBuilder_ == null) {
          result.originalFunctionName_ = originalFunctionName_;
        } else {
          result.originalFunctionName_ = originalFunctionNameBuilder_.build();
        }
        if (fileNameBuilder_ == null) {
          result.fileName_ = fileName_;
        } else {
          result.fileName_ = fileNameBuilder_.build();
        }
        result.lineNumber_ = lineNumber_;
        result.columnNumber_ = columnNumber_;
        if (loadModuleBuilder_ == null) {
          result.loadModule_ = loadModule_;
        } else {
          result.loadModule_ = loadModuleBuilder_.build();
        }
        if (sourceVersionBuilder_ == null) {
          result.sourceVersion_ = sourceVersion_;
        } else {
          result.sourceVersion_ = sourceVersionBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.cloudtrace.v2.StackTrace.StackFrame) {
          return mergeFrom((com.google.devtools.cloudtrace.v2.StackTrace.StackFrame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.cloudtrace.v2.StackTrace.StackFrame other) {
        if (other == com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.getDefaultInstance()) return this;
        if (other.hasFunctionName()) {
          mergeFunctionName(other.getFunctionName());
        }
        if (other.hasOriginalFunctionName()) {
          mergeOriginalFunctionName(other.getOriginalFunctionName());
        }
        if (other.hasFileName()) {
          mergeFileName(other.getFileName());
        }
        if (other.getLineNumber() != 0L) {
          setLineNumber(other.getLineNumber());
        }
        if (other.getColumnNumber() != 0L) {
          setColumnNumber(other.getColumnNumber());
        }
        if (other.hasLoadModule()) {
          mergeLoadModule(other.getLoadModule());
        }
        if (other.hasSourceVersion()) {
          mergeSourceVersion(other.getSourceVersion());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrame parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.cloudtrace.v2.StackTrace.StackFrame) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.devtools.cloudtrace.v2.TruncatableString functionName_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder> functionNameBuilder_;
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public boolean hasFunctionName() {
        return functionNameBuilder_ != null || functionName_ != null;
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString getFunctionName() {
        if (functionNameBuilder_ == null) {
          return functionName_ == null ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : functionName_;
        } else {
          return functionNameBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public Builder setFunctionName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (functionNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          functionName_ = value;
          onChanged();
        } else {
          functionNameBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public Builder setFunctionName(
          com.google.devtools.cloudtrace.v2.TruncatableString.Builder builderForValue) {
        if (functionNameBuilder_ == null) {
          functionName_ = builderForValue.build();
          onChanged();
        } else {
          functionNameBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public Builder mergeFunctionName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (functionNameBuilder_ == null) {
          if (functionName_ != null) {
            functionName_ =
              com.google.devtools.cloudtrace.v2.TruncatableString.newBuilder(functionName_).mergeFrom(value).buildPartial();
          } else {
            functionName_ = value;
          }
          onChanged();
        } else {
          functionNameBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public Builder clearFunctionName() {
        if (functionNameBuilder_ == null) {
          functionName_ = null;
          onChanged();
        } else {
          functionName_ = null;
          functionNameBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString.Builder getFunctionNameBuilder() {
        
        onChanged();
        return getFunctionNameFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFunctionNameOrBuilder() {
        if (functionNameBuilder_ != null) {
          return functionNameBuilder_.getMessageOrBuilder();
        } else {
          return functionName_ == null ?
              com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : functionName_;
        }
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString function_name = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder> 
          getFunctionNameFieldBuilder() {
        if (functionNameBuilder_ == null) {
          functionNameBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>(
                  getFunctionName(),
                  getParentForChildren(),
                  isClean());
          functionName_ = null;
        }
        return functionNameBuilder_;
      }

      private com.google.devtools.cloudtrace.v2.TruncatableString originalFunctionName_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder> originalFunctionNameBuilder_;
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public boolean hasOriginalFunctionName() {
        return originalFunctionNameBuilder_ != null || originalFunctionName_ != null;
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString getOriginalFunctionName() {
        if (originalFunctionNameBuilder_ == null) {
          return originalFunctionName_ == null ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : originalFunctionName_;
        } else {
          return originalFunctionNameBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public Builder setOriginalFunctionName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (originalFunctionNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          originalFunctionName_ = value;
          onChanged();
        } else {
          originalFunctionNameBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public Builder setOriginalFunctionName(
          com.google.devtools.cloudtrace.v2.TruncatableString.Builder builderForValue) {
        if (originalFunctionNameBuilder_ == null) {
          originalFunctionName_ = builderForValue.build();
          onChanged();
        } else {
          originalFunctionNameBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public Builder mergeOriginalFunctionName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (originalFunctionNameBuilder_ == null) {
          if (originalFunctionName_ != null) {
            originalFunctionName_ =
              com.google.devtools.cloudtrace.v2.TruncatableString.newBuilder(originalFunctionName_).mergeFrom(value).buildPartial();
          } else {
            originalFunctionName_ = value;
          }
          onChanged();
        } else {
          originalFunctionNameBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public Builder clearOriginalFunctionName() {
        if (originalFunctionNameBuilder_ == null) {
          originalFunctionName_ = null;
          onChanged();
        } else {
          originalFunctionName_ = null;
          originalFunctionNameBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString.Builder getOriginalFunctionNameBuilder() {
        
        onChanged();
        return getOriginalFunctionNameFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getOriginalFunctionNameOrBuilder() {
        if (originalFunctionNameBuilder_ != null) {
          return originalFunctionNameBuilder_.getMessageOrBuilder();
        } else {
          return originalFunctionName_ == null ?
              com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : originalFunctionName_;
        }
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully-qualified (up to 1024 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder> 
          getOriginalFunctionNameFieldBuilder() {
        if (originalFunctionNameBuilder_ == null) {
          originalFunctionNameBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>(
                  getOriginalFunctionName(),
                  getParentForChildren(),
                  isClean());
          originalFunctionName_ = null;
        }
        return originalFunctionNameBuilder_;
      }

      private com.google.devtools.cloudtrace.v2.TruncatableString fileName_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder> fileNameBuilder_;
      /**
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public boolean hasFileName() {
        return fileNameBuilder_ != null || fileName_ != null;
      }
      /**
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString getFileName() {
        if (fileNameBuilder_ == null) {
          return fileName_ == null ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : fileName_;
        } else {
          return fileNameBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public Builder setFileName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (fileNameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fileName_ = value;
          onChanged();
        } else {
          fileNameBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public Builder setFileName(
          com.google.devtools.cloudtrace.v2.TruncatableString.Builder builderForValue) {
        if (fileNameBuilder_ == null) {
          fileName_ = builderForValue.build();
          onChanged();
        } else {
          fileNameBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public Builder mergeFileName(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (fileNameBuilder_ == null) {
          if (fileName_ != null) {
            fileName_ =
              com.google.devtools.cloudtrace.v2.TruncatableString.newBuilder(fileName_).mergeFrom(value).buildPartial();
          } else {
            fileName_ = value;
          }
          onChanged();
        } else {
          fileNameBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public Builder clearFileName() {
        if (fileNameBuilder_ == null) {
          fileName_ = null;
          onChanged();
        } else {
          fileName_ = null;
          fileNameBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString.Builder getFileNameBuilder() {
        
        onChanged();
        return getFileNameFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getFileNameOrBuilder() {
        if (fileNameBuilder_ != null) {
          return fileNameBuilder_.getMessageOrBuilder();
        } else {
          return fileName_ == null ?
              com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : fileName_;
        }
      }
      /**
       * <pre>
       * The name of the source file where the function call appears (up to 256
       * bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString file_name = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder> 
          getFileNameFieldBuilder() {
        if (fileNameBuilder_ == null) {
          fileNameBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>(
                  getFileName(),
                  getParentForChildren(),
                  isClean());
          fileName_ = null;
        }
        return fileNameBuilder_;
      }

      private long lineNumber_ ;
      /**
       * <pre>
       * The line number in `file_name` where the function call appears.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       */
      public long getLineNumber() {
        return lineNumber_;
      }
      /**
       * <pre>
       * The line number in `file_name` where the function call appears.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       */
      public Builder setLineNumber(long value) {
        
        lineNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The line number in `file_name` where the function call appears.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       */
      public Builder clearLineNumber() {
        
        lineNumber_ = 0L;
        onChanged();
        return this;
      }

      private long columnNumber_ ;
      /**
       * <pre>
       * The column number where the function call appears, if available.
       * This is important in JavaScript because of its anonymous functions.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       */
      public long getColumnNumber() {
        return columnNumber_;
      }
      /**
       * <pre>
       * The column number where the function call appears, if available.
       * This is important in JavaScript because of its anonymous functions.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       */
      public Builder setColumnNumber(long value) {
        
        columnNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The column number where the function call appears, if available.
       * This is important in JavaScript because of its anonymous functions.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       */
      public Builder clearColumnNumber() {
        
        columnNumber_ = 0L;
        onChanged();
        return this;
      }

      private com.google.devtools.cloudtrace.v2.Module loadModule_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.Module, com.google.devtools.cloudtrace.v2.Module.Builder, com.google.devtools.cloudtrace.v2.ModuleOrBuilder> loadModuleBuilder_;
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public boolean hasLoadModule() {
        return loadModuleBuilder_ != null || loadModule_ != null;
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public com.google.devtools.cloudtrace.v2.Module getLoadModule() {
        if (loadModuleBuilder_ == null) {
          return loadModule_ == null ? com.google.devtools.cloudtrace.v2.Module.getDefaultInstance() : loadModule_;
        } else {
          return loadModuleBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public Builder setLoadModule(com.google.devtools.cloudtrace.v2.Module value) {
        if (loadModuleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          loadModule_ = value;
          onChanged();
        } else {
          loadModuleBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public Builder setLoadModule(
          com.google.devtools.cloudtrace.v2.Module.Builder builderForValue) {
        if (loadModuleBuilder_ == null) {
          loadModule_ = builderForValue.build();
          onChanged();
        } else {
          loadModuleBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public Builder mergeLoadModule(com.google.devtools.cloudtrace.v2.Module value) {
        if (loadModuleBuilder_ == null) {
          if (loadModule_ != null) {
            loadModule_ =
              com.google.devtools.cloudtrace.v2.Module.newBuilder(loadModule_).mergeFrom(value).buildPartial();
          } else {
            loadModule_ = value;
          }
          onChanged();
        } else {
          loadModuleBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public Builder clearLoadModule() {
        if (loadModuleBuilder_ == null) {
          loadModule_ = null;
          onChanged();
        } else {
          loadModule_ = null;
          loadModuleBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public com.google.devtools.cloudtrace.v2.Module.Builder getLoadModuleBuilder() {
        
        onChanged();
        return getLoadModuleFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      public com.google.devtools.cloudtrace.v2.ModuleOrBuilder getLoadModuleOrBuilder() {
        if (loadModuleBuilder_ != null) {
          return loadModuleBuilder_.getMessageOrBuilder();
        } else {
          return loadModule_ == null ?
              com.google.devtools.cloudtrace.v2.Module.getDefaultInstance() : loadModule_;
        }
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.Module load_module = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.Module, com.google.devtools.cloudtrace.v2.Module.Builder, com.google.devtools.cloudtrace.v2.ModuleOrBuilder> 
          getLoadModuleFieldBuilder() {
        if (loadModuleBuilder_ == null) {
          loadModuleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.Module, com.google.devtools.cloudtrace.v2.Module.Builder, com.google.devtools.cloudtrace.v2.ModuleOrBuilder>(
                  getLoadModule(),
                  getParentForChildren(),
                  isClean());
          loadModule_ = null;
        }
        return loadModuleBuilder_;
      }

      private com.google.devtools.cloudtrace.v2.TruncatableString sourceVersion_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder> sourceVersionBuilder_;
      /**
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public boolean hasSourceVersion() {
        return sourceVersionBuilder_ != null || sourceVersion_ != null;
      }
      /**
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString getSourceVersion() {
        if (sourceVersionBuilder_ == null) {
          return sourceVersion_ == null ? com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : sourceVersion_;
        } else {
          return sourceVersionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public Builder setSourceVersion(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (sourceVersionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sourceVersion_ = value;
          onChanged();
        } else {
          sourceVersionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public Builder setSourceVersion(
          com.google.devtools.cloudtrace.v2.TruncatableString.Builder builderForValue) {
        if (sourceVersionBuilder_ == null) {
          sourceVersion_ = builderForValue.build();
          onChanged();
        } else {
          sourceVersionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public Builder mergeSourceVersion(com.google.devtools.cloudtrace.v2.TruncatableString value) {
        if (sourceVersionBuilder_ == null) {
          if (sourceVersion_ != null) {
            sourceVersion_ =
              com.google.devtools.cloudtrace.v2.TruncatableString.newBuilder(sourceVersion_).mergeFrom(value).buildPartial();
          } else {
            sourceVersion_ = value;
          }
          onChanged();
        } else {
          sourceVersionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public Builder clearSourceVersion() {
        if (sourceVersionBuilder_ == null) {
          sourceVersion_ = null;
          onChanged();
        } else {
          sourceVersion_ = null;
          sourceVersionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableString.Builder getSourceVersionBuilder() {
        
        onChanged();
        return getSourceVersionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      public com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder getSourceVersionOrBuilder() {
        if (sourceVersionBuilder_ != null) {
          return sourceVersionBuilder_.getMessageOrBuilder();
        } else {
          return sourceVersion_ == null ?
              com.google.devtools.cloudtrace.v2.TruncatableString.getDefaultInstance() : sourceVersion_;
        }
      }
      /**
       * <pre>
       * The version of the deployed source code (up to 128 bytes).
       * </pre>
       *
       * <code>.google.devtools.cloudtrace.v2.TruncatableString source_version = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder> 
          getSourceVersionFieldBuilder() {
        if (sourceVersionBuilder_ == null) {
          sourceVersionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.TruncatableString, com.google.devtools.cloudtrace.v2.TruncatableString.Builder, com.google.devtools.cloudtrace.v2.TruncatableStringOrBuilder>(
                  getSourceVersion(),
                  getParentForChildren(),
                  isClean());
          sourceVersion_ = null;
        }
        return sourceVersionBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
    }

    // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
    private static final com.google.devtools.cloudtrace.v2.StackTrace.StackFrame DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.cloudtrace.v2.StackTrace.StackFrame();
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StackFrame>
        PARSER = new com.google.protobuf.AbstractParser<StackFrame>() {
      public StackFrame parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StackFrame(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StackFrame> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StackFrame> getParserForType() {
      return PARSER;
    }

    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StackFramesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> 
        getFrameList();
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getFrame(int index);
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    int getFrameCount();
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    java.util.List<? extends com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder> 
        getFrameOrBuilderList();
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder getFrameOrBuilder(
        int index);

    /**
     * <pre>
     * The number of stack frames that were dropped because there
     * were too many stack frames.
     * If this value is 0, then no stack frames were dropped.
     * </pre>
     *
     * <code>int32 dropped_frames_count = 2;</code>
     */
    int getDroppedFramesCount();
  }
  /**
   * <pre>
   * A collection of stack frames, which can be truncated.
   * </pre>
   *
   * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace.StackFrames}
   */
  public  static final class StackFrames extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
      StackFramesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StackFrames.newBuilder() to construct.
    private StackFrames(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StackFrames() {
      frame_ = java.util.Collections.emptyList();
      droppedFramesCount_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StackFrames(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                frame_ = new java.util.ArrayList<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame>();
                mutable_bitField0_ |= 0x00000001;
              }
              frame_.add(
                  input.readMessage(com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.parser(), extensionRegistry));
              break;
            }
            case 16: {

              droppedFramesCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          frame_ = java.util.Collections.unmodifiableList(frame_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.class, com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder.class);
    }

    private int bitField0_;
    public static final int FRAME_FIELD_NUMBER = 1;
    private java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> frame_;
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    public java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> getFrameList() {
      return frame_;
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    public java.util.List<? extends com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder> 
        getFrameOrBuilderList() {
      return frame_;
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    public int getFrameCount() {
      return frame_.size();
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getFrame(int index) {
      return frame_.get(index);
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
     */
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder getFrameOrBuilder(
        int index) {
      return frame_.get(index);
    }

    public static final int DROPPED_FRAMES_COUNT_FIELD_NUMBER = 2;
    private int droppedFramesCount_;
    /**
     * <pre>
     * The number of stack frames that were dropped because there
     * were too many stack frames.
     * If this value is 0, then no stack frames were dropped.
     * </pre>
     *
     * <code>int32 dropped_frames_count = 2;</code>
     */
    public int getDroppedFramesCount() {
      return droppedFramesCount_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < frame_.size(); i++) {
        output.writeMessage(1, frame_.get(i));
      }
      if (droppedFramesCount_ != 0) {
        output.writeInt32(2, droppedFramesCount_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < frame_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, frame_.get(i));
      }
      if (droppedFramesCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, droppedFramesCount_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.cloudtrace.v2.StackTrace.StackFrames)) {
        return super.equals(obj);
      }
      com.google.devtools.cloudtrace.v2.StackTrace.StackFrames other = (com.google.devtools.cloudtrace.v2.StackTrace.StackFrames) obj;

      boolean result = true;
      result = result && getFrameList()
          .equals(other.getFrameList());
      result = result && (getDroppedFramesCount()
          == other.getDroppedFramesCount());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFrameCount() > 0) {
        hash = (37 * hash) + FRAME_FIELD_NUMBER;
        hash = (53 * hash) + getFrameList().hashCode();
      }
      hash = (37 * hash) + DROPPED_FRAMES_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getDroppedFramesCount();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.cloudtrace.v2.StackTrace.StackFrames prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A collection of stack frames, which can be truncated.
     * </pre>
     *
     * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace.StackFrames}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
        com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.class, com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder.class);
      }

      // Construct using com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFrameFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (frameBuilder_ == null) {
          frame_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          frameBuilder_.clear();
        }
        droppedFramesCount_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_StackFrames_descriptor;
      }

      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getDefaultInstanceForType() {
        return com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance();
      }

      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames build() {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames buildPartial() {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames result = new com.google.devtools.cloudtrace.v2.StackTrace.StackFrames(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (frameBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            frame_ = java.util.Collections.unmodifiableList(frame_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.frame_ = frame_;
        } else {
          result.frame_ = frameBuilder_.build();
        }
        result.droppedFramesCount_ = droppedFramesCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.cloudtrace.v2.StackTrace.StackFrames) {
          return mergeFrom((com.google.devtools.cloudtrace.v2.StackTrace.StackFrames)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.cloudtrace.v2.StackTrace.StackFrames other) {
        if (other == com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance()) return this;
        if (frameBuilder_ == null) {
          if (!other.frame_.isEmpty()) {
            if (frame_.isEmpty()) {
              frame_ = other.frame_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFrameIsMutable();
              frame_.addAll(other.frame_);
            }
            onChanged();
          }
        } else {
          if (!other.frame_.isEmpty()) {
            if (frameBuilder_.isEmpty()) {
              frameBuilder_.dispose();
              frameBuilder_ = null;
              frame_ = other.frame_;
              bitField0_ = (bitField0_ & ~0x00000001);
              frameBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFrameFieldBuilder() : null;
            } else {
              frameBuilder_.addAllMessages(other.frame_);
            }
          }
        }
        if (other.getDroppedFramesCount() != 0) {
          setDroppedFramesCount(other.getDroppedFramesCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.cloudtrace.v2.StackTrace.StackFrames) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> frame_ =
        java.util.Collections.emptyList();
      private void ensureFrameIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          frame_ = new java.util.ArrayList<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame>(frame_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.StackTrace.StackFrame, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder, com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder> frameBuilder_;

      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> getFrameList() {
        if (frameBuilder_ == null) {
          return java.util.Collections.unmodifiableList(frame_);
        } else {
          return frameBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public int getFrameCount() {
        if (frameBuilder_ == null) {
          return frame_.size();
        } else {
          return frameBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame getFrame(int index) {
        if (frameBuilder_ == null) {
          return frame_.get(index);
        } else {
          return frameBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder setFrame(
          int index, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame value) {
        if (frameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFrameIsMutable();
          frame_.set(index, value);
          onChanged();
        } else {
          frameBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder setFrame(
          int index, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder builderForValue) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          frame_.set(index, builderForValue.build());
          onChanged();
        } else {
          frameBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(com.google.devtools.cloudtrace.v2.StackTrace.StackFrame value) {
        if (frameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFrameIsMutable();
          frame_.add(value);
          onChanged();
        } else {
          frameBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(
          int index, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame value) {
        if (frameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFrameIsMutable();
          frame_.add(index, value);
          onChanged();
        } else {
          frameBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(
          com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder builderForValue) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          frame_.add(builderForValue.build());
          onChanged();
        } else {
          frameBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(
          int index, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder builderForValue) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          frame_.add(index, builderForValue.build());
          onChanged();
        } else {
          frameBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addAllFrame(
          java.lang.Iterable<? extends com.google.devtools.cloudtrace.v2.StackTrace.StackFrame> values) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, frame_);
          onChanged();
        } else {
          frameBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder clearFrame() {
        if (frameBuilder_ == null) {
          frame_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          frameBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder removeFrame(int index) {
        if (frameBuilder_ == null) {
          ensureFrameIsMutable();
          frame_.remove(index);
          onChanged();
        } else {
          frameBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder getFrameBuilder(
          int index) {
        return getFrameFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder getFrameOrBuilder(
          int index) {
        if (frameBuilder_ == null) {
          return frame_.get(index);  } else {
          return frameBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public java.util.List<? extends com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder> 
           getFrameOrBuilderList() {
        if (frameBuilder_ != null) {
          return frameBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(frame_);
        }
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder addFrameBuilder() {
        return getFrameFieldBuilder().addBuilder(
            com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.getDefaultInstance());
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder addFrameBuilder(
          int index) {
        return getFrameFieldBuilder().addBuilder(
            index, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.getDefaultInstance());
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;</code>
       */
      public java.util.List<com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder> 
           getFrameBuilderList() {
        return getFrameFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.devtools.cloudtrace.v2.StackTrace.StackFrame, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder, com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder> 
          getFrameFieldBuilder() {
        if (frameBuilder_ == null) {
          frameBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.devtools.cloudtrace.v2.StackTrace.StackFrame, com.google.devtools.cloudtrace.v2.StackTrace.StackFrame.Builder, com.google.devtools.cloudtrace.v2.StackTrace.StackFrameOrBuilder>(
                  frame_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          frame_ = null;
        }
        return frameBuilder_;
      }

      private int droppedFramesCount_ ;
      /**
       * <pre>
       * The number of stack frames that were dropped because there
       * were too many stack frames.
       * If this value is 0, then no stack frames were dropped.
       * </pre>
       *
       * <code>int32 dropped_frames_count = 2;</code>
       */
      public int getDroppedFramesCount() {
        return droppedFramesCount_;
      }
      /**
       * <pre>
       * The number of stack frames that were dropped because there
       * were too many stack frames.
       * If this value is 0, then no stack frames were dropped.
       * </pre>
       *
       * <code>int32 dropped_frames_count = 2;</code>
       */
      public Builder setDroppedFramesCount(int value) {
        
        droppedFramesCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of stack frames that were dropped because there
       * were too many stack frames.
       * If this value is 0, then no stack frames were dropped.
       * </pre>
       *
       * <code>int32 dropped_frames_count = 2;</code>
       */
      public Builder clearDroppedFramesCount() {
        
        droppedFramesCount_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
    }

    // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
    private static final com.google.devtools.cloudtrace.v2.StackTrace.StackFrames DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.cloudtrace.v2.StackTrace.StackFrames();
    }

    public static com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StackFrames>
        PARSER = new com.google.protobuf.AbstractParser<StackFrames>() {
      public StackFrames parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StackFrames(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StackFrames> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StackFrames> getParserForType() {
      return PARSER;
    }

    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int STACK_FRAMES_FIELD_NUMBER = 1;
  private com.google.devtools.cloudtrace.v2.StackTrace.StackFrames stackFrames_;
  /**
   * <pre>
   * Stack frames in this stack trace. A maximum of 128 frames are allowed.
   * </pre>
   *
   * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
   */
  public boolean hasStackFrames() {
    return stackFrames_ != null;
  }
  /**
   * <pre>
   * Stack frames in this stack trace. A maximum of 128 frames are allowed.
   * </pre>
   *
   * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
   */
  public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getStackFrames() {
    return stackFrames_ == null ? com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance() : stackFrames_;
  }
  /**
   * <pre>
   * Stack frames in this stack trace. A maximum of 128 frames are allowed.
   * </pre>
   *
   * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
   */
  public com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder getStackFramesOrBuilder() {
    return getStackFrames();
  }

  public static final int STACK_TRACE_HASH_ID_FIELD_NUMBER = 2;
  private long stackTraceHashId_;
  /**
   * <pre>
   * The hash ID is used to conserve network bandwidth for duplicate
   * stack traces within a single trace.
   * Often multiple spans will have identical stack traces.
   * The first occurrence of a stack trace should contain both the
   * `stackFrame` content and a value in `stackTraceHashId`.
   * Subsequent spans within the same request can refer
   * to that stack trace by only setting `stackTraceHashId`.
   * </pre>
   *
   * <code>int64 stack_trace_hash_id = 2;</code>
   */
  public long getStackTraceHashId() {
    return stackTraceHashId_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (stackFrames_ != null) {
      output.writeMessage(1, getStackFrames());
    }
    if (stackTraceHashId_ != 0L) {
      output.writeInt64(2, stackTraceHashId_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (stackFrames_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getStackFrames());
    }
    if (stackTraceHashId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, stackTraceHashId_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.cloudtrace.v2.StackTrace)) {
      return super.equals(obj);
    }
    com.google.devtools.cloudtrace.v2.StackTrace other = (com.google.devtools.cloudtrace.v2.StackTrace) obj;

    boolean result = true;
    result = result && (hasStackFrames() == other.hasStackFrames());
    if (hasStackFrames()) {
      result = result && getStackFrames()
          .equals(other.getStackFrames());
    }
    result = result && (getStackTraceHashId()
        == other.getStackTraceHashId());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasStackFrames()) {
      hash = (37 * hash) + STACK_FRAMES_FIELD_NUMBER;
      hash = (53 * hash) + getStackFrames().hashCode();
    }
    hash = (37 * hash) + STACK_TRACE_HASH_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getStackTraceHashId());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.cloudtrace.v2.StackTrace parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.cloudtrace.v2.StackTrace prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A call stack appearing in a trace.
   * </pre>
   *
   * Protobuf type {@code google.devtools.cloudtrace.v2.StackTrace}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.cloudtrace.v2.StackTrace)
      com.google.devtools.cloudtrace.v2.StackTraceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.cloudtrace.v2.StackTrace.class, com.google.devtools.cloudtrace.v2.StackTrace.Builder.class);
    }

    // Construct using com.google.devtools.cloudtrace.v2.StackTrace.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (stackFramesBuilder_ == null) {
        stackFrames_ = null;
      } else {
        stackFrames_ = null;
        stackFramesBuilder_ = null;
      }
      stackTraceHashId_ = 0L;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.cloudtrace.v2.TraceProto.internal_static_google_devtools_cloudtrace_v2_StackTrace_descriptor;
    }

    public com.google.devtools.cloudtrace.v2.StackTrace getDefaultInstanceForType() {
      return com.google.devtools.cloudtrace.v2.StackTrace.getDefaultInstance();
    }

    public com.google.devtools.cloudtrace.v2.StackTrace build() {
      com.google.devtools.cloudtrace.v2.StackTrace result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.devtools.cloudtrace.v2.StackTrace buildPartial() {
      com.google.devtools.cloudtrace.v2.StackTrace result = new com.google.devtools.cloudtrace.v2.StackTrace(this);
      if (stackFramesBuilder_ == null) {
        result.stackFrames_ = stackFrames_;
      } else {
        result.stackFrames_ = stackFramesBuilder_.build();
      }
      result.stackTraceHashId_ = stackTraceHashId_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.cloudtrace.v2.StackTrace) {
        return mergeFrom((com.google.devtools.cloudtrace.v2.StackTrace)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.cloudtrace.v2.StackTrace other) {
      if (other == com.google.devtools.cloudtrace.v2.StackTrace.getDefaultInstance()) return this;
      if (other.hasStackFrames()) {
        mergeStackFrames(other.getStackFrames());
      }
      if (other.getStackTraceHashId() != 0L) {
        setStackTraceHashId(other.getStackTraceHashId());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.devtools.cloudtrace.v2.StackTrace parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.devtools.cloudtrace.v2.StackTrace) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.devtools.cloudtrace.v2.StackTrace.StackFrames stackFrames_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames, com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder, com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder> stackFramesBuilder_;
    /**
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public boolean hasStackFrames() {
      return stackFramesBuilder_ != null || stackFrames_ != null;
    }
    /**
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames getStackFrames() {
      if (stackFramesBuilder_ == null) {
        return stackFrames_ == null ? com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance() : stackFrames_;
      } else {
        return stackFramesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder setStackFrames(com.google.devtools.cloudtrace.v2.StackTrace.StackFrames value) {
      if (stackFramesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        stackFrames_ = value;
        onChanged();
      } else {
        stackFramesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder setStackFrames(
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder builderForValue) {
      if (stackFramesBuilder_ == null) {
        stackFrames_ = builderForValue.build();
        onChanged();
      } else {
        stackFramesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder mergeStackFrames(com.google.devtools.cloudtrace.v2.StackTrace.StackFrames value) {
      if (stackFramesBuilder_ == null) {
        if (stackFrames_ != null) {
          stackFrames_ =
            com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.newBuilder(stackFrames_).mergeFrom(value).buildPartial();
        } else {
          stackFrames_ = value;
        }
        onChanged();
      } else {
        stackFramesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder clearStackFrames() {
      if (stackFramesBuilder_ == null) {
        stackFrames_ = null;
        onChanged();
      } else {
        stackFrames_ = null;
        stackFramesBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder getStackFramesBuilder() {
      
      onChanged();
      return getStackFramesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder getStackFramesOrBuilder() {
      if (stackFramesBuilder_ != null) {
        return stackFramesBuilder_.getMessageOrBuilder();
      } else {
        return stackFrames_ == null ?
            com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.getDefaultInstance() : stackFrames_;
      }
    }
    /**
     * <pre>
     * Stack frames in this stack trace. A maximum of 128 frames are allowed.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.cloudtrace.v2.StackTrace.StackFrames, com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder, com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder> 
        getStackFramesFieldBuilder() {
      if (stackFramesBuilder_ == null) {
        stackFramesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.cloudtrace.v2.StackTrace.StackFrames, com.google.devtools.cloudtrace.v2.StackTrace.StackFrames.Builder, com.google.devtools.cloudtrace.v2.StackTrace.StackFramesOrBuilder>(
                getStackFrames(),
                getParentForChildren(),
                isClean());
        stackFrames_ = null;
      }
      return stackFramesBuilder_;
    }

    private long stackTraceHashId_ ;
    /**
     * <pre>
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both the
     * `stackFrame` content and a value in `stackTraceHashId`.
     * Subsequent spans within the same request can refer
     * to that stack trace by only setting `stackTraceHashId`.
     * </pre>
     *
     * <code>int64 stack_trace_hash_id = 2;</code>
     */
    public long getStackTraceHashId() {
      return stackTraceHashId_;
    }
    /**
     * <pre>
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both the
     * `stackFrame` content and a value in `stackTraceHashId`.
     * Subsequent spans within the same request can refer
     * to that stack trace by only setting `stackTraceHashId`.
     * </pre>
     *
     * <code>int64 stack_trace_hash_id = 2;</code>
     */
    public Builder setStackTraceHashId(long value) {
      
      stackTraceHashId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both the
     * `stackFrame` content and a value in `stackTraceHashId`.
     * Subsequent spans within the same request can refer
     * to that stack trace by only setting `stackTraceHashId`.
     * </pre>
     *
     * <code>int64 stack_trace_hash_id = 2;</code>
     */
    public Builder clearStackTraceHashId() {
      
      stackTraceHashId_ = 0L;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.cloudtrace.v2.StackTrace)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.StackTrace)
  private static final com.google.devtools.cloudtrace.v2.StackTrace DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.cloudtrace.v2.StackTrace();
  }

  public static com.google.devtools.cloudtrace.v2.StackTrace getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StackTrace>
      PARSER = new com.google.protobuf.AbstractParser<StackTrace>() {
    public StackTrace parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new StackTrace(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<StackTrace> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StackTrace> getParserForType() {
    return PARSER;
  }

  public com.google.devtools.cloudtrace.v2.StackTrace getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

