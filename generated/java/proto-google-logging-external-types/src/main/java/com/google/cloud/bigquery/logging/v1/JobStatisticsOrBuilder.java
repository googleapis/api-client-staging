// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/logging/v1/audit_data.proto

package com.google.cloud.bigquery.logging.v1;

public interface JobStatisticsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.bigquery.logging.v1.JobStatistics)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Time when the job was created.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp create_time = 1;</code>
   */
  boolean hasCreateTime();
  /**
   * <pre>
   * Time when the job was created.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp create_time = 1;</code>
   */
  com.google.protobuf.Timestamp getCreateTime();
  /**
   * <pre>
   * Time when the job was created.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp create_time = 1;</code>
   */
  com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder();

  /**
   * <pre>
   * Time when the job started.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp start_time = 2;</code>
   */
  boolean hasStartTime();
  /**
   * <pre>
   * Time when the job started.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp start_time = 2;</code>
   */
  com.google.protobuf.Timestamp getStartTime();
  /**
   * <pre>
   * Time when the job started.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp start_time = 2;</code>
   */
  com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();

  /**
   * <pre>
   * Time when the job ended.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 3;</code>
   */
  boolean hasEndTime();
  /**
   * <pre>
   * Time when the job ended.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 3;</code>
   */
  com.google.protobuf.Timestamp getEndTime();
  /**
   * <pre>
   * Time when the job ended.
   * </pre>
   *
   * <code>optional .google.protobuf.Timestamp end_time = 3;</code>
   */
  com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder();

  /**
   * <pre>
   * Total bytes processed for a job.
   * </pre>
   *
   * <code>optional int64 total_processed_bytes = 4;</code>
   */
  long getTotalProcessedBytes();

  /**
   * <pre>
   * Processed bytes, adjusted by the job's CPU usage.
   * </pre>
   *
   * <code>optional int64 total_billed_bytes = 5;</code>
   */
  long getTotalBilledBytes();

  /**
   * <pre>
   * The tier assigned by CPU-based billing.
   * </pre>
   *
   * <code>optional int32 billing_tier = 7;</code>
   */
  int getBillingTier();
}
